+ [blueprints]
+----authentication.py
+----configuration.py
+----data_retrieval.py
+----referral.py
+----role_pages.py
+----site_request.py
+----user_management.py
+----user_settings.py
+----utility.py

authentication.py
from flask import Blueprint, jsonify, request, render_template 
from utils.auth import login_user, signup_user 
from utils.users import load_users_settings, save_users_settings 
import jwt 
import datetime 
from flask import current_app 
 
authentication_bp = Blueprint('authentication', __name__) 
 
@authentication_bp.route('/login', methods=['POST']) 
def login(): 
    return login_user() 
 
@authentication_bp.route('/signup', methods=['GET']) 
def signup_page(): 
    return render_template('signup.html') 
 
@authentication_bp.route('/signup', methods=['POST']) 
def signup(): 
    return signup_user() 
 
@authentication_bp.route('/update-password', methods=['POST']) 
@login_required(["allauth"], require_all=False) 
def update_password(): 
    data = request.get_json() 
    if not data or 'email' not in data or 'password' not in data: 
        return jsonify({"status": "error", "message": "Email and password required"}), 400 
    email = data["email"].strip() 
    new_password = data["password"].strip() 
    users_settings = load_users_settings() 
    user_id = next((uid for uid, u in users_settings.items() if u["email_address"].lower() == email.lower()), None) 
    if not user_id or user_id != request.user_id: 
        return jsonify({"status": "error", "message": "Unauthorized"}), 403 
    import bcrypt 
    hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8') 
    users_settings[user_id]["password"] = hashed_password 
    save_users_settings(users_settings) 
    return jsonify({"status": "success", "message": f"Password updated for {email}", "user_id": user_id}), 200 

configuration.py
from flask import Blueprint, jsonify, request 
from utils.config import load_config, save_config 
from utils.auth import login_required 
 
configuration_bp = Blueprint('configuration', __name__) 
 
@configuration_bp.route('/config', methods=['GET']) 
@login_required(["admin"], require_all=True) 
def get_config(): 
    config = load_config() 
    return jsonify({"status": "success", "count": len(config), "config": config}), 200 
 
@configuration_bp.route('/config/<affiliate>', methods=['PATCH']) 
@login_required(["admin"], require_all=True) 
def replace_config(affiliate): 
    config = load_config() 
    data = request.get_json() 
    if not data or not isinstance(data, dict): 
        return jsonify({"status": "error", "message": "Invalid data"}), 400 
    config[affiliate] = data 
    save_config(config) 
    return jsonify({"status": "success", "message": f"Updated {affiliate} config"}), 200 

data_retrieval.py
from flask import Blueprint, jsonify, request 
from utils.auth import login_required 
from utils.categories import get_all_categories, filter_categories_with_products 
from utils.products import search_all_discounted 
 
data_retrieval_bp = Blueprint('data_retrieval', __name__) 
 
@data_retrieval_bp.route('/categories', methods=['GET']) 
@login_required(["allauth"], require_all=False) 
def get_categories(): 
    parent_id = request.args.get('parent_id') 
    categories = get_all_categories(parent_id) 
    return jsonify({"status": "success", "count": len(categories), "categories": categories}), 200 
 
@data_retrieval_bp.route('/discounted-products', methods=['GET']) 
def get_all_discounted_products(): 
    category_id = request.args.get('category_id') 
    if not category_id: 
        return jsonify({"status": "error", "message": "category_id required"}), 400 
    products = search_all_discounted(category_id) 
    return jsonify({"status": "success", "count": len(products), "products": products}), 200 
from flask import Blueprint, jsonify, request 
from utils.auth import login_required 
from utils.categories import get_all_categories, filter_categories_with_products 
from utils.products import search_all_discounted 
 
data_retrieval_bp = Blueprint('data_retrieval', __name__) 
 
@data_retrieval_bp.route('/categories', methods=['GET']) 
@login_required(["allauth"], require_all=False) 
def get_categories(): 
    parent_id = request.args.get('parent_id') 
    categories = get_all_categories(parent_id) 
    return jsonify({"status": "success", "count": len(categories), "categories": categories}), 200 
 
@data_retrieval_bp.route('/discounted-products', methods=['GET']) 
def get_all_discounted_products(): 
    category_id = request.args.get('category_id') 
    if not category_id: 
        return jsonify({"status": "error", "message": "category_id required"}), 400 
    products = search_all_discounted(category_id) 
    return jsonify({"status": "success", "count": len(products), "products": products}), 200 

referral.py
from flask import Blueprint, jsonify, request 
from utils.users import load_users_settings, save_users_settings 
 
referral_bp = Blueprint('referral', __name__) 
 
@referral_bp.route('/referal', methods=['POST']) 
def handle_referral(): 
    data = request.get_json() 
    if not data or 'timestamp' not in data: 
        return jsonify({"status": "error", "message": "Invalid data"}), 400 
    users_settings = load_users_settings() 
    referer = data.get("referer", "none") 
    if referer not in users_settings: 
        users_settings[referer] = {"referrals": {"visits": [], "orders": []}} 
    if "page" in data: 
        users_settings[referer]["referrals"]["visits"].append({"page": data["page"], "timestamp": data["timestamp"]}) 
    elif "orderId" in data: 
        users_settings[referer]["referrals"]["orders"].append({"orderId": data["orderId"], "buyer": data["buyer"], "total": data["total"], "timestamp": data["timestamp"]}) 
    save_users_settings(users_settings) 
    return jsonify({"status": "success", "message": "Referral recorded", "referer": referer}), 200 

role_pages.py
from flask import Blueprint, render_template 
from utils.auth import login_required 
 
role_pages_bp = Blueprint('role_pages', __name__) 
 
@role_pages_bp.route('/admin', methods=['GET']) 
@login_required(["admin"], require_all=True) 
def admin(): 
    return render_template('admin.html') 
 
@role_pages_bp.route('/community', methods=['GET']) 
@login_required(["community", "admin"], require_all=False) 
def community(): 
    return render_template('community.html') 
 
@role_pages_bp.route('/merchant', methods=['GET']) 
@login_required(["merchant", "admin"], require_all=False) 
def merchant(): 
    return render_template('merchant.html') 
 
@role_pages_bp.route('/partner', methods=['GET']) 
@login_required(["wixpro", "admin"], require_all=False) 
def wixpro(): 
    return render_template('partner.html') 

site_request.py
from flask import Blueprint, jsonify, request
from utils.auth import require_permissions
from utils.data import load_site_request, save_site_request, load_users_settings
import os
import datetime
import re

# Define the Blueprint
site_request_bp = Blueprint('site_request', __name__)

# Endpoint to save a site request
@site_request_bp.route('/<user_id>/siterequest', methods=['POST'])
@require_permissions(["admin", "merchant", "community"], require_all=False)
def save_site_request_endpoint(user_id):
    """
    Save a site request for a specific user.
    
    Args:
        user_id (str): The ID of the user submitting the site request.
    
    Returns:
        JSON response with status and message.
    """
    try:
        # Get JSON data from the request
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400

        # Validate user_id consistency between URL and body
        body_user_id = data.get("userId")
        if body_user_id and body_user_id != user_id:
            return jsonify({"status": "error", "message": "User ID in body does not match URL"}), 400

        # Permission check: Admins can save for any user, others only for themselves
        if "admin" not in request.permissions and request.user_id != user_id:
            return jsonify({"status": "error", "message": "Unauthorized: Must be admin or match user_id"}), 403

        # Construct site request data
        request_type = data.get("type", "community")
        site_request = {
            "user_id": user_id,
            "type": request_type,
            "communityName": data.get("communityName") or data.get("storeName") or "",
            "aboutCommunity": data.get("aboutCommunity") or data.get("aboutStore") or "",
            "communityLogos": data.get("communityLogos") or data.get("storeLogos") or [],
            "colorPrefs": data.get("colorPrefs", ""),
            "stylingDetails": data.get("stylingDetails", ""),
            "preferredDomain": data.get("preferredDomain", "mycommunity.org"),
            "emails": data.get("emails", []),
            "pages": data.get("pages", []),
            "widgets": data.get("widgets", []),
            "submitted_at": datetime.datetime.utcnow().isoformat()
        }

        # Validate required fields
        if not site_request["communityName"]:
            return jsonify({"status": "error", "message": "Community name or store name is required"}), 400

        # Validate domain name
        domain_regex = r'^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$'
        if not re.match(domain_regex, site_request["preferredDomain"]):
            return jsonify({"status": "error", "message": "Invalid domain name"}), 400

        # Process page images
        for page in site_request["pages"]:
            if "images" in page and page["images"]:
                page["images"] = [img if isinstance(img, str) else "placeholder" for img in page["images"]]

        # Save the site request
        save_site_request(user_id, site_request)
        return jsonify({"status": "success", "message": "Site request saved successfully"}), 200

    except Exception as e:
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

# Endpoint to list all site requests
@site_request_bp.route('/siterequests', methods=['GET'])
@require_permissions(["admin", "wixpro"], require_all=False)
def list_site_requests():
    """
    List all site requests, accessible only to admin or wixpro users.
    
    Returns:
        JSON response with status and a list of site request summaries.
    """
    try:
        siterequest_dir = 'siterequest'
        # Return empty list if directory doesn't exist
        if not os.path.exists(siterequest_dir):
            return jsonify({"status": "success", "siterequests": []}), 200

        # Load user settings and initialize list
        users_settings = load_users_settings()
        siterequests = []

        # Iterate through site request files
        for filename in os.listdir(siterequest_dir):
            if filename.endswith('.json'):
                user_id = filename.replace('.json', '')
                site_request = load_site_request(user_id)
                if site_request:
                    # Extract user details from settings
                    contact_name = users_settings.get(user_id, {}).get('contact_name', '')
                    email = users_settings.get(user_id, {}).get('email_address', '')
                    request_type = site_request.get('type', '')
                    store_name = site_request.get('storeName')
                    community_name = site_request.get('communityName')
                    organisation = store_name if store_name else community_name if community_name else ''
                    received_at = site_request.get('submitted_at', '')

                    # Append site request summary
                    siterequests.append({
                        'user_id': user_id,
                        'type': request_type,
                        'received_at': received_at,
                        'contact_name': contact_name,
                        'email': email,
                        'organisation': organisation
                    })

        # Sort by submission time, most recent first
        siterequests.sort(key=lambda x: x['received_at'] or '', reverse=True)
        return jsonify({"status": "success", "siterequests": siterequests}), 200

    except Exception as e:
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500
user_management.py
from flask import Blueprint, jsonify, request
from utils.auth import require_permissions
from utils.data import load_users_settings, save_users_settings

# Define the user_management blueprint
user_management_bp = Blueprint('user_management', __name__)

@user_management_bp.route('/users', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_users():
    """
    Retrieve a list of all users.

    Returns:
        JSON response with a list of users or an error message.
    """
    try:
        users_settings = load_users_settings()
        user_list = [
            {
                "USERid": user_id,
                "email_address": user.get("email_address", ""),
                "contact_name": user.get("contact_name", "")
            }
            for user_id, user in users_settings.items()
        ]
        return jsonify({"status": "success", "users": user_list}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_management_bp.route('/users/<user_id>', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_user(user_id):
    """
    Retrieve details of a specific user.

    Args:
        user_id (str): The ID of the user to retrieve.

    Returns:
        JSON response with the user's details or an error message.
    """
    try:
        users_settings = load_users_settings()
        if user_id not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        user = users_settings[user_id]
        user_data = {
            "USERid": user_id,
            "email_address": user.get("email_address", ""),
            "contact_name": user.get("contact_name", ""),
            "permissions": user.get("permissions", []),
            "website_url": user.get("website_url", ""),
            "wixClientId": user.get("wixClientId", ""),
            "referrals": user.get("referrals", {"visits": [], "orders": []})
        }
        return jsonify({"status": "success", "user": user_data}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_management_bp.route('/permissions/<user_id>', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_permissions(user_id):
    """
    Retrieve the permissions of a specific user.

    Args:
        user_id (str): The ID of the user whose permissions are being retrieved.

    Returns:
        JSON response with the user's permissions or an error message.
    """
    try:
        users_settings = load_users_settings()
        if user_id not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        permissions = users_settings[user_id].get('permissions', [])
        return jsonify({"status": "success", "permissions": permissions}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_management_bp.route('/permissions/<user_id>', methods=['POST'])
@require_permissions(["admin"], require_all=True)
def add_permission(user_id):
    """
    Add a permission to a specific user.

    Args:
        user_id (str): The ID of the user to whom the permission is being added.

    Returns:
        JSON response confirming the addition or an error message.
    """
    data = request.get_json()
    if 'permission' not in data:
        return jsonify({"status": "error", "message": "Permission field is required"}), 400
    permission = data['permission']
    try:
        users_settings = load_users_settings()
        if user_id not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        if permission in users_settings[user_id].get('permissions', []):
            return jsonify({"status": "error", "message": "Permission already exists"}), 400
        users_settings[user_id]['permissions'].append(permission)
        save_users_settings(users_settings)
        return jsonify({"status": "success", "message": "Permission added"}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_management_bp.route('/permissions/<user_id>', methods=['DELETE'])
@require_permissions(["admin"], require_all=True)
def remove_permission(user_id):
    """
    Remove a permission from a specific user.

    Args:
        user_id (str): The ID of the user from whom the permission is being removed.

    Returns:
        JSON response confirming the removal or an error message.
    """
    data = request.get_json()
    if 'permission' not in data:
        return jsonify({"status": "error", "message": "Permission field is required"}), 400
    permission = data['permission']
    try:
        users_settings = load_users_settings()
        if user_id not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        if permission not in users_settings[user_id].get('permissions', []):
            return jsonify({"status": "error", "message": "Permission not found"}), 400
        users_settings[user_id]['permissions'].remove(permission)
        save_users_settings(users_settings)
        return jsonify({"status": "success", "message": "Permission removed"}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500
user_settings.py
from flask import Blueprint, jsonify, request
from utils.auth import require_permissions
from utils.data import load_users_settings, save_users_settings

# Define the user_settings blueprint
user_settings_bp = Blueprint('user_settings', __name__)

@user_settings_bp.route('/<USERid>/user', methods=['GET'])
@require_permissions(["self", "admin"], require_all=False)
def get_user_settings(USERid):
    """
    Retrieve the settings for a specific user.

    Args:
        USERid (str): The ID of the user whose settings are being retrieved.

    Returns:
        JSON response with the user's settings or an error message.
    """
    try:
        users_settings = load_users_settings()
        if USERid not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        settings = users_settings[USERid]
        return jsonify({
            "status": "success",
            "contact_name": settings.get("contact_name", ""),
            "website_url": settings.get("website_url", ""),
            "email_address": settings.get("email_address", ""),
            "phone_number": settings.get("phone_number", ""),
            "wixClientId": settings.get("wixClientId", "")
        }), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_settings_bp.route('/<USERid>/user', methods=['PUT'])
@require_permissions(["self", "admin"], require_all=False)
def put_user_settings(USERid):
    """
    Replace the entire settings for a specific user.

    Args:
        USERid (str): The ID of the user whose settings are being replaced.

    Returns:
        JSON response confirming the replacement or an error message.
    """
    if not request.json:
        return jsonify({"status": "error", "message": "Request body must contain settings"}), 400
    settings = request.json
    required_fields = ["contact_name", "website_url", "email_address", "phone_number", "wixClientId"]
    if not all(field in settings for field in required_fields):
        return jsonify({"status": "error", "message": "Settings must include all required fields"}), 400
    try:
        users_settings = load_users_settings()
        users_settings[USERid] = settings
        save_users_settings(users_settings)
        return jsonify({
            "status": "success",
            "message": f"Settings for user {USERid} replaced",
            "settings": settings
        }), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_settings_bp.route('/<USERid>/user', methods=['PATCH'])
@require_permissions(["self", "admin", "wixpro"], require_all=False)
def patch_user_settings(USERid):
    """
    Partially update the settings for a specific user.

    Args:
        USERid (str): The ID of the user whose settings are being updated.

    Returns:
        JSON response confirming the update or an error message.
    """
    if not request.json:
        return jsonify({"status": "error", "message": "Request body must contain settings"}), 400
    new_settings = request.json
    try:
        users_settings = load_users_settings()
        if USERid not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        current_settings = users_settings[USERid]
        valid_fields = ["contact_name", "website_url", "email_address", "phone_number", "wixClientId"]

        # Restrict "wixpro" users to only updating wixClientId unless they have admin or self permissions
        if "wixpro" in request.permissions and not ("admin" in request.permissions or request.user_id == USERid):
            if any(key not in ["wixClientId"] for key in new_settings.keys()):
                return jsonify({"status": "error", "message": "Wixpro can only update wixClientId"}), 403

        # Update only the provided fields
        for key in new_settings:
            if key in valid_fields:
                current_settings[key] = new_settings[key]
        users_settings[USERid] = current_settings
        save_users_settings(users_settings)
        return jsonify({
            "status": "success",
            "message": f"Settings for user {USERid} updated",
            "settings": current_settings
        }), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500
utility.py
from flask import Blueprint, render_template, jsonify, request, make_response, current_app
import os
import json
import markdown
import requests
import whois
from utils.auth import require_permissions

# Define the utility blueprint
utility_bp = Blueprint('utility', __name__)

@utility_bp.route('/', methods=['GET'])
def home():
    """
    Render the home page, typically a login page.
    Returns:
        Rendered HTML template for the login page.
    """
    return render_template('login.html')

@utility_bp.route('/branding', methods=['GET'])
def branding():
    """
    Serve branding information from a JSON file.
    Returns:
        JSON response with branding data or an error message.
    """
    try:
        root_dir = os.path.dirname(os.path.abspath(__file__))
        json_path = os.path.join(root_dir, 'branding.json')
        with open(json_path, 'r') as f:
            branding_data = json.load(f)
        return jsonify(branding_data)
    except FileNotFoundError:
        return jsonify({'content': '<h1>Branding content not found</h1>'}), 500
    except Exception as e:
        return jsonify({'content': f'Internal Server Error: {str(e)}'}), 500

@utility_bp.route('/render-md/<path:full_path>', methods=['GET'])
@require_permissions(["allauth"], require_all=False)
def render_md(full_path):
    """
    Render Markdown files from the static folder or GitHub based on the URL path.
    Args:
        full_path (str): The path to the Markdown file, either starting with 'static' or a GitHub path.
    Returns:
        HTML response with the rendered Markdown content or an error page.
    """
    try:
        segments = full_path.rstrip('/').split('/')
        if not segments or segments == ['']:
            raise ValueError("Invalid path provided")
        
        if segments[0] == 'static':
            if len(segments) < 2:
                raise ValueError("No file path provided after 'static'")
            file_path = '/'.join(segments[1:])
            if not file_path.endswith('.md'):
                raise ValueError("Only .md files are supported")
            static_file = os.path.join(current_app.static_folder, file_path)
            if not os.path.isfile(static_file):
                raise FileNotFoundError("File not found in static folder")
            with open(static_file, 'r', encoding='utf-8') as f:
                md_content = f.read()
        else:
            if len(segments) < 4:
                raise ValueError("Invalid GitHub path: Must provide owner/repo/branch/path")
            owner, repo, branch, *path_segments = segments
            path = '/'.join(path_segments)
            if not path.endswith('.md'):
                raise ValueError("Only .md files are supported")
            url = f"https://raw.githubusercontent.com/{owner}/{repo}/{branch}/{path}"
            response = requests.get(url)
            if response.status_code != 200:
                raise FileNotFoundError("File not found on GitHub")
            md_content = response.text
        
        html_content = markdown.markdown(md_content, extensions=['tables'])
        status_code = 200
    except ValueError as e:
        status_code = 404
        error_message = str(e)
    except FileNotFoundError as e:
        status_code = 404
        error_message = str(e)
    except requests.RequestException as e:
        status_code = 500
        error_message = "Failed to fetch from GitHub"
    except Exception as e:
        status_code = 500
        error_message = "An unexpected error occurred"
        current_app.logger.error(f"Error: {e}", exc_info=True)
    
    # Load error template based on status code
    template_path = os.path.join(current_app.static_folder, 'error', f'{status_code}.md')
    with open(template_path, 'r', encoding='utf-8') as f:
        template = f.read()
    
    # Replace placeholders in the template
    if status_code == 200:
        final_html = template.replace('{content}', html_content)
    else:
        final_html = template.replace('{error_message}', error_message)
    
    response = make_response(final_html, status_code)
    response.headers['Content-Type'] = 'text/html'
    return response

@utility_bp.route('/check-domain', methods=['GET'])
@require_permissions(["allauth"], require_all=False)
def check_domain():
    """
    Check the availability of a domain name using WHOIS.
    Query Parameters:
        domain (str): The domain name to check (e.g., 'example.com').
    Returns:
        JSON response with domain availability or an error message.
    """
    domain = request.args.get('domain')
    if not domain:
        return jsonify({"error": "Please provide a domain name"}), 400
    if not all(c.isalnum() or c in '-.' for c in domain) or '.' not in domain or len(domain.split('.')[-1]) < 2:
        return jsonify({"error": "Invalid domain name (e.g., mystore.uk)"}), 400
    
    try:
        w = whois.whois(domain)
        is_available = w.creation_date is None
        return jsonify({"domain": domain, "available": is_available}), 200
    except Exception as e:
        return jsonify({"error": f"Failed to check domain availability: {str(e)}"}), 500
