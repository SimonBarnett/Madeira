+ [clubmadeira.io]
+----README.md
+----Wix.py
+----affiliate.md
+----[blueprints]
+------authentication.py
+------configuration.py
+------data_retrieval.py
+------referral.py
+------role_pages.py
+------site_request.py
+------user_management.py
+------user_settings.py
+------utility.py
+----branding.json
+----checksum.md
+----config.json
+----flask.md
+----has.py
+----madeira.py
+----pseudo_categories.py
+----referal.htm
+----[siterequest]
+----sms.py
+----[static]
+------[error]
+--------200.md
+--------403.md
+--------404.md
+--------500.md
+------[img]
+------[js]
+--------admin-page.js
+--------category-management.js
+--------common.js
+--------community-page.js
+--------merchant-page.js
+--------page-load.js
+--------partner-page.js
+--------site-auth.js
+--------site-navigation.js
+--------site-request.js
+--------user-management.js
+------[old]
+--------admin copy.html
+--------all.js
+--------community copy.html
+--------madeira.py
+--------merchant copy.html
+--------partner.old.html
+------styles.css
+----[templates]
+------admin.html
+------community.html
+------login.html
+------merchant.html
+------my_account.html
+------partner.html
+------signup.html
+----test.py
+----test2.py
+----users_settings.json
+----[utils]
+------auth.py
+------categories.py
+------config.py
+------data.py
+------products.py
+------users.py
+----velo.clubdiscounts.js
+----velo.md
+----velo.orderplace.js
+----velo.product.js
+----web.config
+----wix2.py
+----wixcat.py

affiliate.md
# How to Register for Amazon Affiliate Status

This guide will walk you through the process of registering for the **Amazon Associates program**, which allows you to earn commissions by promoting Amazon products through affiliate links. By following these steps, you'll be able to set up your account and start monetizing your website, blog, or social media presence.

---

## Prerequisites

Before you begin, ensure you meet the following requirements:

- **A Website, Blog, or Social Media Presence**: You need an active platform (e.g., a website, blog, YouTube channel, or social media account) where you can promote Amazon products.
- **Content Guidelines**: Your platform must comply with Amazon's policies. Avoid prohibited content like adult material, illegal products, or misleading information.
- **Basic Knowledge of Affiliate Marketing**: While not required, understanding affiliate marketing basics can help you succeed.

---

## Step-by-Step Registration Process

### Step 1: Visit the Amazon Associates Website
- Open your browser and go to the [Amazon Associates homepage](https://affiliate-program.amazon.com/).
- Click the **"Join Now for Free"** button to begin.

### Step 2: Sign In or Create an Amazon Account
- If you have an existing Amazon account, sign in with your email and password.
- If not, click **"Create your Amazon account"** and follow the prompts to set one up.

### Step 3: Enter Your Account Information
- **Payee Name**: Provide the name of the individual or business receiving payments.
- **Address**: Enter your complete address, including country, for tax and payment purposes.
- **Phone Number**: Input a valid phone number for contact and verification.

### Step 4: Add Your Website or Social Media Profile
- **Website or Mobile App**: Enter the URL of your website, blog, or app where you’ll promote products.
- **Social Media Profiles**: If you don’t have a website, list your social media accounts (e.g., YouTube, Instagram). Ensure they have enough followers and engagement.
- **Description**: Write a brief summary of your platform’s content and how you plan to promote Amazon products.

### Step 5: Set Up Your Profile
- **Associate ID**: Create a unique ID (e.g., your name or website name) to track your affiliate links.
- **Traffic and Monetization**: Describe how you attract visitors (e.g., SEO, social media) and any current monetization methods (e.g., ads).

### Step 6: Verify Your Identity
- Amazon will send a verification code to your phone.
- Enter the code on the registration page to confirm your identity.

### Step 7: Accept the Terms and Conditions
- Read the **Amazon Associates Operating Agreement** and **Program Policies**.
- Check the box to agree to the terms.

### Step 8: Complete the Registration
- Click **"Finish"** to submit your application.
- Amazon will review it within 24 hours. You’ll receive an email with approval status or requests for more information.

---

## Tips for a Successful Application

- **Quality Content**: Ensure your platform has original, high-quality content with a clear niche.
- **Engagement**: Active user interaction (e.g., comments, likes) boosts approval chances.
- **Compliance**: Don’t promote restricted items or use deceptive tactics.
- **Be Detailed**: Provide thorough descriptions of your platform and traffic sources.

---

## After Registration

Once approved:
- **Log In**: Access your Amazon Associates dashboard.
- **Create Links**: Use the tools to generate affiliate links for products.
- **Track Earnings**: Monitor performance via the reporting section.

If rejected, review Amazon’s feedback, improve your platform, and reapply.

---

## Summary

Registering for Amazon affiliate status involves creating an account, adding your platform details, and agreeing to Amazon’s terms. With a compliant, quality platform and clear application details, you can join the Amazon Associates program and start earning commissions. For more help, check the [Amazon Associates Help Center](https://affiliate-program.amazon.com/help).

---

This guide provides everything you need to successfully register and begin your affiliate journey with Amazon!

# Amazon Affiliate Program Application – Merseyside Model Flying Club

**Subject:** Amazon Affiliate Program Application – Merseyside Model Flying Club  

Dear Amazon Affiliate Program Team,  

We are excited to submit our application for the Amazon Affiliate Program on behalf of the Merseyside Model Flying Club, the largest model flying club in Merseyside, UK. With a thriving membership of passionate aviation enthusiasts, a strong online presence, and deep ties to our local community, we believe our club is an ideal candidate to join your affiliate network. Our goal is to leverage this partnership to enhance our website’s offerings, provide valuable resources to our members, and generate additional revenue to support our club’s activities and community initiatives.  

## About Merseyside Model Flying Club  
As the largest model flying club in Merseyside, we represent a diverse community of model aviation hobbyists, ranging from beginners to experienced pilots. Our club maintains an active website that serves as a hub for members and visitors alike, featuring event updates, educational content, and resources for model flying enthusiasts. With a growing online audience and a reputation for excellence in the region, we are well-positioned to promote relevant products through the Amazon Affiliate Program.  

## Proposal: Flight Instructor Product Reviews  
We propose a unique and engaging approach to integrating Amazon Affiliate links into our website. Our team of experienced flight instructors—who are skilled in both model aviation and real-world flight training—will review and recommend products available on Amazon. These reviews will focus on items relevant to our audience, such as:  
- Model aircraft kits and components (e.g., drones, RC planes, and helicopters)  
- Tools and accessories for building and maintaining models  
- Flight simulators and training aids  
- Safety gear and apparel for flying enthusiasts  

Our instructors will test and evaluate these products, providing detailed, honest reviews based on their expertise. These reviews will be featured prominently on our website, accompanied by Amazon Affiliate links, allowing our members and visitors to purchase recommended items directly. This initiative not only adds value for our audience by offering trusted recommendations but also drives traffic to Amazon, benefiting both our club and your platform.  

## Community Involvement and Air Cadets Partnership  
The Merseyside Model Flying Club is deeply committed to supporting our local community. We regularly host events such as open flying days, workshops, and demonstrations to introduce model aviation to people of all ages. Our club also proudly partners with the local Air Cadets, providing mentorship, flight training opportunities, and hands-on experiences with model aircraft. Through this collaboration, we inspire the next generation of aviation enthusiasts and contribute to youth development in Merseyside.  

By joining the Amazon Affiliate Program, we aim to reinvest earnings into these community efforts—expanding our outreach, funding equipment for Air Cadet programs, and offering more free or subsidized workshops for local residents. This aligns with our mission to make model aviation accessible and enjoyable for everyone.  

## Why We’re a Great Fit  
- **Engaged Audience:** Our website attracts a dedicated audience of model flying enthusiasts, many of whom are actively seeking high-quality products to enhance their hobby.  
- **Trusted Expertise:** Our flight instructors bring credibility and authority to product reviews, ensuring our recommendations resonate with our audience.  
- **Community Focus:** Our commitment to local involvement and the Air Cadets strengthens our reputation and reach, making us a valuable partner for Amazon.  

We are eager to collaborate with Amazon to create a mutually beneficial partnership. Please let us know if you require additional information about our club, website traffic, or content plans. We look forward to the opportunity to join the Amazon Affiliate Program and contribute to its success while supporting our club’s growth and community mission.  

Thank you for considering our application.  

Sincerely,  
[Your Full Name]  
[Your Position, e.g., Club Secretary or Webmaster]  
Merseyside Model Flying Club  
[Website URL]  
[Email Address]  
[Phone Number]  

---

### Notes:  
- Replace placeholders (e.g., `[Your Full Name]`, `[Website URL]`) with actual details specific to the club.  
- If you have website traffic data (e.g., monthly visitors or page views), include it to strengthen the application.  
- This application assumes the club has a website; if not, you could adapt it to focus on a planned website or social media presence.  



---

# Affiliate Program Instructions and Best Case Scenarios

This document provides instructions for registering with the non-Amazon affiliate programs referenced in the Flask application (eBay UK, Awin UK, and CJ UK) and outlines the best-case scenarios for approval and success. Each section includes step-by-step guidance and an optimal use case tailored to an entity like the Merseyside Model Flying Club.

## eBay UK Affiliate Program (eBay Partner Network)

### Instructions for Registration

The eBay Partner Network (EPN) allows you to earn commissions by promoting eBay products via affiliate links. Follow these steps to register:

1. **Visit the eBay Partner Network Portal**
   - Go to [https://partnernetwork.ebay.com/](https://partnernetwork.ebay.com/).
   - Click **"Join Now"** to start the process.

2. **Sign In or Create an eBay Account**
   - Use an existing eBay account or create a new one by providing your email, password, and personal details.

3. **Complete the Application Form**
   - **Contact Information**: Enter your name, address, and phone number.
   - **Website/App Details**: Provide the URL of your website (e.g., Merseyside Model Flying Club’s site) or app. If using social media, list your profiles.
   - **Traffic Sources**: Describe how you drive traffic (e.g., organic search, social media, email newsletters).
   - **Content Description**: Explain your site’s purpose and content (e.g., model aviation resources and reviews).

4. **Agree to Terms**
   - Review and accept the eBay Partner Network Agreement.

5. **Submit Application**
   - Submit your details for review. Approval typically takes 1-3 business days, and you’ll receive an email confirmation.

6. **Set Up Tracking**
   - Once approved, log in to the EPN dashboard, generate affiliate links, and integrate them into your platform.

### Best Case for Approval and Success

- **Ideal Applicant**: The Merseyside Model Flying Club, with an established website featuring model aviation content, event updates, and a partnership with Air Cadets.
- **Strategy**: Leverage the club’s niche audience by creating a section for “Recommended Model Flying Gear on eBay,” featuring curated listings of RC planes, drones, and tools reviewed by club instructors. Include affiliate links in blog posts about building and flying models.
- **Why It Works**: eBay values targeted traffic. The club’s engaged community of hobbyists, combined with expert reviews, aligns with eBay’s goal of driving relevant sales. Reinvesting commissions into community events strengthens the application’s appeal.
- **Expected Outcome**: Quick approval due to a clear niche and high engagement potential, with steady commissions from hobbyist purchases.

## Awin UK Affiliate Program

### Instructions for Registration

Awin is a global affiliate network that connects you with thousands of merchants, including UK-based retailers relevant to model flying. Here’s how to join:

1. **Visit the Awin Website**
   - Navigate to [https://www.awin.com/](https://www.awin.com/).
   - Click **"Sign Up"** under the Publisher section.

2. **Create an Account**
   - Provide your email and create a password.
   - Fill in personal details (name, address, phone).

3. **Provide Platform Information**
   - **Website/Social Media**: Enter your primary promotional channel (e.g., the club’s website URL).
   - **Promotional Type**: Select “Content” (for blogs/websites) or “Social Media” if applicable.
   - **Description**: Detail your content focus (e.g., model aviation education and reviews) and audience.

4. **Pay the Deposit**
   - Pay a £5 refundable deposit (credited back after earning your first commission).

5. **Submit for Approval**
   - Submit your application. Awin reviews it within 1-5 days, and you’ll receive an email with your Publisher ID upon approval.

6. **Join Merchant Programs**
   - Log in to the Awin dashboard, search for UK merchants (e.g., hobby retailers), and apply to their programs individually.

### Best Case for Approval and Success

- **Ideal Applicant**: The Merseyside Model Flying Club, with a website hosting educational content and a growing social media presence.
- **Strategy**: Partner with Awin merchants selling model aircraft kits, tools, and simulators. Create a “Gear Guide” page with instructor-led reviews and Awin affiliate links, targeting both club members and online hobbyists.
- **Why It Works**: Awin prioritizes publishers with quality content and a defined audience. The club’s expertise and community focus make it a strong candidate, especially for niche merchants seeking targeted promotion.
- **Expected Outcome**: Approval within days, with commissions from diverse merchants enhancing revenue beyond Amazon or eBay, supporting club workshops and Air Cadet initiatives.

## CJ UK Affiliate Program (CJ Affiliate by Conversant)

### Instructions for Registration

CJ Affiliate is a leading network connecting publishers with global brands, including UK retailers. Here’s how to register:

1. **Visit the CJ Affiliate Website**
   - Go to [https://www.cj.com/](https://www.cj.com/).
   - Click **"Publisher Sign Up"** in the footer or top navigation.

2. **Fill Out the Application**
   - **Account Details**: Provide your email, name, and create a password.
   - **Company Information**: Enter your entity name (e.g., Merseyside Model Flying Club) and address.
   - **Website Details**: Submit your website URL and a description of its content and audience.

3. **Describe Your Promotion Methods**
   - Explain how you’ll promote products (e.g., reviews, blog posts, social media).
   - Specify traffic sources (e.g., organic search, community referrals).

4. **Submit Application**
   - Agree to the terms and submit. CJ reviews applications within 3-7 days, notifying you via email.

5. **Join Advertiser Programs**
   - Once approved, log in to the CJ dashboard, browse UK advertisers (e.g., tech or hobby brands), and apply to their programs.

### Best Case for Approval and Success

- **Ideal Applicant**: The Merseyside Model Flying Club, with a professional website and a track record of community engagement.
- **Strategy**: Focus on CJ advertisers offering flight simulators, electronics, and hobby tools. Integrate affiliate links into a “Training Resources” section, featuring detailed reviews and tutorials by instructors, appealing to both hobbyists and Air Cadets.
- **Why It Works**: CJ favors publishers with authoritative content and reliable traffic. The club’s niche expertise and educational mission align with premium advertisers, ensuring approval and high-converting promotions.
- **Expected Outcome**: Approval within a week, with significant commissions from high-value products, funding club expansion and youth programs.

## Summary

Each affiliate program (eBay UK, Awin UK, CJ UK) offers unique opportunities for the Merseyside Model Flying Club to monetize its platform. By tailoring content to its niche—model aviation—and leveraging instructor expertise, the club can secure approvals and maximize earnings. The best-case scenarios involve creating review-driven content, targeting engaged hobbyists, and reinvesting profits into community initiatives, ensuring long-term success across all programs.
branding.json
{
    "admin": "<div style=\"background-color: #1a73e8; color: white; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 25px; height: 120px; box-sizing: border-box; overflow: visible;\"><div style=\"height: 80px;\"><svg height=\"80px\" width=\"auto\" viewBox=\"0 0 512 512\" fill=\"white\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" preserveAspectRatio=\"xMidYMid meet\"><path d=\"M256 48C141.1 48 48 141.1 48 256l0 40c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-40C0 114.6 114.6 0 256 0S512 114.6 512 256l0 144.1c0 48.6-39.4 88-88.1 88L313.6 488c-8.3 14.3-23.8 24-41.6 24l-32 0c-26.5 0-48-21.5-48-48s21.5-48 48-48l32 0c17.8 0 33.3 9.7 41.6 24l110.4 .1c22.1 0 40-17.9 40-40L464 256c0-114.9-93.1-208-208-208zM144 208l16 0c17.7 0 32 14.3 32 32l0 112c0 17.7-14.3 32-32 32l-16 0c-35.3 0-64-28.7-64-64l0-48c0-35.3 28.7-64 64-64zm224 0c35.3 0 64 28.7 64 64l0 48c0 35.3-28.7 64-64 64l-16 0c-17.7 0-32-14.3-32-32l0-112c0-17.7 14.3-32 32-32l16 0z\"/></svg></div><div><h1 style=\"margin: 0; font-size: 24px; color: white;\">Admin Dashboard</h1><p style=\"margin: 5px 0 0; font-size: 14px; opacity: 0.9;\">Manage your platform with powerful tools and insights.</p></div></div>",
    "merchant": "<div style=\"background-color: #d32f2f; color: white; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;\"><div style=\"height: 80px;\"><svg xmlns=\"http://www.w3.org/2000/svg\" height=\"80px\" width=\"auto\" viewBox=\"0 0 448 512\" preserveAspectRatio=\"xMidYMid meet\"><path fill=\"white\" d=\"M96 128a128 128 0 1 0 256 0A128 128 0 1 0 96 128zm94.5 200.2l18.6 31L175.8 483.1l-36-146.9c-2-8.1-9.8-13.4-17.9-11.3C51.9 342.4 0 405.8 0 481.3c0 17 13.8 30.7 30.7 30.7l131.7 0c0 0 0 0 .1 0l5.5 0 112 0 5.5 0c0 0 0 0 .1 0l131.7 0c17 0 30.7-13.8 30.7-30.7c0-75.5-51.9-138.9-121.9-156.4c-8.1-2-15.9 3.3-17.9 11.3l-36 146.9L238.9 359.2l18.6-31c6.4-10.7-1.3-24.2-13.7-24.2L224 304l-19.7 0c-12.4 0-20.1 13.6-13.7 24.2z\"/></svg></div><div><h1 style=\"margin: 0; font-size: 24px;\">Merchant Dashboard</h1><p style=\"margin: 5px 0 0; font-size: 14px; opacity: 0.9;\">Track sales, manage deals, and grow your business.</p></div></div>",
    "community": "<div style=\"background-color: #388e3c; color: white; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;\"><div style=\"height: 80px;\"><svg xmlns=\"http://www.w3.org/2000/svg\" height=\"80px\" width=\"auto\" viewBox=\"0 0 640 512\" preserveAspectRatio=\"xMidYMid meet\"><path fill=\"white\" d=\"M72 88a56 56 0 1 1 112 0A56 56 0 1 1 72 88zM64 245.7C54 256.9 48 271.8 48 288s6 31.1 16 42.3l0-84.7zm144.4-49.3C178.7 222.7 160 261.2 160 304c0 34.3 12 65.8 32 90.5l0 21.5c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-26.8C26.2 371.2 0 332.7 0 288c0-61.9 50.1-112 112-112l32 0c24 0 46.2 7.5 64.4 20.3zM448 416l0-21.5c20-24.7 32-56.2 32-90.5c0-42.8-18.7-81.3-48.4-107.7C449.8 183.5 472 176 496 176l32 0c61.9 0 112 50.1 112 112c0 44.7-26.2 83.2-64 101.2l0 26.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32zm8-328a56 56 0 1 1 112 0A56 56 0 1 1 456 88zM576 245.7l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM320 32a64 64 0 1 1 0 128 64 64 0 1 1 0-128zM240 304c0 16.2 6 31 16 42.3l0-84.7c-10 11.3-16 26.1-16 42.3zm144-42.3l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM448 304c0 44.7-26.2 83.2-64 101.2l0 42.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-42.8c-37.8-18-64-56.5-64-101.2c0-61.9 50.1-112 112-112l32 0c61.9 0 112 50.1 112 112z\"/></svg></div><div><h1 style=\"margin: 0; font-size: 24px;\">Community Dashboard</h1><p style=\"margin: 5px 0 0; font-size: 14px; opacity: 0.9;\">Connect with members and share valuable resources.</p></div></div>",
    "wixpro": "<div style=\"background-color: #f57c00; color: white; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;\"><div style=\"height: 80px;\"><svg xmlns=\"http://www.w3.org/2000/svg\" height=\"80px\" width=\"auto\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"><path fill=\"white\" d=\"M512 256c0 .9 0 1.8 0 2.7c-.4 36.5-33.6 61.3-70.1 61.3L344 320c-26.5 0-48 21.5-48 48c0 3.4 .4 6.7 1 9.9c2.1 10.2 6.5 20 10.8 29.9c6.1 13.8 12.1 27.5 12.1 42c0 31.8-21.6 60.7-53.4 62c-3.5 .1-7 .2-10.6 .2C114.6 512 0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM128 288a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm0-96a32 32 0 1 0 0-64 32 32 0 1 0 0 64zM288 96a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm96 96a32 32 0 1 0 0-64 32 32 0 1 0 0 64z\"/></svg></div><div><h1 style=\"margin: 0; font-size: 24px;\">Partner Dashboard</h1><p style=\"margin: 5px 0 0; font-size: 14px; opacity: 0.9;\">Collaborate and create with our partner tools.</p></div></div>",
    "login": "<h1>Login</h1>",
    "signup": "<h1>Sign Up</h1>"
}
checksum.md
# Scratch Card Costing (5,000 Units, UK)

For 5,000 plastic credit card-sized scratch cards (85.60mm x 53.98mm), full color on one side, scratch-off panel with unique code on the back:

- **Cost:** £750–£1,500 (£0.15–£0.30 per card)
- **Breakdown:**
  - PVC: £400–£750
  - Printing: £150–£300
  - Scratch-off: £150–£350
  - Codes: £50–£150
  - Setup: £0–£50 (often waived)
- **Most Likely:** £1,000–£1,250 (£0.20–£0.25 per card)
- **Notes:** Bulk discounts apply; VAT may add 20%. Contact UK printers (e.g., ScratchCardPrinting.co.uk) for exact quotes.

# Checksum Code Generator and Validator

This document describes a Python implementation for generating and validating 8-character codes, consisting of 7 random alphanumeric characters plus a checksum character. This can be used to give out psudo-passwords to club members.

## Overview

The solution provides two main functions:
- `generate_code()`: Creates an 8-character code with a checksum
- `validate_code()`: Verifies if a given code's checksum is valid

The character set includes digits (0-9) and uppercase letters (A-Z), providing 36 possible characters per position.

## Implementation

```python
import random
import string

def generate_code():
    # Define the character set: 0-9 and A-Z (36 possible characters)
    charset = string.digits + string.ascii_uppercase
    
    # Generate a random 7-character string
    code = ''.join(random.choice(charset) for _ in range(7))
    
    # Calculate checksum
    total = sum(charset.index(c) for c in code)
    checksum = charset[total % 36]
    
    # Return 8-character code (7 digits + checksum)
    return code + checksum

def validate_code(code):
    # Check if code is exactly 8 characters
    if len(code) != 8:
        return False
    
    # Define the character set
    charset = string.digits + string.ascii_uppercase
    
    # Verify all characters are valid
    if not all(c in charset for c in code):
        return False
    
    # Split into main code and checksum
    main_code = code[:7]
    checksum = code[7]
    
    # Recalculate checksum
    total = sum(charset.index(c) for c in main_code)
    expected_checksum = charset[total % 36]
    
    # Return True if calculated checksum matches provided checksum
    return checksum == expected_checksum
```

## Usage Example

```python
# Generate and test a code
code = generate_code()
print(f"Generated code: {code}")
print(f"Validation result: {validate_code(code)}")

# Test with modified code (should fail)
invalid_code = code[:-1] + '0' if code[-1] != '0' else code[:-1] + '1'
print(f"Modified code: {invalid_code}")
print(f"Validation result: {validate_code(invalid_code)}")
```

## Example Output

```plaintext
Generated code: X7K9P2M5
Validation result: True
Modified code: X7K9P2M0
Validation result: False

Generated code: 4N8B1Q9T
Validation result: True
Modified code: 4N8B1Q90
Validation result: False
```

## Features

- **Character Set**: Uses 36 characters (0-9, A-Z)
- **Code Length**: 8 characters (7 random + 1 checksum)
- **Checksum Algorithm**: Sum of character position values modulo 36
- **Error Detection**: Detects single-character changes
- **Capacity**: 36^7 (~78 billion) possible unique codes

## Validation Checks

The `validate_code()` function verifies:
1. Code is exactly 8 characters long
2. All characters are in the valid charset
3. Checksum matches the calculated value

## Possible Modifications

- Change the character set (e.g., numbers only)
- Adjust code length
- Implement a different checksum algorithm (e.g., weighted sum)
- Add additional validation rules
config.json
{
    "jwt": {
        "SECRET_KEY": "itsananagramjanet"
    },
    "amazon_uk": {
        "ACCESS_KEY": "",
        "SECRET_KEY": "",
        "ASSOCIATE_TAG": "",
        "COUNTRY": ""
    },
    "ebay_uk": {
        "APP_ID": ""
    },
    "awin": {
        "API_TOKEN": ""
    },
    "cj": {
        "API_KEY": "",
        "WEBSITE_ID": ""
    },
    "textmagic": {
        "USERNAME": "simonbarnett1",
        "API_KEY": "Nbi5wHksJdtXSlrHCNk9kt7KXnPyjO"
    },
    "tiny": {
        "API_KEY": "ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp"
    }
}
flask.md
# API Endpoints Documentation

This document outlines the API endpoints for the Flask application, categorized into **Velo Endpoints** (for frontend integration) and **Management Endpoints** (for configuration and user category/product management). Each endpoint includes its HTTP method, parameters, descriptions, and default values where applicable.

---

## Velo Endpoints

These endpoints are designed for integration with the Velo frontend, providing category and discounted product data.

### Get Discounted Products
![GET](https://img.shields.io/badge/GET-blue)

- **Endpoint**: `/<USERid>/discounted-products`
- **Description**: Retrieves a list of discounted products across multiple affiliate networks (Amazon UK, eBay UK, Awin UK, CJ UK, Wix) based on user categories or a specific category ID. Uses Amazon category titles for searches on non-Amazon providers. Includes Wix products from all users if they match the category and discount criteria.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| `category_id`   | Specific Amazon Browse Node ID to search         | None          |
| `min_discount`  | Minimum discount percentage for products (int)   | 20            |

- **Example Request**:
  ```bash
  curl http://localhost:5000/user123/discounted-products?category_id=283155&min_discount=30
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "count": 2,
    "products": [
      {
        "source": "amazon_uk",
        "id": "B08N5WRWNW",
        "title": "Sample Book",
        "product_url": "https://amazon.co.uk/dp/B08N5WRWNW",
        "current_price": 15.99,
        "original_price": 19.99,
        "discount_percent": 20.0,
        "image_url": "https://images.amazon.com/sample.jpg",
        "category": "Books",
        "manufacturer": "Publisher",
        "dimensions": "5 x 8 in",
        "features": ["Hardcover"]
      },
      {
        "source": "user123",
        "id": "wix123",
        "title": "Wix Product",
        "product_url": "https://example.wixsite.com/product/wix123?referer=user123",
        "current_price": 10.00,
        "original_price": 15.00,
        "discount_percent": 33.33,
        "image_url": "https://wix.com/images/wix123.jpg",
        "qty": 5,
        "category": "Books",
        "user_id": "user123"
      }
    ],
    "min_discount": 30
  }
  ```

### Get Categories
![GET](https://img.shields.io/badge/GET-blue)

- **Endpoint**: `/<USERid>/categories`
- **Description**: Fetches either root categories with discounted products or subcategories of a specified parent category, filtered by minimum discount percentage. Checks all providers (Amazon UK, eBay UK, Awin UK, CJ UK, Wix) for available products.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| `parent_id`     | Parent Amazon Browse Node ID for subcategories   | None          |
| `min_discount`  | Minimum discount percentage for products (int)   | 20            |

- **Example Request**:
  ```bash
  curl http://localhost:5000/user123/categories?parent_id=283155
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "count": 2,
    "categories": [
      {"id": "1025616", "name": "Fiction"},
      {"id": "1025612", "name": "Non-Fiction"}
    ],
    "min_discount": 20
  }
  ```

### Get All Products (No User Constraint)
![GET](https://img.shields.io/badge/GET-blue)

- **Endpoint**: `/discounted-products`
- **Description**: Retrieves a list of all products (discounted or not) across all affiliate networks (Amazon UK, eBay UK, Awin UK, CJ UK, Wix) for a specific category ID. Does not filter by user categories or minimum discount percentage.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| `category_id`   | Specific Amazon Browse Node ID to search (required) | None       |

- **Example Request**:
  ```bash
  curl http://localhost:5000/discounted-products?category_id=283155
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "count": 2,
    "products": [
      {
        "source": "amazon_uk",
        "id": "B08N5WRWNW",
        "title": "Sample Book",
        "product_url": "https://amazon.co.uk/dp/B08N5WRWNW",
        "current_price": 15.99,
        "original_price": 19.99,
        "discount_percent": 20.0,
        "image_url": "https://images.amazon.com/sample.jpg",
        "category": "Books",
        "manufacturer": "Publisher",
        "dimensions": "5 x 8 in",
        "features": ["Hardcover"]
      },
      {
        "source": "user123",
        "id": "wix123",
        "title": "Wix Product",
        "product_url": "https://example.wixsite.com/product/wix123?referer=user123",
        "current_price": 10.00,
        "original_price": 15.00,
        "discount_percent": 33.33,
        "image_url": "https://wix.com/images/wix123.jpg",
        "qty": 5,
        "category": "Books",
        "user_id": "user123"
      }
    ]
  }
  ```

---

## Management Endpoints

These endpoints handle configuration and user category/product management, divided into **Config Management**, **User Settings Management**, **User Category Management**, and **User Product Management**.

### Config Management

#### Get Config
![GET](https://img.shields.io/badge/GET-blue)

- **Endpoint**: `/config`
- **Description**: Retrieves the current configuration for all affiliate networks.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| None            | No parameters required                           | N/A           |

- **Example Request**:
  ```bash
  curl http://localhost:5000/config
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "count": 4,
    "config": {
      "amazon_uk": {"ACCESS_KEY": "key", "SECRET_KEY": "secret", "ASSOCIATE_TAG": "tag", "COUNTRY": "UK"},
      "ebay_uk": {"APP_ID": "id"},
      "awin": {"API_TOKEN": "token"},
      "cj": {"API_KEY": "key", "WEBSITE_ID": "id"}
    }
  }
  ```

#### Replace Config
![PATCH](https://img.shields.io/badge/PATCH-yellow)

- **Endpoint**: `/config/<affiliate>`
- **Description**: Replaces the configuration for a specific affiliate network with new values provided in the request body, overwriting existing settings.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| `affiliate`     | Name of the affiliate network (e.g., amazon_uk)  | None          |

- **Example Request**:
  ```bash
  curl -X PATCH -H "Content-Type: application/json" -d '{"APP_ID": "new_id"}' http://localhost:5000/config/ebay_uk
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "message": "Credentials for ebay_uk replaced",
    "credentials": {"APP_ID": "new_id"}
  }
  ```

### User Settings Management

#### Get User Settings
![GET](https://img.shields.io/badge/GET-blue)

- **Endpoint**: `/<USERid>/user`
- **Description**: Retrieves the settings for a specific user, including contact information, website details, and Wix Client ID.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| None            | No parameters required                           | N/A           |

- **Example Request**:
  ```bash
  curl http://localhost:5000/user123/user
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "contact_name": "John Doe",
    "website_url": "https://example.com",
    "email_address": "john@example.com",
    "phone_number": "+1234567890",
    "wixClientId": "wix-client-id-123"
  }
  ```

#### Replace User Settings
![PUT](https://img.shields.io/badge/PUT-orange)

- **Endpoint**: `/<USERid>/user`
- **Description**: Replaces the entire settings object for a user. Requires all fields: `contact_name`, `website_url`, `email_address`, `phone_number`, and `wixClientId`.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| None            | Requires JSON body with settings object          | N/A           |

- **Example Request**:
  ```bash
  curl -X PUT -H "Content-Type: application/json" -d '{"contact_name": "Jane Doe", "website_url": "https://janedoe.com", "email_address": "jane@janedoe.com", "phone_number": "+0987654321", "wixClientId": "wix-client-id-456"}' http://localhost:5000/user123/user
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "message": "Settings for user user123 replaced",
    "settings": {
      "contact_name": "Jane Doe",
      "website_url": "https://janedoe.com",
      "email_address": "jane@janedoe.com",
      "phone_number": "+0987654321",
      "wixClientId": "wix-client-id-456"
    }
  }
  ```

#### Update User Settings
![PATCH](https://img.shields.io/badge/PATCH-yellow)

- **Endpoint**: `/<USERid>/user`
- **Description**: Updates specific fields in the user’s settings, leaving unspecified fields unchanged. Valid fields are `contact_name`, `website_url`, `email_address`, `phone_number`, and `wixClientId`.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| None            | Requires JSON body with partial settings object  | N/A           |

- **Example Request**:
  ```bash
  curl -X PATCH -H "Content-Type: application/json" -d '{"email_address": "jane.new@janedoe.com", "wixClientId": "wix-client-id-789"}' http://localhost:5000/user123/user
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "message": "Settings for user user123 updated",
    "settings": {
      "contact_name": "Jane Doe",
      "website_url": "https://janedoe.com",
      "email_address": "jane.new@janedoe.com",
      "phone_number": "+0987654321",
      "wixClientId": "wix-client-id-789"
    }
  }
  ```

### User Category Management

#### Get User Categories
![GET](https://img.shields.io/badge/GET-blue)

- **Endpoint**: `/<USERid>/mycategories`
- **Description**: Retrieves the list of categories associated with a specific user.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| None            | No parameters required                           | N/A           |

- **Example Request**:
  ```bash
  curl http://localhost:5000/user123/mycategories
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "count": 2,
    "categories": ["283155", "172282"]
  }
  ```

#### Replace User Categories
![PUT](https://img.shields.io/badge/PUT-orange)

- **Endpoint**: `/<USERid>/mycategories`
- **Description**: Replaces the list of categories for a user.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| None            | Requires JSON body with "categories" list        | N/A           |

- **Example Request**:
  ```bash
  curl -X PUT -H "Content-Type: application/json" -d '{"categories": ["172282"]}' http://localhost:5000/user123/mycategories
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "message": "Categories for user user123 replaced",
    "categories": ["172282"]
  }
  ```

#### Patch User Categories
![PATCH](https://img.shields.io/badge/PATCH-yellow)

- **Endpoint**: `/<USERid>/mycategories`
- **Description**: Adds new categories to a user’s existing list, avoiding duplicates.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| None            | Requires JSON body with "categories" list        | N/A           |

- **Example Request**:
  ```bash
  curl -X PATCH -H "Content-Type: application/json" -d '{"categories": ["165796011"]}' http://localhost:5000/user123/mycategories
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "message": "Categories for user user123 patched",
    "categories": ["283155", "172282", "165796011"]
  }
  ```

#### Delete User Category
![DELETE](https://img.shields.io/badge/DELETE-red)

- **Endpoint**: `/<USERid>/mycategories`
- **Description**: Removes a specific category from a user’s list.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| `category_id`   | Category ID to remove                            | None          |

- **Example Request**:
  ```bash
  curl -X DELETE http://localhost:5000/user123/mycategories?category_id=283155
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "message": "Category 283155 removed for user user123",
    "categories": ["172282"]
  }
  ```

#### Get All Categories
![GET](https://img.shields.io/badge/GET-blue)

- **Endpoint**: `/categories`
- **Description**: Retrieves all available categories, either top-level or subcategories of a specified parent, using Amazon API if configured, otherwise pseudo data.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| `parent_id`     | Parent category ID to fetch subcategories        | None          |

- **Example Request**:
  ```bash
  curl http://localhost:5000/categories?parent_id=283155
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "count": 2,
    "categories": [
      {"id": "1025616", "name": "Fiction"},
      {"id": "1025612", "name": "Non-Fiction"}
    ]
  }
  ```

### User Product Management

User-defined products are fetched from Wix using the `wixClientId` stored in user settings.

#### Get User Products
![GET](https://img.shields.io/badge/GET-blue)

- **Endpoint**: `/<USERid>/products`
- **Description**: Retrieves the list of products for a specific user from their Wix store, including category and quantity information.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| None            | No parameters required                           | N/A           |

- **Example Request**:
  ```bash
  curl http://localhost:5000/user123/products
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "count": 1,
    "products": [
      {
        "source": "user123",
        "id": "wix123",
        "title": "Wix Product",
        "product_url": "https://example.wixsite.com/product/wix123?referer=user123",
        "current_price": 10.00,
        "original_price": 15.00,
        "discount_percent": 33.33,
        "image_url": "https://wix.com/images/wix123.jpg",
        "qty": 5,
        "category": "Books",
        "user_id": "user123"
      }
    ]
  }
  ```

#### Reduce Product Quantity
![GET](https://img.shields.io/badge/GET-blue)

- **Endpoint**: `/<USERid>/products/<product_id>`
- **Description**: Reduces the `qty` value of a specific Wix product by the amount specified in the `qty` query parameter. The `qty` must be a negative integer. The quantity will not go below zero. Note: This does not update the Wix store directly but modifies the local cache.

| Parameter       | Description                                      | Default Value |
|-----------------|--------------------------------------------------|---------------|
| `product_id`    | Product ID to update (path)                      | None          |
| `qty`           | Negative integer to reduce the quantity by (query)| None         |

- **Example Request**:
  ```bash
  curl "http://localhost:5000/user123/products/wix123?qty=-2"
  ```

- **Example Response**:
  ```json
  {
    "status": "success",
    "message": "Quantity reduced for product wix123",
    "product": {
      "source": "user123",
      "id": "wix123",
      "title": "Wix Product",
      "product_url": "https://example.wixsite.com/product/wix123?referer=user123",
      "current_price": 10.00,
      "original_price": 15.00,
      "discount_percent": 33.33,
      "image_url": "https://wix.com/images/wix123.jpg",
      "qty": 3,
      "category": "Books",
      "user_id": "user123"
    }
  }
  ```

- **Notes**:
  - The `qty` parameter must be a negative integer. Positive values or zero will result in a **400 Bad Request** error.
  - If the reduction would cause `qty` to go below zero, it will be set to zero.
  - This endpoint uses GET for modification, which is unconventional but implemented as per specific requirements.
  - Returns a **400 Bad Request** if `qty` is missing, not an integer, or not negative.
  - Returns a **404 Not Found** if the user or product does not exist.

---

## Key Updates

- **Wix Integration**: Products are sourced from Wix using the `wixClientId` from user settings. The `/<USERid>/products` endpoint fetches from Wix instead of a local store.
- **New Endpoint**: `/discounted-products` (no USERid) retrieves all products for a given category ID across all providers without discount filtering.
- **Discounted Products**: The `/<USERid>/discounted-products` endpoint includes Wix products from all users matching the category and discount criteria.
- **User Settings**: Added `wixClientId` as a required field for user settings to enable Wix API integration.
- **Product Fields**: Wix products include `source` (set to `user_id`), `qty` (instead of `QTY`), and `product_url` with `?referer={user_id}` suffix. Non-Wix products exclude `savings` field, with discount calculated from `original_price` and `current_price`.

Replace `<USERid>` with the actual user ID when making requests.
has.py
import bcrypt
import json

# Load existing users_settings.json
with open('M:/python/Madeira/users_settings.json', 'r') as f:
    users_settings = json.load(f)

# Function to hash a plain password
def hash_password(plain_password):
    return bcrypt.hashpw(plain_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

# Update each user's password
for user_id, settings in users_settings.items():
    plain_password = settings.get("password")
    if plain_password and not plain_password.startswith('$2b$'):  # Check if it's not already a bcrypt hash
        hashed_password = hash_password(plain_password)
        settings["password"] = hashed_password
        print(f"Updated {user_id}: {hashed_password}")

# Save back to users_settings.json
with open('M:/python/Madeira/users_settings.json', 'w') as f:
    json.dump(users_settings, f, indent=4)

print("Passwords updated successfully.")
madeira.py
from flask import Flask, render_template
from flask_cors import CORS
from blueprints.authentication import authentication_bp
from blueprints.site_request import site_request_bp
from blueprints.user_management import user_management_bp
from blueprints.user_settings import user_settings_bp
from blueprints.utility import utility_bp
from blueprints.role_pages import role_pages_bp
from blueprints.data_retrieval import data_retrieval_bp
from blueprints.configuration import configuration_bp
from utils.auth import login_required 
import json
import os

app = Flask(__name__, template_folder='templates')  # Explicitly set template folder
CORS(app)

CONFIG_FILE = "config.json"
def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r') as f:
            return json.load(f)
    return {"jwt": {"SECRET_KEY": "your-secret-key"}}

config = load_config()
app.config['JWT_SECRET_KEY'] = config['jwt']['SECRET_KEY']

# Register blueprints
app.register_blueprint(authentication_bp, url_prefix='')  # Ensure no prefix conflicts
app.register_blueprint(site_request_bp, url_prefix='')
app.register_blueprint(user_management_bp, url_prefix='')
app.register_blueprint(user_settings_bp, url_prefix='')
app.register_blueprint(utility_bp, url_prefix='')
app.register_blueprint(role_pages_bp, url_prefix='')
app.register_blueprint(data_retrieval_bp, url_prefix='')
app.register_blueprint(configuration_bp, url_prefix='')

@app.route('/')
def home():
    return render_template('login.html')

@app.route('/admin')
@login_required(["admin"], require_all=True)
def admin():
    return render_template('admin.html', user_type='admin')  # Pass user_type to template

@app.route('/merchant')
@login_required(["merchant"], require_all=True)
def merchant():
    return render_template('merchant.html')

@app.route('/community')
@login_required(["community"], require_all=True)
def community():
    return render_template('community.html')

@app.route('/wixpro')
@login_required(["wixpro"], require_all=True)
def wixpro():
    return render_template('wixpro.html')

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
pseudo_categories.py
# pseudo_categories.py

PSEUDO_CATEGORIES = [
    {
        "id": "1000",
        "name": "Electronics",
        "subcategories": [
            {
                "id": "1001",
                "name": "Phones",
                "subcategories": [
                    {"id": "1002", "name": "Smartphones"},
                    {"id": "1003", "name": "Accessories"}
                ]
            },
            {
                "id": "1004",
                "name": "Computers",
                "subcategories": [
                    {"id": "1005", "name": "Laptops"},
                    {"id": "1006", "name": "Desktops"},
                    {"id": "1007", "name": "Tablets"}
                ]
            },
            {
                "id": "1008",
                "name": "TV & Home Theater",
                "subcategories": [
                    {"id": "1009", "name": "LED TVs"},
                    {"id": "1010", "name": "Home Audio"}
                ]
            }
        ]
    },
    {
        "id": "2000",
        "name": "Books",
        "subcategories": [
            {
                "id": "2001",
                "name": "Fiction",
                "subcategories": [
                    {"id": "2002", "name": "Fantasy"},
                    {"id": "2003", "name": "Mystery"},
                    {"id": "2004", "name": "Romance"}
                ]
            },
            {
                "id": "2005",
                "name": "Non-Fiction",
                "subcategories": [
                    {"id": "2006", "name": "Biography"},
                    {"id": "2007", "name": "History"},
                    {"id": "2008", "name": "Self-Help"}
                ]
            },
            {
                "id": "2009",
                "name": "Children's Books",
                "subcategories": [
                    {"id": "2010", "name": "Picture Books"},
                    {"id": "2011", "name": "Young Adult"}
                ]
            }
        ]
    },
    {
        "id": "3000",
        "name": "Home & Kitchen",
        "subcategories": [
            {
                "id": "3001",
                "name": "Kitchen & Dining",
                "subcategories": [
                    {"id": "3002", "name": "Cookware"},
                    {"id": "3003", "name": "Cutlery"}
                ]
            },
            {
                "id": "3004",
                "name": "Furniture",
                "subcategories": [
                    {"id": "3005", "name": "Living Room"},
                    {"id": "3006", "name": "Bedroom"}
                ]
            },
            {
                "id": "3007",
                "name": "Bedding",
                "subcategories": [
                    {"id": "3008", "name": "Sheets"},
                    {"id": "3009", "name": "Comforters"}
                ]
            }
        ]
    },
    {
        "id": "4000",
        "name": "Clothing, Shoes & Jewelry",
        "subcategories": [
            {
                "id": "4001",
                "name": "Men",
                "subcategories": [
                    {"id": "4002", "name": "Shirts"},
                    {"id": "4003", "name": "Shoes"}
                ]
            },
            {
                "id": "4004",
                "name": "Women",
                "subcategories": [
                    {"id": "4005", "name": "Dresses"},
                    {"id": "4006", "name": "Handbags"}
                ]
            },
            {
                "id": "4007",
                "name": "Kids",
                "subcategories": [
                    {"id": "4008", "name": "Boys"},
                    {"id": "4009", "name": "Girls"}
                ]
            }
        ]
    },
    {
        "id": "5000",
        "name": "Beauty & Personal Care",
        "subcategories": [
            {
                "id": "5001",
                "name": "Makeup",
                "subcategories": [
                    {"id": "5002", "name": "Foundation"},
                    {"id": "5003", "name": "Lipstick"}
                ]
            },
            {
                "id": "5004",
                "name": "Skin Care",
                "subcategories": [
                    {"id": "5005", "name": "Moisturizers"},
                    {"id": "5006", "name": "Cleansers"}
                ]
            }
        ]
    },
    {
        "id": "6000",
        "name": "Toys & Games",
        "subcategories": [
            {
                "id": "6001",
                "name": "Building Sets",
                "subcategories": [
                    {"id": "6002", "name": "LEGO Sets"},
                    {"id": "6003", "name": "Model Kits"}
                ]
            },
            {
                "id": "6004",
                "name": "Board Games",
                "subcategories": [
                    {"id": "6005", "name": "Strategy Games"},
                    {"id": "6006", "name": "Family Games"}
                ]
            }
        ]
    },
    {
        "id": "7000",
        "name": "Sports & Outdoors",
        "subcategories": [
            {
                "id": "7001",
                "name": "Exercise & Fitness",
                "subcategories": [
                    {"id": "7002", "name": "Yoga Mats"},
                    {"id": "7003", "name": "Dumbbells"}
                ]
            },
            {
                "id": "7004",
                "name": "Camping & Hiking",
                "subcategories": [
                    {"id": "7005", "name": "Tents"},
                    {"id": "7006", "name": "Sleeping Bags"}
                ]
            }
        ]
    },
    {
        "id": "8000",
        "name": "Automotive",
        "subcategories": [
            {
                "id": "8001",
                "name": "Car Parts",
                "subcategories": [
                    {"id": "8002", "name": "Brake Pads"},
                    {"id": "8003", "name": "Oil Filters"}
                ]
            },
            {
                "id": "8004",
                "name": "Accessories",
                "subcategories": [
                    {"id": "8005", "name": "Car Covers"},
                    {"id": "8006", "name": "Floor Mats"}
                ]
            }
        ]
    },
    {
        "id": "9000",
        "name": "Health & Household",
        "subcategories": [
            {
                "id": "9001",
                "name": "Vitamins & Supplements",
                "subcategories": [
                    {"id": "9002", "name": "Multivitamins"},
                    {"id": "9003", "name": "Protein Powders"}
                ]
            },
            {
                "id": "9004",
                "name": "Household Supplies",
                "subcategories": [
                    {"id": "9005", "name": "Cleaners"},
                    {"id": "9006", "name": "Paper Products"}
                ]
            }
        ]
    },
    # Add more main categories as needed...
    {
        "id": "10000",
        "name": "Pet Supplies",
        "subcategories": [
            {
                "id": "10001",
                "name": "Dog Supplies",
                "subcategories": [
                    {"id": "10002", "name": "Food"},
                    {"id": "10003", "name": "Toys"}
                ]
            },
            {
                "id": "10004",
                "name": "Cat Supplies",
                "subcategories": [
                    {"id": "10005", "name": "Litter"},
                    {"id": "10006", "name": "Beds"}
                ]
            }
        ]
    }
]
README.md
# Amazon Discount Finder with Flask and Wix Velo

Welcome to the Amazon Discount Finder project! This system allows users to browse discounted products from Amazon based on customizable categories, powered by a Flask backend and a Wix frontend with Velo. Named after the Madeira River, a major tributary of the Amazon, this project reflects its role as a conduit for delivering Amazon product data to users.

## Project Overview

This project integrates a Flask backend with a Wix frontend to display and manage discounted products from Amazon. The Flask API uses Amazon's Product Advertising API (PAAPI) to fetch product data based on user-defined categories. The Wix site, enhanced with Velo, provides a dynamic interface to browse categories and view discounted products.

## Features

- Fetching discounted products from Amazon with a minimum discount percentage.
- Managing user-specific categories via Flask API endpoints (GET, PUT, PATCH, DELETE).
- Dynamic frontend on Wix using Velo to display categories and products fetched from the Flask API.
- Optional minimum discount input on the Wix site to filter products.
- User-defined product gateway for managing custom parts and stock updates.

## Documentation

- **[Amazon Affiliation](affiliate.md)**: Becoming an affiliate and joining the Amazon Associates program.
- **[Velo Setup Instructions](velo.md)**: Step-by-step guide to setting up the Wix site with Velo.
- **[Velo Code](velo.js)**: Code Wix site with Velo.
- **[Flask API Documentation](flask.md)**: Detailed information on API endpoints, parameters, and responses.
- **[Flask Code](madeira.py)**: Flask service.
- **[Madeira Scratch Card Authentication](checksum.md)**: Describes the cost of a scratch card authentication model for Madeira.

## Setup Instructions

### Flask Backend Setup

1. **Install Dependencies**:
   - Ensure you have Python installed.
   - Install required packages using pip:
     ```bash
     pip install flask flask-cors amazon-paapi requests
     ```

2. **Set Up Amazon PAAPI Credentials**:
   - Open `madeira.py` in your code editor.
   - Replace the placeholders with your actual Amazon PAAPI credentials and other affiliate network credentials:
     ```python
     "amazon_uk": {
         "ACCESS_KEY": "YOUR_ACCESS_KEY",
         "SECRET_KEY": "YOUR_SECRET_KEY",
         "ASSOCIATE_TAG": "YOUR_ASSOCIATE_TAG",
         "COUNTRY": "UK"
     },
     "ebay_uk": {
         "APP_ID": "YOUR_EBAY_APP_ID"
     },
     "awin": {
         "API_TOKEN": "YOUR_AWIN_API_TOKEN"
     },
     "cj": {
         "API_KEY": "YOUR_CJ_API_KEY",
         "WEBSITE_ID": "YOUR_CJ_WEBSITE_ID"
     }
     ```

3. **Run the Flask App**:
   - Save the Flask code as `madeira.py\`.
   - Start the app from the terminal:
     ```bash
     python madeira.py
     ```
   - The API will be available at `http://192.168.1.17:5000`.

### Wix Frontend with Velo Setup

1. **Enable Velo**:
   - Log in to your Wix account and open the Wix Editor for your site.
   - Click the **Dev Mode** icon in the toolbar and turn on **Dev Mode**.

2. **Create a Dynamic Page**:
   - Add a new dynamic page named "Category" with the URL pattern `/category/{categoryId}`.

3. **Add Page Elements**:
   - Add repeaters to display subcategories and products.
   - Optionally, add an input field for setting the minimum discount percentage.

4. **Add Velo Script**:
   - In the Velo sidebar, open the `category.js` file.
   - Paste the provided Velo script into this file.
   - Update the `baseUrl` variable in the script to point to your Flask API (e.g., `http://192.168.1.17:5000` or your ngrok URL).

## User Part Gateway and Stock Updates

![NEW](https://img.shields.io/badge/NEW-green)

The User Part Gateway introduces a powerful feature for users to manage their own custom products (referred to as "parts") alongside the affiliate-sourced discounted products. This system allows users to define and maintain a personal inventory of products, which can be shared across a community via the `/club-products` endpoint, and includes a callback mechanism to update stock levels when sales occur.

- **Managing User Parts**:
  - Users can add, update, or delete custom products via the `/<USERid>/products` endpoints (POST, PUT, PATCH, DELETE).
  - Each product requires fields like `id`, `title`, `product_url`, `current_price`, `original_price`, `image_url`, and `QTY` (quantity).
  - These products are stored in a user-specific list and can be retrieved with the GET `/<USERid>/products` endpoint.

- **Club Products**:
  - The `/club-products` endpoint aggregates all user-defined products with a `QTY > 0` across all users, enabling a community-driven marketplace.

- **Stock Update Callback**:
  - When a sale occurs on a user’s website, the stock quantity (`QTY`) can be updated via the `GET /<USERid>/products/<product_id>` endpoint.
  - Example: After selling one unit of a product with ID `custom123`, a request like `GET /<USERid>/products/custom123?qty=-4` reduces the quantity by 4.
  - This ensures real-time stock management, reflecting availability accurately in the Wix frontend.

This feature enhances the project by allowing users to contribute their own products to the ecosystem, complementing the Amazon discount finder with a personalized inventory system.
referal.htm
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Referral Endpoint Test</title>
    <!-- Toastr CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Basic Styling -->
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            color: #333;
        }
        .form-section {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, button {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
        .form-section h2 {
            color: #555;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Referral Endpoint Test</h1>

        <!-- Page Visit Referral Form -->
        <div class="form-section">
            <h2>Page Visit Referral</h2>
            <form id="pageVisitForm">
                <label for="pageReferer">Referer:</label>
                <input type="text" id="pageReferer" name="referer" value="test_user" placeholder="Enter referer">

                <label for="page">Page:</label>
                <input type="text" id="page" name="page" value="/home" placeholder="Enter page URL">

                <label for="pageTimestamp">Timestamp:</label>
                <input type="text" id="pageTimestamp" name="timestamp" placeholder="YYYY-MM-DD HH:MM:SS" value="2025-03-21 10:00:00">

                <button type="submit">Submit Page Visit</button>
            </form>
        </div>

        <!-- Order Referral Form -->
        <div class="form-section">
            <h2>Order Referral</h2>
            <form id="orderForm">
                <label for="orderReferer">Referer:</label>
                <input type="text" id="orderReferer" name="referer" value="test_user" placeholder="Enter referer">

                <label for="orderId">Order ID:</label>
                <input type="text" id="orderId" name="orderId" value="ORD12345" placeholder="Enter order ID">

                <label for="buyer">Buyer Name:</label>
                <input type="text" id="buyer" name="buyer" value="John Doe" placeholder="Enter buyer name">

                <label for="total">Total Amount:</label>
                <input type="number" id="total" name="total" value="99.99" step="0.01" placeholder="Enter total amount">

                <label for="orderTimestamp">Timestamp:</label>
                <input type="text" id="orderTimestamp" name="timestamp" placeholder="YYYY-MM-DD HH:MM:SS" value="2025-03-21 10:00:00">

                <button type="submit">Submit Order</button>
            </form>
        </div>
    </div>

    <!-- jQuery (required for Toastr) -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Toastr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        // Configure Toastr options
        toastr.options = {
            closeButton: true,
            progressBar: true,
            positionClass: "toast-top-right",
            timeOut: "5000",
        };

        // Function to handle form submission
        function submitReferral(formId, successMessage) {
            const form = document.getElementById(formId);
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(form);
                const jsonData = Object.fromEntries(formData.entries());

                fetch('http://192.168.1.17:5000/referal', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(jsonData),
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => { throw err; });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.status === 'success') {
                        toastr.success(`${successMessage} - Referer: ${data.referer}`, 'Success');
                    } else {
                        toastr.error(data.message || 'Unknown error', 'Error');
                    }
                })
                .catch(error => {
                    toastr.error(error.message || 'Failed to connect to server', 'Error');
                    console.error('Error:', error);
                });
            });
        }

        // Initialize form handlers
        submitReferral('pageVisitForm', 'Page visit recorded successfully');
        submitReferral('orderForm', 'Order recorded successfully');
    </script>
</body>
</html>
sms.py
import requests

def send_sms_textmagic(to_number, message):
    try:
        # Your TextMagic credentials
        username = "simonbarnett1"
        api_key = "Nbi5wHksJdtXSlrHCNk9kt7KXnPyjO"
        url = "https://rest.textmagic.com/api/v2/messages"
        
        # Payload with the phone number and message
        payload = {
            "text": message,
            "phones": to_number
        }
        
        # Headers with X-TM-Username and X-TM-Key
        headers = {
            "X-TM-Username": username,
            "X-TM-Key": api_key
        }
        
        # Send the request
        response = requests.post(url, data=payload, headers=headers)
        
        if response.status_code == 201:
            print("Message sent successfully!")
            print(f"Response: {response.json()}")
            return True
        else:
            print(f"Error: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"Error sending SMS: {str(e)}")
        return False

# Test the function
if __name__ == "__main__":
    recipient_number = "+447989389179"
    message_text = "Hello World!"
    send_sms_textmagic(recipient_number, message_text)
test.py
from flask import Flask, request, jsonify
import whois  # Requires 'pip install python-whois'
from auth import require_permissions  # Placeholder import for your custom decorator

app = Flask(__name__)

@app.route('/check-domain', methods=['GET'])
@require_permissions(["allauth"], require_all=False)  # Custom decorator applied
def check_domain():
    # Get domain from query parameter
    domain = request.args.get('domain')
    
    # Basic validation (matches client-side regex: /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/)
    if not domain:
        return jsonify({"error": "Please provide a domain name"}), 400
    
    if not all(c.isalnum() or c in '-.' for c in domain) or \
       not '.' in domain or \
       len(domain.split('.')[-1]) < 2:
        return jsonify({"error": "Invalid domain name (e.g., mystore.uk)"}), 400
    
    # Query WHOIS data using python-whois
    try:
        w = whois.whois(domain)
        # If no registration data exists (e.g., creation_date is None), domain is available
        is_available = w.creation_date is None
        return jsonify({
            "domain": domain,
            "available": is_available
        }), 200
    except Exception as e:
        # Handle WHOIS query failures (e.g., timeouts, invalid TLDs)
        return jsonify({"error": f"Failed to check domain availability: {str(e)}"}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
test2.py

        // Global variables defined once
        if (typeof window.apiUrl === 'undefined') window.apiUrl = 'https://clubmadeira.io';
        if (typeof window.userPermissions === 'undefined') window.userPermissions = [];

        (function() { // Self-executing function to isolate scope
            console.log('Admin inline script running'); // Debug log to confirm script execution

            function decodeJWT(token) {
                if (!token || typeof token !== 'string') return null;
                if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) return null;
                const parts = token.split('.');
                try {
                    const base64Url = parts[1];
                    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                    return JSON.parse(jsonPayload);
                } catch (error) {
                    console.error('Error decoding JWT:', error.message);
                    return null;
                }
            }

            function initializeAdmin() {
                console.log('Initializing admin page'); // Debug log
                const token = localStorage.getItem('authToken');
                if (!token) {
                    window.location.href = '/';
                    return;
                }
                const decoded = decodeJWT(token);
                if (!decoded) {
                    window.location.href = '/';
                    return;
                }
                window.userPermissions = decoded.permissions || [];
                if (!window.userPermissions.includes('admin')) {
                    toastr.error('Permission denied: Admin permission required');
                    window.location.href = '/';
                    return;
                }
                loadBranding();
                attachEventListeners();
            }

            // Define window.initPage for dynamic initialization
            window.initPage = function() {
                initializeAdmin();
            };

            toastr.options = { closeButton: true, progressBar: true, positionClass: 'toast-top-right', timeOut: 5000, showMethod: 'slideDown', hideMethod: 'slideUp' };

            async function fetchProtectedPage(url) {
                const token = localStorage.getItem('authToken');
                if (!token) {
                    toastr.error('No authentication token found. Please log in.');
                    window.location.href = '/';
                    return;
                }
                try {
                    console.log('Requested URL:', url); // Debug: Log requested URL
                    const timestamp = Date.now();
                    const fetchUrl = `${window.apiUrl}${url}?t=${timestamp}`; // Prevent caching
                    console.log('Fetching from:', fetchUrl); // Debug: Log fetch URL with timestamp
                    const response = await fetch(fetchUrl, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': 'text/html'
                        }
                    });
                    console.log('Response status:', response.status); // Debug: Log response status
                    console.log('Fetched URL:', response.url); // Debug: Log final URL after redirects
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Server returned ${response.status}: ${errorText}`);
                    }
                    const html = await response.text();
                    console.log('Fetched HTML for', url, ':', html); // Debug: Log fetched HTML
                    document.body.innerHTML = html;
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const scripts = doc.querySelectorAll('script:not([src])');
                    scripts.forEach((script, index) => {
                        if (script.innerHTML.trim()) {
                            console.log(`Executing inline script ${index + 1}`); // Debug: Before script execution
                            try {
                                new Function(script.innerHTML)();
                                console.log(`Inline script ${index + 1} executed successfully`); // Debug: After successful execution
                            } catch (e) {
                                console.error(`Error executing inline script ${index + 1}:`, e); // Debug: Log execution errors
                            }
                        }
                    });
                    if (typeof window.initPage === 'function') {
                        console.log('Calling window.initPage'); // Debug: Before calling initPage
                        window.initPage();
                    } else {
                        console.warn('No initPage function found for this page'); // Debug: Warn if initPage is missing
                    }
                } catch (error) {
                    console.error('Error fetching protected page:', error);
                    toastr.error(error.message || 'Failed to load protected page');
                    setTimeout(() => window.location.href = '/', 3000);
                }
            }

            function handleSectionClick(event) {
                const section = this.getAttribute('data-section');
                const submenu = this.getAttribute('data-submenu');
                if (submenu) toggleSubmenu(submenu);
                if (section) showSection(section);
            }

            function handleHrefClick() {
                const href = this.getAttribute('data-href');
                fetchProtectedPage(href);
            }

            function handleAffiliateClick() {
                const affiliate = this.getAttribute('data-affiliate');
                updateAffiliate(affiliate);
            }

            function attachEventListeners() {
                const sectionButtons = document.querySelectorAll('.menu button[data-section]');
                sectionButtons.forEach(button => {
                    button.removeEventListener('click', handleSectionClick);
                    button.addEventListener('click', handleSectionClick);
                });

                const hrefButtons = document.querySelectorAll('.menu button[data-href]');
                hrefButtons.forEach(button => {
                    button.removeEventListener('click', handleHrefClick);
                    button.addEventListener('click', handleHrefClick);
                });

                const affiliateButtons = document.querySelectorAll('.form button[data-affiliate]');
                affiliateButtons.forEach(button => {
                    button.removeEventListener('click', handleAffiliateClick);
                    button.addEventListener('click', handleAffiliateClick);
                });

                const logOffBtn = document.getElementById('logOffBtn');
                if (logOffBtn) {
                    logOffBtn.removeEventListener('click', logOff);
                    logOffBtn.addEventListener('click', logOff);
                }

                submitReferral('pageVisitForm', 'Page visit recorded successfully');
                submitReferral('orderForm', 'Order recorded successfully');
            }

            async function loadBranding() {
                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/branding`);
                    if (!response.ok) throw new Error(`Failed to fetch branding: ${response.status}`);
                    const data = await response.json();
                    document.getElementById('brandingContent').innerHTML = data.content || '<h1>Admin Dashboard</h1>';
                } catch (error) {
                    toastr.error(`Error loading branding: ${error.message}`);
                    document.getElementById('brandingContent').innerHTML = '<h1>Admin Dashboard</h1>';
                }
            }

            function getCurrentTimestamp() {
                const now = new Date();
                return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')}`;
            }

            async function authenticatedFetch(url, options = {}) {
                const token = localStorage.getItem('authToken');
                options.headers = {
                    ...options.headers,
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                };
                const response = await fetch(url, options);
                if (response.status === 401) {
                    toastr.error('Session expired. Please log in again.');
                    localStorage.removeItem('authToken');
                    window.location.href = '/';
                }
                return response;
            }

            function toggleSubmenu(submenuId) {
                const submenu = document.getElementById(submenuId);
                if (submenu) {
                    submenu.classList.toggle('open');
                }
            }

            function showSection(section) {
                document.querySelectorAll('.section').forEach(s => {
                    s.classList.remove('active');
                    s.style.display = 'none';
                });
                const activeSection = document.getElementById(section);
                if (activeSection) {
                    activeSection.classList.add('active');
                    activeSection.style.display = 'block';
                    loadSection(section);
                }
            }

            async function loadSection(section) {
                if (section === 'welcome' || section === 'page_visit_test' || section === 'order_test' || 
                    section === 'affiliateProgramsIntro' || section === 'userManagementIntro' || 
                    section === 'testScriptsIntro' || section === 'referralTestsIntro') {
                    if (section === 'page_visit_test' || section === 'order_test') {
                        document.getElementById(section === 'page_visit_test' ? 'pageTimestamp' : 'orderTimestamp').value = getCurrentTimestamp();
                        await populateRefererDropdown(section === 'page_visit_test' ? 'pageReferer' : 'orderReferer');
                    }
                    return;
                }

                if (section === 'deal_listings') {
                    await loadCategories();
                    return;
                }

                if (section === 'merchants') {
                    await loadMerchants();
                    return;
                }

                if (section === 'communities') {
                    await loadCommunities();
                    return;
                }

                if (section === 'partners') {
                    await loadPartners();
                    return;
                }

                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/config`);
                    if (!response.ok) throw new Error(`Failed to fetch /config: ${response.status}`);
                    const data = await response.json();
                    const config = data.config[section] || {};

                    if (section === 'amazon_uk') {
                        document.getElementById('amazonAccessKey').value = config.ACCESS_KEY || '';
                        document.getElementById('amazonSecretKey').value = config.SECRET_KEY || '';
                        document.getElementById('amazonAssociateTag').value = config.ASSOCIATE_TAG || '';
                        document.getElementById('amazonCountry').value = config.COUNTRY || '';
                    } else if (section === 'ebay_uk') {
                        document.getElementById('ebayAppId').value = config.APP_ID || '';
                    } else if (section === 'awin') {
                        document.getElementById('awinApiToken').value = config.API_TOKEN || '';
                    } else if (section === 'cj') {
                        document.getElementById('cjApiKey').value = config.API_KEY || '';
                        document.getElementById('cjWebsiteId').value = config.WEBSITE_ID || '';
                    } else if (section === 'textmagic') {
                        document.getElementById('textmagicUsername').value = config.USERNAME || '';
                        document.getElementById('textmagicApiKey').value = config.API_KEY || '';
                    } else if (section === 'tiny') {
                        document.getElementById('tinyApiKey').value = config.API_KEY || '';
                    }
                    toastr.success(`Loaded credentials for ${section}`);
                } catch (error) {
                    toastr.error(`Error loading credentials: ${error.message}`);
                }
            }

            async function populateRefererDropdown(selectId) {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const communityUsers = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('community') && !permissions.includes('admin')) {
                            communityUsers.push({ USERid: user.USERid, contact_name: user.contact_name });
                        }
                    }

                    const select = document.getElementById(selectId);
                    select.innerHTML = '';
                    communityUsers.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.USERid;
                        option.text = user.contact_name;
                        select.appendChild(option);
                    });
                    if (communityUsers.length === 0) {
                        select.innerHTML = '<option value="">No community users found</option>';
                    }
                } catch (error) {
                    toastr.error(`Error loading referer options: ${error.message}`);
                    document.getElementById(selectId).innerHTML = '<option value="">Error loading users</option>';
                }
            }

            async function loadMerchants() {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const merchants = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('merchant') && !permissions.includes('admin')) {
                            merchants.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
                        }
                    }

                    updateUserTable('merchantsList', merchants, 'merchants');
                    toastr.success('Merchants loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading merchants: ${error.message}`);
                }
            }

            async function loadCommunities() {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const communities = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('community') && !permissions.includes('admin')) {
                            communities.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
                        }
                    }

                    updateUserTable('communitiesList', communities, 'communities');
                    toastr.success('Communities loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading communities: ${error.message}`);
                }
            }

            async function loadPartners() {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const partners = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('wixpro')) {
                            partners.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
                        }
                    }

                    updateUserTable('partnersList', partners, 'partners');
                    toastr.success('Partners loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading partners: ${error.message}`);
                }
            }

            function updateUserTable(tableId, users, section) {
                const tbody = document.getElementById(tableId);
                tbody.innerHTML = '';
                if (users.length === 0) {
                    const colspan = section === 'communities' ? 3 : 4;
                    tbody.innerHTML = `<tr><td colspan="${colspan}">No users found</td></tr>`;
                    return;
                }
                users.forEach(user => {
                    const row = document.createElement('tr');
                    let actionsHtml = '';
                    if (section !== 'communities') {
                        const hasValidated = user.permissions.includes('validated');
                        actionsHtml = `
                            <input type="checkbox" ${hasValidated ? 'checked' : ''} 
                                onchange="togglePermission('${user.USERid}', 'validated', '${section}', this.checked)">
                            Validated
                        `;
                        if (section === 'partners') {
                            const hasAdmin = user.permissions.includes('admin');
                            const hasMerchant = user.permissions.includes('merchant');
                            actionsHtml = `
                                <input type="checkbox" ${hasAdmin ? 'checked' : ''} 
                                    onchange="togglePermission('${user.USERid}', 'admin', '${section}', this.checked)">
                                Admin
                                <input type="checkbox" ${hasMerchant ? 'checked' : ''} 
                                    onchange="togglePermission('${user.USERid}', 'merchant', '${section}', this.checked)">
                                Merchant
                            ` + actionsHtml;
                        }
                    }
                    row.innerHTML = `
                        <td>${user.USERid}</td>
                        <td>${user.contact_name}</td>
                        <td>${user.email_address}</td>
                        ${section !== 'communities' ? `<td class="action-cell">${actionsHtml}</td>` : ''}
                    `;
                    tbody.appendChild(row);
                });
            }

            async function togglePermission(userId, permission, section, isChecked) {
                try {
                    const method = isChecked ? 'POST' : 'DELETE';
                    const response = await authenticatedFetch(`${window.apiUrl}/permissions/${userId}`, {
                        method: method,
                        body: JSON.stringify({ permission })
                    });
                    if (!response.ok) throw new Error(`Failed to ${isChecked ? 'add' : 'remove'} permission: ${response.status}`);
                    const data = await response.json();
                    toastr.success(data.message || `${isChecked ? 'Added' : 'Removed'} ${permission} permission for user ${userId}`);
                    loadSection(section);
                } catch (error) {
                    toastr.error(`Error: ${error.message}`);
                    loadSection(section);
                }
            }

            async function updateAffiliate(affiliate) {
                let credentials = {};
                if (affiliate === 'amazon_uk') {
                    credentials = {
                        ACCESS_KEY: document.getElementById('amazonAccessKey').value.trim(),
                        SECRET_KEY: document.getElementById('amazonSecretKey').value.trim(),
                        ASSOCIATE_TAG: document.getElementById('amazonAssociateTag').value.trim(),
                        COUNTRY: document.getElementById('amazonCountry').value.trim()
                    };
                } else if (affiliate === 'ebay_uk') {
                    credentials = { APP_ID: document.getElementById('ebayAppId').value.trim() };
                } else if (affiliate === 'awin') {
                    credentials = { API_TOKEN: document.getElementById('awinApiToken').value.trim() };
                } else if (affiliate === 'cj') {
                    credentials = {
                        API_KEY: document.getElementById('cjApiKey').value.trim(),
                        WEBSITE_ID: document.getElementById('cjWebsiteId').value.trim()
                    };
                } else if (affiliate === 'textmagic') {
                    credentials = {
                        USERNAME: document.getElementById('textmagicUsername').value.trim(),
                        API_KEY: document.getElementById('textmagicApiKey').value.trim()
                    };
                } else if (affiliate === 'tiny') {
                    credentials = { API_KEY: document.getElementById('tinyApiKey').value.trim() };
                }

                credentials = Object.fromEntries(Object.entries(credentials).filter(([_, v]) => v !== ''));
                if (Object.keys(credentials).length === 0) {
                    toastr.warning('No changes to update');
                    return;
                }

                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/config/${affiliate}`, {
                        method: 'PATCH',
                        body: JSON.stringify(credentials)
                    });
                    if (!response.ok) throw new Error(`Failed to update: ${response.status}`);
                    const data = await response.json();
                    toastr.success(`Update successful: ${data.message}`);
                } catch (error) {
                    toastr.error(`Error updating credentials: ${error.message}`);
                }
            }

            async function submitReferral(formId, successMessage) {
                const form = document.getElementById(formId);
                if (form.dataset.listenerAdded) return;
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const formData = new FormData(form);
                    const jsonData = Object.fromEntries(formData.entries());
                    try {
                        const response = await authenticatedFetch(`${window.apiUrl}/referal`, {
                            method: 'POST',
                            body: JSON.stringify(jsonData),
                        });
                        if (!response.ok) throw new Error((await response.json()).message || 'Unknown error');
                        const data = await response.json();
                        if (data.status === 'success') {
                            toastr.success(`${successMessage} - Referer: ${data.referer}`);
                        } else {
                            toastr.error(data.message || 'Unknown error');
                        }
                    } catch (error) {
                        toastr.error(error.message || 'Failed to connect to server');
                    }
                });
                form.dataset.listenerAdded = 'true';
            }

            function logOff() {
                if (confirm('Are you sure you want to log off?')) {
                    localStorage.removeItem('authToken');
                    toastr.success('Logged off successfully');
                    setTimeout(() => window.location.href = '/', 1000);
                }
            }

            async function loadCategories() {
                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/categories`);
                    if (!response.ok) throw new Error(`Failed to fetch /categories: ${response.status}`);
                    const data = await response.json();
                    const tree = document.getElementById('categoryTree');
                    tree.innerHTML = '';
                    const ul = document.createElement('ul');
                    data.categories.forEach(cat => ul.appendChild(createTreeNode(cat)));
                    tree.appendChild(ul);
                    toastr.success('Categories loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading categories: ${error.message}`);
                }
            }

            function createTreeNode(category) {
                const li = document.createElement('li');
                const nodeDiv = document.createElement('div');
                nodeDiv.className = 'node';

                const toggle = document.createElement('span');
                toggle.className = 'toggle';
                toggle.textContent = '+';
                toggle.onclick = () => toggleSubcategories(category.id, toggle);

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = category.id;
                checkbox.onchange = () => handleCategorySelection(category.id, checkbox);

                const span = document.createElement('span');
                span.textContent = `${category.name} (${category.id})`;

                nodeDiv.appendChild(toggle);
                nodeDiv.appendChild(checkbox);
                nodeDiv.appendChild(span);
                li.appendChild(nodeDiv);

                const subUl = document.createElement('ul');
                subUl.className = 'subcategories';
                li.appendChild(subUl);

                return li;
            }

            async function toggleSubcategories(parentId, toggle) {
                const li = toggle.closest('li');
                const subUl = li.querySelector('.subcategories');

                if (subUl.classList.contains('open')) {
                    subUl.classList.remove('open');
                    toggle.textContent = '+';
                } else {
                    if (subUl.children.length === 0) {
                        try {
                            const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${parentId}`);
                            if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                            const data = await response.json();
                            if (data.categories.length === 0) {
                                toastr.info(`No subcategories for ${parentId}`);
                                return;
                            }
                            data.categories.forEach(cat => subUl.appendChild(createTreeNode(cat)));
                            toastr.success(`Subcategories for ${parentId} loaded successfully`);
                        } catch (error) {
                            toastr.error(`Error loading subcategories: ${error.message}`);
                            return;
                        }
                    }
                    subUl.classList.add('open');
                    toggle.textContent = '-';
                }
            }

            async function handleCategorySelection(categoryId, checkbox) {
                document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
                    if (cb !== checkbox) cb.checked = false;
                });

                if (checkbox.checked) {
                    try {
                        const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
                        if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
                        const data = await response.json();
                        const tbody = document.getElementById('dealList');
                        tbody.innerHTML = '';
                        data.products.forEach(product => tbody.appendChild(createDealRow(product)));
                        toastr.success(`Loaded ${data.count} discounted products for category ${categoryId}`);
                    } catch (error) {
                        toastr.error(`Error loading discounted products: ${error.message}`);
                        checkbox.checked = false;
                    }
                } else {
                    document.getElementById('dealList').innerHTML = '';
                }
            }

            function createDealRow(product) {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                return tr;
            }

            // Initial page load
            initializeAdmin();
        })();
    
users_settings.json
{
    "232": {
        "password": "$2b$12$/1iOm.R/eTZDuvmdRHWqb.ew9q6ZayhS/2/DZkP8H0d3wOBLX6T2y",
        "contact_name": "Si",
        "website_url": "www.someurl.com",
        "email_address": "si@ntsa.uk",
        "phone_number": "07989389179",
        "wixClientId": "9fa0f271-1600-4282-9fae-d841be6aaff6",
        "permissions": [
            "admin",
            "validated",
            "merchant",
            "verified"
        ],
        "referrals": {
            "visits": [
                {
                    "page": "/home",
                    "timestamp": "2025-03-21 10:21:23"
                },
                {
                    "page": "/mywebpage",
                    "timestamp": "2025-03-21 11:41:18"
                },
                {
                    "page": "/home/johnsmttih",
                    "timestamp": "2025-03-21 14:02:45"
                }
            ],
            "orders": [
                {
                    "orderId": "ORD12323445",
                    "buyer": "John Doe",
                    "total": "8.99",
                    "timestamp": "2025-03-21 11:41:37"
                },
                {
                    "orderId": "ORD12399",
                    "buyer": "John Smith",
                    "total": "59.99",
                    "timestamp": "2025-03-21 14:03:04"
                }
            ]
        }
    },
    "3O6TR9I8": {
        "email_address": "john@clubmadiera.uk",
        "password": "$2b$12$NkLMSi4B7x8bfpyPw6CtT.1GSmjV5CPSjP86QFc.F2j/vSFzfhbsW",
        "contact_name": "john",
        "phone_number": "07511502553",
        "permissions": [
            "wixpro",
            "admin",
            "merchant",
            "validated",
            "debug"
        ],
        "website_url": "",
        "wixClientId": "",
        "referrals": {
            "visits": [],
            "orders": []
        }
    }
}
velo.clubdiscounts.js
import { fetch } from 'wix-fetch';
import wixLocation from 'wix-location';

$w.onReady(async function () {
    const siteUrl = wixLocation.baseUrl
        .replace('https://', '')
        .replace(/\//g, '-');
    const USERid = encodeURIComponent(siteUrl);

    const categoryId = wixLocation.path[1] || 'root';
    const minDiscount = $w('#discountInput') && $w('#discountInput').value 
        ? parseInt($w('#discountInput').value, 10) 
        : 20;

    const baseUrl = `http://localhost:5000/${USERid}`;
    const subcategoriesEndpoint = categoryId === 'root' 
        ? `${baseUrl}/categories?min_discount=${minDiscount}`
        : `${baseUrl}/categories?parent_id=${categoryId}&min_discount=${minDiscount}`;
    const productsEndpoint = categoryId === 'root' 
        ? `${baseUrl}/discounted-products?min_discount=${minDiscount}`
        : `${baseUrl}/discounted-products?category_id=${categoryId}&min_discount=${minDiscount}`;

    try {
        // Subcategories fetch remains unchanged
        const subcatResponse = await fetch(subcategoriesEndpoint);
        if (subcatResponse.ok) {
            const subcatData = await subcatResponse.json();
            if (subcatData.count > 0) {
                $w('#subcategoryRepeater').data = subcatData.categories.map(category => ({
                    _id: category.id,
                    name: category.name,
                    categoryId: category.id
                }));
                $w('#subcategoryRepeater').onItemReady(($item, itemData) => {
                    $item('#subcategoryName').text = itemData.name;
                    $item('#subcategoryLink').onClick(() => {
                        wixLocation.to(`/category/${itemData.categoryId}`);
                    });
                });
                $w('#subcategoryRepeater').show();
            } else {
                $w('#subcategoryRepeater').hide();
                console.log("No subcategories found:", subcatData.message);
            }
        } else {
            throw new Error(`Subcategories fetch failed: ${subcatResponse.status}`);
        }

        // Updated products fetch with new fields
        const productsResponse = await fetch(productsEndpoint);
        if (productsResponse.ok) {
            const productsData = await productsResponse.json();
            if (productsData.count > 0) {
                $w('#productsRepeater').data = productsData.products.map(product => ({
                    _id: product.id,  // Changed from asin to id
                    source: product.source,
                    title: product.title,
                    productUrl: product.product_url,
                    currentPrice: `$${product.current_price.toFixed(2)}`,
                    originalPrice: `$${product.original_price.toFixed(2)}`,
                    discount: `${product.discount_percent}% off`,
                    imageUrl: product.image_url,
                    category: product.category,
                    manufacturer: product.manufacturer,
                    dimensions: product.dimensions,
                    features: product.features ? product.features.join(', ') : '',
                    qty: product.qty || 'N/A',
                    userId: product.user_id || 'N/A'
                }));
                $w('#productsRepeater').onItemReady(($item, itemData) => {
                    $item('#titleText').text = itemData.title;
                    $item('#priceText').text = `${itemData.currentPrice} (Was ${itemData.originalPrice})`;
                    $item('#discountText').text = itemData.discount;
                    $item('#productLink').link = itemData.productUrl;
                    $item('#productLink').target = "_blank";
                    // Add new fields to display
                    $item('#sourceText').text = `Source: ${itemData.source}`;
                    $item('#image').src = itemData.imageUrl;
                    $item('#categoryText').text = `Category: ${itemData.category}`;
                    $item('#manufacturerText').text = itemData.manufacturer ? `By: ${itemData.manufacturer}` : '';
                    $item('#dimensionsText').text = itemData.dimensions ? `Size: ${itemData.dimensions}` : '';
                    $item('#featuresText').text = itemData.features ? `Features: ${itemData.features}` : '';
                    $item('#qtyText').text = itemData.qty !== 'N/A' ? `Qty: ${itemData.qty}` : '';
                    $item('#userIdText').text = itemData.userId !== 'N/A' ? `Seller: ${itemData.userId}` : '';
                });
                $w('#productsRepeater').show();
            } else {
                $w('#productsRepeater').hide();
                console.log("No products found:", productsData.message);
            }
        } else {
            throw new Error(`Products fetch failed: ${productsResponse.status}`);
        }
    } catch (error) {
        console.error("Error loading data:", error);
        $w('#subcategoryRepeater').hide();
        $w('#productsRepeater').hide();
    }
});

if ($w('#discountInput')) {
    $w('#discountInput').onChange(() => {
        $w.onReady();
    });
}
velo.md
# Installing Velo Scripts for Community and Seller Websites in Wix

This guide provides step-by-step instructions to install Velo scripts in Wix for two types of websites: a **Community Website** (displaying member discounts) and a **Seller Website** (handling referrals and order callbacks). These scripts interact with a Flask backend API (e.g., running at `http://localhost:5000`) to fetch data or send referral notifications.

## Prerequisites

- A Wix account with two sites created: one for the Community Website and one for the Seller Website.
- The Flask backend running locally (e.g., `http://localhost:5000`) or deployed (e.g., via ngrok or a hosting service).
- Basic familiarity with the Wix Editor and Velo.

## General Setup: Enable Velo in Wix

For both websites, start by enabling Velo:

1. **Log in to Wix**:
   - Go to [wix.com](https://www.wix.com), log in, and select the site (Community or Seller) from the dashboard.

2. **Open the Editor**:
   - Click **Edit Site** to launch the Wix Editor.

3. **Enable Velo**:
   - Click the **Dev Mode** icon (code symbol) in the left sidebar.
   - Toggle **Turn on Dev Mode** to enable Velo, opening the Velo sidebar for code management.

---

## Community Website: Member Discounts Page

This section covers installing a Velo script on the Community Website to display subcategories and discounted products on a dynamic "Category" page.

### Step 1: Create a Dynamic Page

1. **Add a Dynamic Page**:
   - In the Wix Editor, click the **Pages** icon > **+ New Page** > **Dynamic Page** > **Add New Dynamic Page**.
   - Name it "Category" (this sets the page title).

2. **Set the URL Pattern**:
   - In the **Dynamic Page Settings**:
     - Set the **URL** to `/category/{categoryId}`.
     - Leave dataset options blank (data comes from Flask, not Wix Data).
   - Click **Done**.

3. **Switch to the Page**:
   - From the Pages dropdown, select the "Category" dynamic page.

### Step 2: Add Page Elements

Add repeaters and an optional discount input:

1. **Subcategory Repeater**:
   - Click **+ Add** > **List & Grid** > Drag a **Repeater** onto the page.
   - In **Properties** (right-click > Properties):
     - Set **ID** to `subcategoryRepeater`.
   - Inside the repeater:
     - Add a **Text** element, set **ID** to `subcategoryName`.
     - Add a **Button** element, set **ID** to `subcategoryLink`, label it "View".

2. **Products Repeater**:
   - Add another **Repeater** below.
   - In **Properties**:
     - Set **ID** to `productsRepeater`.
   - Inside the repeater, add:
     - **Text** for title, **ID**: `titleText`.
     - **Text** for price, **ID**: `priceText`.
     - **Text** for discount, **ID**: `discountText`.
     - **Button** for link, **ID**: `productLink`, label "Buy Now".
     - **Text** for source, **ID**: `sourceText`.
     - **Image** for product image, **ID**: `image`.
     - **Text** for category, **ID**: `categoryText`.
     - **Text** for manufacturer, **ID**: `manufacturerText`.
     - **Text** for dimensions, **ID**: `dimensionsText`.
     - **Text** for features, **ID**: `featuresText`.
     - **Text** for quantity, **ID**: `qtyText`.
     - **Text** for user ID, **ID**: `userIdText`.

3. **Optional Discount Input**:
   - Click **+ Add** > **Input** > Drag a **Dropdown** onto the page.
   - In **Properties**:
     - Set **ID** to `discountInput`.
     - Click **Manage Choices**, add options (e.g., `10`, `15`, `20`, `25`), set default to `20`.

4. **Layout**:
   - Arrange elements (e.g., subcategories at top, products below, discount input above).
   - Save changes.

### Step 3: Add the Velo Script

1. **Open Code Panel**:
   - In the Velo sidebar, select **Page Code** tab (file named `category.js`).

2. **Paste the Script**:
   - Add this code:

     ```javascript
     import { fetch } from 'wix-fetch';
     import wixLocation from 'wix-location';

     $w.onReady(async function () {
         const siteUrl = wixLocation.baseUrl
             .replace('https://', '')
             .replace(/\//g, '-');
         const USERid = encodeURIComponent(siteUrl);

         const categoryId = wixLocation.path[1] || 'root';
         const minDiscount = $w('#discountInput') && $w('#discountInput').value 
             ? parseInt($w('#discountInput').value, 10) 
             : 20;

         const baseUrl = `http://localhost:5000/${USERid}`;
         const subcategoriesEndpoint = categoryId === 'root' 
             ? `${baseUrl}/categories?min_discount=${minDiscount}`
             : `${baseUrl}/categories?parent_id=${categoryId}&min_discount=${minDiscount}`;
         const productsEndpoint = categoryId === 'root' 
             ? `${baseUrl}/discounted-products?min_discount=${minDiscount}`
             : `${baseUrl}/discounted-products?category_id=${categoryId}&min_discount=${minDiscount}`;

         try {
             const subcatResponse = await fetch(subcategoriesEndpoint);
             if (subcatResponse.ok) {
                 const subcatData = await subcatResponse.json();
                 if (subcatData.count > 0) {
                     $w('#subcategoryRepeater').data = subcatData.categories.map(category => ({
                         _id: category.id,
                         name: category.name,
                         categoryId: category.id
                     }));
                     $w('#subcategoryRepeater').onItemReady(($item, itemData) => {
                         $item('#subcategoryName').text = itemData.name;
                         $item('#subcategoryLink').onClick(() => {
                             wixLocation.to(`/category/${itemData.categoryId}`);
                         });
                     });
                     $w('#subcategoryRepeater').show();
                 } else {
                     $w('#subcategoryRepeater').hide();
                     console.log("No subcategories found:", subcatData.message);
                 }
             } else {
                 throw new Error(`Subcategories fetch failed: ${subcatResponse.status}`);
             }

             const productsResponse = await fetch(productsEndpoint);
             if (productsResponse.ok) {
                 const productsData = await productsResponse.json();
                 if (productsData.count > 0) {
                     $w('#productsRepeater').data = productsData.products.map(product => ({
                         _id: product.id,
                         source: product.source,
                         title: product.title,
                         productUrl: product.product_url,
                         currentPrice: `$${product.current_price.toFixed(2)}`,
                         originalPrice: `$${product.original_price.toFixed(2)}`,
                         discount: `${product.discount_percent}% off`,
                         imageUrl: product.image_url,
                         category: product.category,
                         manufacturer: product.manufacturer,
                         dimensions: product.dimensions,
                         features: product.features ? product.features.join(', ') : '',
                         qty: product.qty || 'N/A',
                         userId: product.user_id || 'N/A'
                     }));
                     $w('#productsRepeater').onItemReady(($item, itemData) => {
                         $item('#titleText').text = itemData.title;
                         $item('#priceText').text = `${itemData.currentPrice} (Was ${itemData.originalPrice})`;
                         $item('#discountText').text = itemData.discount;
                         $item('#productLink').link = itemData.productUrl;
                         $item('#productLink').target = "_blank";
                         $item('#sourceText').text = `Source: ${itemData.source}`;
                         $item('#image').src = itemData.imageUrl;
                         $item('#categoryText').text = `Category: ${itemData.category}`;
                         $item('#manufacturerText').text = itemData.manufacturer ? `By: ${itemData.manufacturer}` : '';
                         $item('#dimensionsText').text = itemData.dimensions ? `Size: ${itemData.dimensions}` : '';
                         $item('#featuresText').text = itemData.features ? `Features: ${itemData.features}` : '';
                         $item('#qtyText').text = itemData.qty !== 'N/A' ? `Qty: ${itemData.qty}` : '';
                         $item('#userIdText').text = itemData.userId !== 'N/A' ? `Seller: ${itemData.userId}` : '';
                     });
                     $w('#productsRepeater').show();
                 } else {
                     $w('#productsRepeater').hide();
                     console.log("No products found:", productsData.message);
                 }
             } else {
                 throw new Error(`Products fetch failed: ${productsResponse.status}`);
             }
         } catch (error) {
             console.error("Error loading data:", error);
             $w('#subcategoryRepeater').hide();
             $w('#productsRepeater').hide();
         }
     });

     if ($w('#discountInput')) {
         $w('#discountInput').onChange(() => {
             $w.onReady();
         });
     }
     ```

   - **Explanation**:
     - **Imports**: Uses `wix-fetch` for API calls and `wix-location` for URL handling.
     - **USERid**: Derives a unique identifier from the site’s base URL.
     - **Endpoints**: Fetches subcategories and products from Flask based on `categoryId` (from URL) and `minDiscount` (from input or default 20).
     - **Subcategories**: Populates `#subcategoryRepeater` with names and clickable links to subcategories.
     - **Products**: Populates `#productsRepeater` with detailed fields (title, price, discount, etc.).
     - **Error Handling**: Hides repeaters on failure and logs errors.
     - **Discount Input**: Refreshes data when changed.

3. **Update URL**:
   - Replace `http://localhost:5000` with your Flask backend URL if deployed (e.g., `https://your-flask-app.ngrok.io`).

4. **Save**:
   - Click **Save** in the Editor toolbar.

### Step 4: Test
- In the Editor, click **Preview**.
- Visit `/category/root` to see root-level data or `/category/{someId}` for specific categories.
- Verify subcategories and products load with all fields. Test the discount input if added.

---

## Seller Website: Referral Handling

The Seller Website uses two scripts: one to capture a `?referer` query parameter on page load (`public/pages/home.js`) and another to notify the referrer on order placement (`backend/events.js`).

### Step 1: Set Up the Home Page

1. **Select the Home Page**:
   - In the Wix Editor for the Seller site, ensure you’re on the "Home" page (or any page where referrals might occur).

2. **Add the Frontend Script**:
   - In the Velo sidebar, under **Public** > right-click **public** > **New File**, name it `pages/home.js`.
   - Paste this code:

     ```javascript
     import { session } from 'wix-storage';
     import wixLocation from 'wix-location';
     import { fetch } from 'wix-fetch';

     $w.onReady(function () {
         const query = wixLocation.query;
         
         if (query.referer) {
             session.setItem('referer', query.referer);
             console.log('Referer stored:', query.referer);

             const sendCallbackToReferer = async () => {
                 try {
                     const response = await fetch('http://localhost:5000/referal', {
                         method: 'POST',
                         headers: {
                             'Content-Type': 'application/json'
                         },
                         body: JSON.stringify({
                             referer: query.referer,
                             page: wixLocation.url,
                             timestamp: new Date().toISOString()
                         })
                     });

                     if (response.ok) {
                         const result = await response.json();
                         console.log('Callback to referrer successful:', result);
                     } else {
                         console.error('Callback failed with status:', response.status);
                     }
                 } catch (error) {
                     console.error('Error sending callback to referrer:', error);
                 }
             };

             sendCallbackToReferer();
         } else {
             const storedReferer = session.getItem('referer');
             if (storedReferer) {
                 console.log('Using previously stored referer:', storedReferer);
             }
         }
     });
     ```

   - **Explanation**:
     - **Imports**: Uses `wix-storage` for session storage, `wix-location` for URL queries, and `wix-fetch` for HTTP requests.
     - **Referer Check**: If `?referer` exists in the URL (e.g., `?referer=community123`), it’s stored in session storage.
     - **Callback**: Sends a POST request to `/referal` with the referer, current page URL, and timestamp.
     - **Fallback**: Logs if a referer was previously stored but none is in the current URL.

3. **Update URL**:
   - Replace `http://localhost:5000` with your Flask backend URL if deployed.

4. **Save**:
   - Save the file.

### Step 2: Set Up the Backend Order Callback

1. **Create Backend File**:
   - In the Velo sidebar, under **Backend** > right-click **backend** > **New File**, name it `events.js`.

2. **Paste the Script**:
   - Add this code:

     ```javascript
     import { fetch } from 'wix-fetch';
     import { getSessionData } from 'wix-storage-backend';

     export async function wixStores_onOrderPlaced(event) {
         const orderId = event.orderId;
         const buyerInfo = event.buyerInfo;
         const total = event.totals.total;

         let referer;
         try {
             referer = await getSessionData('referer');
         } catch (error) {
             console.error('Failed to retrieve referer from session:', error);
         }

         const callback = async () => {
             try {
                 const payload = {
                     orderId: orderId,
                     buyer: buyerInfo,
                     total: total,
                     referer: referer || 'none',
                     timestamp: new Date().toISOString()
                 };

                 const response = await fetch('http://localhost:5000/referal', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json'
                     },
                     body: JSON.stringify(payload)
                 });

                 if (response.ok) {
                     const result = await response.json();
                     console.log('Callback successful:', result);
                     return result;
                 } else {
                     throw new Error(`Callback failed with status: ${response.status}`);
                 }
             } catch (error) {
                 console.error('Callback error:', error.message);
                 throw error;
             }
         };

         try {
             await callback();
         } catch (error) {
             console.error('Failed to execute callback on order placed:', error);
         }
     }
     ```

   - **Explanation**:
     - **Imports**: Uses `wix-fetch` for API calls and `wix-storage-backend` for backend session access.
     - **Event Handler**: Triggers on `wixStores_onOrderPlaced` when an order is placed.
     - **Referer Retrieval**: Fetches the referer stored by the frontend script from session storage.
     - **Callback**: Sends a POST request to `/referal` with order details (ID, buyer, total), referer, and timestamp.
     - **Error Handling**: Logs failures at each step.

3. **Update URL**:
   - Replace `http://localhost:5000` with your Flask backend URL if deployed.

4. **Save**:
   - Save the file.

### Step 3: Test the Seller Site

1. **Run Flask Backend**:
   - Ensure Flask is running (e.g., `python app.py` on `localhost:5000`).
   - Use ngrok for local testing if needed (`ngrok http 5000`) and update URLs in scripts.

2. **Test Referral Capture**:
   - In Preview mode, visit the home page with a referer (e.g., append `?referer=community123`).
   - Check the console for "Referer stored" and "Callback to referrer successful" logs.

3. **Test Order Callback**:
   - Place a test order via Wix Stores (requires a store setup).
   - Verify the console logs "Callback successful" with order details sent to Flask.

---

## Final Steps: Publish Both Sites

1. **Publish**:
   - For each site, click **Publish** in the Wix Editor.
   - Confirm live URLs (e.g., `https://yourusername.wixsite.com/communitysite` and `https://yourusername.wixsite.com/sellersite`).

2. **Verify Live**:
   - Community Site: Visit `/category/root` to ensure subcategories and products load.
   - Seller Site: Visit with `?referer=xyz`, place an order, and confirm callbacks to Flask.

---

## Notes

- Replace all instances of `http://localhost:5000` with your live Flask URL before publishing.
- Ensure Flask endpoints (`/categories`, `/discounted-products`, `/referal`) are implemented to handle these requests.
- Test thoroughly in Preview mode before going live.
velo.orderplace.js
// File: backend/events.js

import { fetch } from 'wix-fetch';
import { getSessionData } from 'wix-storage-backend'; // Backend session access

// Event handler for when an order is placed
export async function wixStores_onOrderPlaced(event) {
    const orderId = event.orderId;
    const buyerInfo = event.buyerInfo;
    const total = event.totals.total;

    // Retrieve the referer from session storage (backend access)
    let referer;
    try {
        referer = await getSessionData('referer');
    } catch (error) {
        console.error('Failed to retrieve referer from session:', error);
    }

    // Define the callback function to call the external endpoint
    const callback = async () => {
        try {
            const payload = {
                orderId: orderId,
                buyer: buyerInfo,
                total: total,
                referer: referer || 'none', // Use 'none' if no referer was stored
                timestamp: new Date().toISOString()
            };

            const response = await fetch('https://clubmedeira.io/referal', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                const result = await response.json();
                console.log('Callback successful:', result);
                return result;
            } else {
                throw new Error(`Callback failed with status: ${response.status}`);
            }
        } catch (error) {
            console.error('Callback error:', error.message);
            throw error;
        }
    };

    // Execute the callback
    try {
        await callback();
    } catch (error) {
        console.error('Failed to execute callback on order placed:', error);
    }
}
velo.product.js
// File: public/pages/home.js (or any page where the referer might appear)

import { session } from 'wix-storage';
import wixLocation from 'wix-location';
import { fetch } from 'wix-fetch'; // Import fetch for HTTP requests

$w.onReady(function () {
    // Get query parameters from the URL
    const query = wixLocation.query;
    
    // Check if referer exists in the query
    if (query.referer) {
        // Store the referer in session storage
        session.setItem('referer', query.referer);
        console.log('Referer stored:', query.referer);

        // Define the callback function to notify the referrer
        const sendCallbackToReferer = async () => {
            try {
                const response = await fetch('http://localhost:5000/referal', {
                    method: 'POST', // Use POST to send data; change to GET if needed
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        referer: query.referer,
                        page: wixLocation.url, // Current page URL
                        timestamp: new Date().toISOString()
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('Callback to referrer successful:', result);
                } else {
                    console.error('Callback failed with status:', response.status);
                }
            } catch (error) {
                console.error('Error sending callback to referrer:', error);
            }
        };

        // Execute the callback
        sendCallbackToReferer();
    } else {
        // Log if no referer is present but one was previously stored
        const storedReferer = session.getItem('referer');
        if (storedReferer) {
            console.log('Using previously stored referer:', storedReferer);
        }
    }
});
web.config
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <system.webServer>
        <handlers>
            <add name="FlaskFastCGI" 
                 path="*" 
                 verb="*" 
                 modules="FastCgiModule" 
                 scriptProcessor="C:\Python\Python312\python.exe|C:\Python\Python312\Lib\site-packages\wfastcgi.py" 
                 resourceType="Unspecified" 
                 requireAccess="Script" />
        </handlers>
        <fastCgi>
            <application fullPath="C:\Python\Python312\python.exe" 
                         arguments="C:\Python\Python312\Lib\site-packages\wfastcgi.py" 
                         maxInstances="4" 
                         idleTimeout="300" 
                         activityTimeout="30" 
                         requestTimeout="90" 
                         instanceMaxRequests="10000">
                <environmentVariables>
                    <environmentVariable name="WSGI_HANDLER" value="madeira.app" />
                    <environmentVariable name="PYTHONPATH" value="C:\inetpub\clubmadeira.io" />
                </environmentVariables>
            </application>
        </fastCgi>
    </system.webServer>
</configuration>
Wix.py
import requests
import json

# Step 1: Retrieve the access token using the "anonymous" grant type
token_url = "https://www.wixapis.com/oauth2/token"
payload = {
    "clientId": "9fa0f271-1600-4282-9fae-d841be6aaff6",
    "grantType": "anonymous"
}
headers = {"Content-Type": "application/json"}

response = requests.post(token_url, json=payload, headers=headers)
if response.status_code != 200:
    print(f"Error getting token: {response.status_code} - {response.text}")
    exit()

token_data = response.json()
access_token = token_data["access_token"]
print(f"Access Token: {access_token}")

# Step 2: Function to fetch products with pagination
products_url = "https://www.wixapis.com/stores-reader/v1/products/query"
headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {access_token}"
}

def fetch_products(limit=100, offset=0, last_numeric_id=None):
    # Base query payload from your earlier request
    query_payload = {
        "query": {},
        "includeVariants": False,
        "includeHiddenProducts": False,
        "includeMerchantSpecificData": False
    }

    # Use limit/offset for smaller datasets
    if last_numeric_id is None:
        query_payload["query"]["paging"] = {"limit": limit, "offset": offset}
    # Use numericId for larger datasets (>10k items)
    else:
        query_payload["query"]["sort"] = [{"numericId": "asc"}]
        query_payload["query"]["filter"] = {"numericId": {"$gt": last_numeric_id}}

    response = requests.post(products_url, headers=headers, json=query_payload)
    if response.status_code != 200:
        print(f"Error fetching products: {response.status_code} - {response.text}")
        return None
    return response.json()

# Step 3: Paginate through products
all_products = []
limit = 100  # Items per page
offset = 0   # Starting point

# First, try limit/offset pagination
while True:
    result = fetch_products(limit=limit, offset=offset)
    if not result or "products" not in result or not result["products"]:
        break  # Stop if no more products

    products = result["products"]
    all_products.extend(products)
    print(f"Fetched {len(products)} products (offset {offset} to {offset + limit - 1})")

    offset += limit
    if len(products) < limit:  # Fewer items than limit means we're done
        break

# If we hit ~10k items or limit/offset fails, switch to numericId
if len(all_products) >= 10000 or not all_products:
    print("Switching to numericId pagination for large datasets...")
    all_products = []  # Reset
    last_numeric_id = None

    while True:
        result = fetch_products(last_numeric_id=last_numeric_id)
        if not result or "products" not in result or not result["products"]:
            break  # Stop if no more products

        products = result["products"]
        all_products.extend(products)
        last_numeric_id = products[-1]["numericId"]  # Get the last numericId
        print(f"Fetched {len(products)} products (numericId > {last_numeric_id})")

# Step 4: Output all fetched products
print(f"\nTotal products fetched: {len(all_products)}")
print(json.dumps(all_products, indent=2))  # Pretty-print all products
wix2.py
import requests
import json

def get_wix_access_token(client_id):
    """Retrieve an access token for the given Wix clientId."""
    token_url = "https://www.wixapis.com/oauth2/token"
    payload = {
        "clientId": client_id,
        "grantType": "anonymous"
    }
    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(token_url, json=payload, headers=headers)
        if response.status_code != 200:
            print(f"Error getting token for clientId {client_id}: {response.status_code} - {response.text}")
            return None
        token_data = response.json()
        return token_data["access_token"]
    except Exception as e:
        print(f"Token fetch error for clientId {client_id}: {str(e)}")
        return None

def search_wix_discounted(client_id, collection_id, min_discount_percent=20):
    """Search for discounted Wix products in a collection for a given clientId."""
    access_token = get_wix_access_token(client_id)
    if not access_token:
        return []

    url = "https://www.wixapis.com/stores/v1/products/query"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {access_token}"
    }
    filter_str = json.dumps({"collections.id": {"$hasSome": [collection_id]}})
    params = {
        "query": {
            "filter": filter_str,
            "paging": {"limit": 100, "offset": 0}  # Higher limit for broader search
        }
    }

    discounted_products = []
    offset = 0
    limit = 100

    try:
        while True:
            params["query"]["paging"]["offset"] = offset
            response = requests.post(url, headers=headers, json=params)
            if response.status_code != 200:
                print(f"Error fetching products for clientId {client_id}, collection {collection_id}: {response.status_code} - {response.text}")
                return discounted_products

            data = response.json()
            products = data.get("products", [])
            if not products:
                break

            for product in products:
                current_price_str = product.get("price", {}).get("formatted", {}).get("price", "0")
                original_price_str = product.get("discountedPrice", {}).get("formatted", {}).get("price", current_price_str)
                
                # Convert prices to floats, removing currency symbols
                try:
                    current_price = float(current_price_str.replace("$", "").replace("£", "").replace(",", ""))
                    original_price = float(original_price_str.replace("$", "").replace("£", "").replace(",", ""))
                except (ValueError, TypeError):
                    continue  # Skip if price conversion fails

                # Check if it’s discounted (original > current)
                if original_price > current_price:
                    discount = ((original_price - current_price) / original_price) * 100
                    if discount >= min_discount_percent:
                        discounted_products.append({
                            "name": product.get("name", ""),
                            "thumbnail": product.get("media", {}).get("mainMedia", {}).get("thumbnail", {}).get("url", ""),
                            "price": current_price_str,
                            "discountPrice": original_price_str,
                            "link": (
                                product.get("productPageUrl", {}).get("base", "").rstrip("/") + "/" +
                                product.get("productPageUrl", {}).get("path", "").lstrip("/")
                            )
                        })

            offset += limit
            if len(products) < limit:  # Fewer items than limit means we're done
                break

        return discounted_products

    except Exception as e:
        print(f"Wix Search Error for clientId {client_id}, collection {collection_id}: {str(e)}")
        return []

# Example usage
if __name__ == "__main__":
    client_id = "9fa0f271-1600-4282-9fae-d841be6aaff6"  # Your Wix clientId
    collection_id = "3357079e-958c-c25e-d594-ea3f72e1660a"  # Example collection (Camping)
    discounted_products = search_wix_discounted(client_id, collection_id, min_discount_percent=20)
    print(json.dumps(discounted_products, indent=2))
wixcat.py
import requests
import json

# Step 1: Retrieve the access token using the "anonymous" grant type
token_url = "https://www.wixapis.com/oauth2/token"
payload = {
    "clientId": "9fa0f271-1600-4282-9fae-d841be6aaff6",
    "grantType": "anonymous"
}
headers = {"Content-Type": "application/json"}

response = requests.post(token_url, json=payload, headers=headers)
if response.status_code != 200:
    print(f"Error getting token: {response.status_code} - {response.text}")
    exit()

token_data = response.json()
access_token = token_data["access_token"]
print(f"Access Token: {access_token}")

# Step 2: Function to fetch collections
collections_url = "https://www.wixapis.com/stores-reader/v1/collections/query"
headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {access_token}"
}

def fetch_collections(limit=10, offset=0):
    query_payload = {
        "query": {
            "paging": {"limit": limit, "offset": offset}
        },
        "includeNumberOfProducts": True
    }
    response = requests.post(collections_url, headers=headers, json=query_payload)
    if response.status_code != 200:
        print(f"Error fetching collections: {response.status_code} - {response.text}")
        return None
    return response.json()

# Step 3: Function to fetch products for a collection
products_url = "https://www.wixapis.com/stores/v1/products/query"

def fetch_products_for_collection(collection_id, limit=10, offset=0):
    filter_str = json.dumps({"collections.id": {"$hasSome": [collection_id]}})
    query_payload = {
        "query": {
            "filter": filter_str,
            "paging": {"limit": limit, "offset": offset}
        }
    }
    response = requests.post(products_url, headers=headers, json=query_payload)
    if response.status_code != 200:
        print(f"Error fetching products for collection {collection_id}: {response.status_code} - {response.text}")
        return None
    return response.json()

# Step 4: Fetch all collections and their products
all_collections = []
limit = 10
offset = 0

# Fetch collections
while True:
    result = fetch_collections(limit=limit, offset=offset)
    if not result or "collections" not in result or not result["collections"]:
        break

    collections = result["collections"]
    filtered_collections = [
        {
            "id": col["id"],
            "name": col["name"],
            "numberOfProducts": col["numberOfProducts"],
            "products": []
        }
        for col in collections
        if not col["id"].startswith("00000000")
    ]
    all_collections.extend(filtered_collections)
    print(f"Fetched {len(collections)} collections, kept {len(filtered_collections)} (offset {offset} to {offset + limit - 1})")

    offset += limit
    if len(collections) < limit:
        break

# Fetch products for each collection and filter fields
for collection in all_collections:
    collection_id = collection["id"]
    all_products = []
    offset = 0

    while True:
        result = fetch_products_for_collection(collection_id, limit=limit, offset=offset)
        if not result or "products" not in result or not result["products"]:
            break

        products = result["products"]
        # Filter to only desired fields, combining base and path for link
        filtered_products = [
            {
                "name": product.get("name", ""),
                "thumbnail": product.get("media", {}).get("mainMedia", {}).get("thumbnail", {}).get("url", ""),
                "price": product.get("price", {}).get("formatted", {}).get("price", ""),
                "discountPrice": product.get("discountedPrice", {}).get("formatted", {}).get("price", ""),
                "link": (
                    product.get("productPageUrl", {}).get("base", "") +
                    product.get("productPageUrl", {}).get("path", "")
                )
            }
            for product in products
        ]
        all_products.extend(filtered_products)
        print(f"Fetched {len(products)} products for collection {collection['name']} (offset {offset} to {offset + limit - 1})")

        offset += limit
        if len(products) < limit:
            break

    collection["products"] = all_products
    print(f"Total products in {collection['name']}: {len(all_products)}")

# Step 5: Output the combined data
print(f"\nTotal collections fetched (after filtering): {len(all_collections)}")
print(json.dumps(all_collections, indent=2))  # Pretty-print collections with filtered products

blueprints/authentication.py
from flask import Blueprint, jsonify, request, render_template, current_app
from utils.auth import login_user, signup_user, login_required, generate_token  # Added generate_token
from utils.users import load_users_settings, save_users_settings
from utils.config import load_config  # For TextMagic config
import jwt
import datetime
import bcrypt
import random
import string
import requests  # For SMS sending via TextMagic

authentication_bp = Blueprint('authentication', __name__)

@authentication_bp.route('/login', methods=['POST'])
def login():
    return login_user()

@authentication_bp.route('/signup', methods=['GET'])
def signup_page():
    return render_template('signup.html')

@authentication_bp.route('/signup', methods=['POST'])
def signup():
    # Override signup_user() to ensure correct behavior; replace with signup_user() if it aligns
    data = request.get_json()
    signup_type = data.get('signup_type')
    contact_name = data.get('contact_name')
    signup_phone = data.get('signup_phone')
    signup_email = data.get('signup_email')
    signup_password = data.get('signup_password')

    if not all([signup_type, contact_name, signup_email, signup_password]):
        return jsonify({"status": "error", "message": "Missing required fields"}), 400
    if signup_type in ['seller', 'community'] and not signup_phone:
        return jsonify({"status": "error", "message": "Phone required for Merchant/Community"}), 400

    users_settings = load_users_settings()
    # Check if email already exists
    if any(u['email_address'].lower() == signup_email.lower() for u in users_settings.values()):
        return jsonify({"status": "error", "message": "Email already registered"}), 409

    user_id = f"{int(datetime.datetime.utcnow().timestamp())}{random.randint(1000, 9999)}"  # Unique ID
    hashed_password = bcrypt.hashpw(signup_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    
    # Map signup_type to permission
    permission_map = {'seller': 'merchant', 'community': 'community', 'wixpro': 'wixpro'}
    permission = permission_map.get(signup_type, signup_type)

    # Save user without "verified" permission
    users_settings[user_id] = {
        "email_address": signup_email.lower(),
        "contact_name": contact_name,
        "phone_number": signup_phone,  # Consistent with reset-password
        "password": hashed_password,
        "permissions": [permission]  # No "verified" yet
    }
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": "User created, please verify OTP"}), 201

@authentication_bp.route('/reset-password', methods=['POST'])
def reset_password():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
        email = data.get("email")
        if not email:
            return jsonify({"status": "error", "message": "Email is required"}), 400

        users_settings = load_users_settings()
        matching_user_id = next((uid for uid, settings in users_settings.items() if settings.get("email_address", "").lower() == email.lower()), None)
        if not matching_user_id:
            return jsonify({"status": "error", "message": "Email not found"}), 404

        user = users_settings[matching_user_id]
        phone_number = user.get("phone_number", "").strip()
        if not phone_number:
            return jsonify({"status": "error", "message": "No phone number associated with this account"}), 400

        otp = ''.join(random.choices(string.digits, k=6))
        reset_expiry = datetime.datetime.utcnow() + datetime.timedelta(minutes=15)
        if "reset_codes" not in current_app.config:
            current_app.config["reset_codes"] = {}
        current_app.config["reset_codes"][matching_user_id] = {"code": otp, "expires": reset_expiry.isoformat()}

        config = load_config()
        textmagic_config = config.get("textmagic", {})
        username = textmagic_config.get("USERNAME")
        api_key = textmagic_config.get("API_KEY")
        if not username or not api_key:
            return jsonify({"status": "error", "message": "TextMagic credentials not configured"}), 500

        url = "https://rest.textmagic.com/api/v2/messages"
        payload = {"text": f"clubmadeira.io one-time password: {otp}. Expires in 15 mins.", "phones": phone_number}
        headers = {"X-TM-Username": username, "X-TM-Key": api_key, "Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(url, data=payload, headers=headers)

        if response.status_code == 201:
            return jsonify({"status": "success", "message": "A one-time password has been sent to your phone"}), 200
        else:
            return jsonify({"status": "error", "message": f"Failed to send SMS: {response.text}"}), 500
    except Exception as e:
        print(f"Error in reset-password endpoint: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@authentication_bp.route('/verify-reset-code', methods=['POST'])
def verify_reset_code():
    try:
        data = request.get_json(silent=True)
        if not data or not isinstance(data, dict):
            return jsonify({"status": "error", "message": "Invalid or missing JSON data"}), 400
        email = data.get("email")
        code = data.get("code")
        new_password = data.get("new_password")
        if not all([email, code, new_password]):
            return jsonify({"status": "error", "message": "Email, code, and new password are required"}), 400

        users_settings = load_users_settings()
        matching_user_id = next((uid for uid, settings in users_settings.items() if settings.get("email_address", "").lower() == email.lower()), None)
        if not matching_user_id:
            return jsonify({"status": "error", "message": "Email not found"}), 404

        stored_reset = current_app.config.get("reset_codes", {}).get(matching_user_id, {})
        stored_code = stored_reset.get("code")
        if not stored_code:
            return jsonify({"status": "error", "message": "No reset code found for this user"}), 400

        try:
            expiry = datetime.datetime.fromisoformat(stored_reset.get("expires", "2000-01-01T00:00:00"))
        except (ValueError, TypeError) as e:
            print(f"Error parsing expiry: {str(e)}")
            return jsonify({"status": "error", "message": "Invalid reset code expiry format"}), 500

        if stored_code != code or datetime.datetime.utcnow() > expiry:
            return jsonify({"status": "error", "message": "Invalid or expired reset code"}), 400

        user = users_settings[matching_user_id]
        if bcrypt.checkpw(new_password.encode('utf-8'), user["password"].encode('utf-8')):
            # Signup verification: Add "verified" permission
            permissions = user.get("permissions", [])
            if "verified" not in permissions:
                permissions.append("verified")
                user["permissions"] = permissions
        else:
            # Password reset: Update password
            hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            user["password"] = hashed_password

        save_users_settings(users_settings)
        if matching_user_id in current_app.config.get("reset_codes", {}):
            del current_app.config["reset_codes"][matching_user_id]

        # Generate token with updated permissions
        token = generate_token(matching_user_id, user.get("permissions", []))
        return jsonify({"status": "success", "token": token, "user_id": matching_user_id}), 200
    except Exception as e:
        print(f"Unexpected error in verify-reset-code endpoint: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@authentication_bp.route('/update-password', methods=['POST'])
@login_required(["allauth"], require_all=False)
def update_password():
    data = request.get_json()
    if not data or 'email' not in data or 'password' not in data:
        return jsonify({"status": "error", "message": "Email and password required"}), 400
    email = data["email"].strip()
    new_password = data["password"].strip()
    users_settings = load_users_settings()
    user_id = next((uid for uid, u in users_settings.items() if u["email_address"].lower() == email.lower()), None)
    if not user_id or user_id != request.user_id:
        return jsonify({"status": "error", "message": "Unauthorized"}), 403
    hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    users_settings[user_id]["password"] = hashed_password
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": f"Password updated for {email}", "user_id": user_id}), 200
blueprints/configuration.py
from flask import Blueprint, jsonify, request 
from utils.config import load_config, save_config 
from utils.auth import login_required 
 
configuration_bp = Blueprint('configuration', __name__) 
 
@configuration_bp.route('/config', methods=['GET']) 
@login_required(["admin"], require_all=True) 
def get_config(): 
    config = load_config() 
    return jsonify({"status": "success", "count": len(config), "config": config}), 200 
 
@configuration_bp.route('/config/<affiliate>', methods=['PATCH']) 
@login_required(["admin"], require_all=True) 
def replace_config(affiliate): 
    config = load_config() 
    data = request.get_json() 
    if not data or not isinstance(data, dict): 
        return jsonify({"status": "error", "message": "Invalid data"}), 400 
    config[affiliate] = data 
    save_config(config) 
    return jsonify({"status": "success", "message": f"Updated {affiliate} config"}), 200 

blueprints/data_retrieval.py
from flask import Blueprint, jsonify, request 
from utils.auth import login_required 
from utils.categories import get_all_categories, filter_categories_with_products 
from utils.products import search_all_discounted 
 
data_retrieval_bp = Blueprint('data_retrieval', __name__) 
 
@data_retrieval_bp.route('/categories', methods=['GET']) 
@login_required(["allauth"], require_all=False) 
def get_categories(): 
    parent_id = request.args.get('parent_id') 
    categories = get_all_categories(parent_id) 
    return jsonify({"status": "success", "count": len(categories), "categories": categories}), 200 
 
@data_retrieval_bp.route('/discounted-products', methods=['GET']) 
def get_all_discounted_products(): 
    category_id = request.args.get('category_id') 
    if not category_id: 
        return jsonify({"status": "error", "message": "category_id required"}), 400 
    products = search_all_discounted(category_id) 
    return jsonify({"status": "success", "count": len(products), "products": products}), 200 


blueprints/referral.py
from flask import Blueprint, jsonify, request 
from utils.users import load_users_settings, save_users_settings 
 
referral_bp = Blueprint('referral', __name__) 
 
@referral_bp.route('/referral', methods=['POST']) 
def handle_referral(): 
    data = request.get_json() 
    if not data or 'timestamp' not in data: 
        return jsonify({"status": "error", "message": "Invalid data"}), 400 
    users_settings = load_users_settings() 
    referer = data.get("referer", "none") 
    if referer not in users_settings: 
        users_settings[referer] = {"referrals": {"visits": [], "orders": []}} 
    if "page" in data: 
        users_settings[referer]["referrals"]["visits"].append({"page": data["page"], "timestamp": data["timestamp"]}) 
    elif "orderId" in data: 
        users_settings[referer]["referrals"]["orders"].append({"orderId": data["orderId"], "buyer": data["buyer"], "total": data["total"], "timestamp": data["timestamp"]}) 
    save_users_settings(users_settings) 
    return jsonify({"status": "success", "message": "Referral recorded", "referer": referer}), 200 

blueprints/role_pages.py
from flask import Blueprint, render_template, jsonify, request
from utils.auth import login_required
from utils.users import load_users_settings  # Import the function to load user data
import json
import os

role_pages_bp = Blueprint('role_pages', __name__)

# Load branding data from branding.json
def load_branding_data():
    try:
        with open(os.path.join(os.path.dirname(__file__), '..', 'branding.json'), 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        # Fallback branding data if the file doesn't exist
        print('load_branding_data - branding.json not found, using fallback data')
        return {
            "admin": "<h1>Admin Dashboard</h1>",
            "merchant": "<h1>Merchant Dashboard</h1>",
            "community": "<h1>Community Dashboard</h1>",
            "wixpro": "<h1>Partner Dashboard</h1>",
            "login": "<h1>Login</h1>",
            "signup": "<h1>Sign Up</h1>"
        }

@role_pages_bp.route('/admin', methods=['GET'])
@login_required(["admin"], require_all=True)
def admin():
    # Get the userId from the request (set by the @login_required decorator)
    user_id = request.user_id
    if not user_id:
        return jsonify({"status": "error", "message": "User ID not found in token"}), 401

    # Load user data
    users_settings = load_users_settings()
    user = users_settings.get(user_id)
    if not user:
        return jsonify({"status": "error", "message": "User not found"}), 404

    # Pass the user object to the template
    return render_template('admin.html', user=user)

@role_pages_bp.route('/community', methods=['GET'])
@login_required(["community", "admin"], require_all=False)
def community():
    user_id = request.user_id
    users_settings = load_users_settings()
    user = users_settings.get(user_id) if user_id else None
    return render_template('community.html', user=user)

@role_pages_bp.route('/merchant', methods=['GET'])
@login_required(["merchant", "admin"], require_all=False)
def merchant():
    user_id = request.user_id
    users_settings = load_users_settings()
    user = users_settings.get(user_id) if user_id else None
    return render_template('merchant.html', user=user)

@role_pages_bp.route('/partner', methods=['GET'])
@login_required(["wixpro", "admin"], require_all=False)
def wixpro():
    user_id = request.user_id
    users_settings = load_users_settings()
    user = users_settings.get(user_id) if user_id else None
    return render_template('partner.html', user=user)

@role_pages_bp.route('/branding', methods=['GET'])
@login_required(["allauth"], require_all=False)
def get_branding():
    print('GET /branding - Request received')
    
    # Get the branding type from the query parameter
    branding_type = request.args.get('type')
    if not branding_type:
        print('GET /branding - No type parameter provided')
        return jsonify({"status": "error", "message": "Branding type not specified"}), 400
    
    print('GET /branding - Requested branding type:', branding_type)

    # Load branding data
    branding_data = load_branding_data()
    
    # Get the branding content for the specified type
    branding = branding_data.get(branding_type, '<h1>Dashboard</h1>')
    
    print('GET /branding - Sending branding content for type:', branding_type, 'Content:', branding)
    return jsonify({
        "status": "success",
        "branding": branding
    }), 200
blueprints/site_request.py
from flask import Blueprint, jsonify, request
from utils.auth import login_required
from utils.data import load_site_request, save_site_request  # Keep these from utils.data
from utils.users import load_users_settings  # Import load_users_settings from utils.users
import os
import datetime
import re

site_request_bp = Blueprint('site_request', __name__)

@site_request_bp.route('/<user_id>/siterequest', methods=['POST'])
@login_required(["admin", "merchant", "community"], require_all=False)
def save_site_request_endpoint(user_id):
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400

        body_user_id = data.get("userId")
        if body_user_id and body_user_id != user_id:
            return jsonify({"status": "error", "message": "User ID in body does not match URL"}), 400

        if "admin" not in request.permissions and request.user_id != user_id:
            return jsonify({"status": "error", "message": "Unauthorized: Must be admin or match user_id"}), 403

        request_type = data.get("type", "community")
        site_request = {
            "user_id": user_id,
            "type": request_type,
            "communityName": data.get("communityName") or data.get("storeName") or "",
            "aboutCommunity": data.get("aboutCommunity") or data.get("aboutStore") or "",
            "communityLogos": data.get("communityLogos") or data.get("storeLogos") or [],
            "colorPrefs": data.get("colorPrefs", ""),
            "stylingDetails": data.get("stylingDetails", ""),
            "preferredDomain": data.get("preferredDomain", "mycommunity.org"),
            "emails": data.get("emails", []),
            "pages": data.get("pages", []),
            "widgets": data.get("widgets", []),
            "submitted_at": datetime.datetime.utcnow().isoformat()
        }

        if not site_request["communityName"]:
            return jsonify({"status": "error", "message": "Community name or store name is required"}), 400

        domain_regex = r'^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$'
        if not re.match(domain_regex, site_request["preferredDomain"]):
            return jsonify({"status": "error", "message": "Invalid domain name"}), 400

        for page in site_request["pages"]:
            if "images" in page and page["images"]:
                page["images"] = [img if isinstance(img, str) else "placeholder" for img in page["images"]]

        save_site_request(user_id, site_request)
        return jsonify({"status": "success", "message": "Site request saved successfully"}), 200

    except Exception as e:
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@site_request_bp.route('/siterequests', methods=['GET'])
@login_required(["admin", "wixpro"], require_all=False)
def list_site_requests():
    try:
        siterequest_dir = 'siterequest'
        if not os.path.exists(siterequest_dir):
            return jsonify({"status": "success", "siterequests": []}), 200

        users_settings = load_users_settings()
        siterequests = []

        for filename in os.listdir(siterequest_dir):
            if filename.endswith('.json'):
                user_id = filename.replace('.json', '')
                site_request = load_site_request(user_id)
                if site_request:
                    contact_name = users_settings.get(user_id, {}).get('contact_name', '')
                    email = users_settings.get(user_id, {}).get('email_address', '')
                    request_type = site_request.get('type', '')
                    store_name = site_request.get('storeName')
                    community_name = site_request.get('communityName')
                    organisation = store_name if store_name else community_name if community_name else ''
                    received_at = site_request.get('submitted_at', '')

                    siterequests.append({
                        'user_id': user_id,
                        'type': request_type,
                        'received_at': received_at,
                        'contact_name': contact_name,
                        'email': email,
                        'organisation': organisation
                    })

        siterequests.sort(key=lambda x: x['received_at'] or '', reverse=True)
        return jsonify({"status": "success", "siterequests": siterequests}), 200

    except Exception as e:
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500
blueprints/user_management.py
from flask import Blueprint, jsonify, request
from utils.auth import login_required
from utils.users import load_users_settings, save_users_settings  # Changed from utils.data to utils.users

# Define the user_management blueprint
user_management_bp = Blueprint('user_management', __name__)

@user_management_bp.route('/users', methods=['GET'])
@login_required(["admin"], require_all=True)
def get_users():
    """
    Retrieve a list of all users.
    """
    try:
        users_settings = load_users_settings()
        user_list = [
            {
                "USERid": user_id,
                "email_address": user.get("email_address", ""),
                "contact_name": user.get("contact_name", ""),
                "phone_number": user.get("phone_number", None)  # Add phone_number
            }
            for user_id, user in users_settings.items()
        ]
        return jsonify({"status": "success", "users": user_list}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_management_bp.route('/users/<user_id>', methods=['GET'])
@login_required(["admin"], require_all=True)
def get_user(user_id):
    """
    Retrieve details of a specific user.
    """
    try:
        users_settings = load_users_settings()
        if user_id not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        user = users_settings[user_id]
        user_data = {
            "USERid": user_id,
            "email_address": user.get("email_address", ""),
            "contact_name": user.get("contact_name", ""),
            "phone_number": user.get("phone_number", None),  # Add phone_number
            "permissions": user.get("permissions", []),
            "website_url": user.get("website_url", ""),
            "wixClientId": user.get("wixClientId", ""),
            "referrals": user.get("referrals", {"visits": [], "orders": []})
        }
        return jsonify({"status": "success", "user": user_data}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_management_bp.route('/permissions/<user_id>', methods=['GET'])
@login_required(["admin"], require_all=True)
def get_permissions(user_id):
    """
    Retrieve the permissions of a specific user.
    """
    try:
        users_settings = load_users_settings()
        if user_id not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        permissions = users_settings[user_id].get('permissions', [])
        return jsonify({"status": "success", "permissions": permissions}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_management_bp.route('/permissions/<user_id>', methods=['POST'])
@login_required(["admin"], require_all=True)
def add_permission(user_id):
    """
    Add a permission to a specific user.
    """
    data = request.get_json()
    if 'permission' not in data:
        return jsonify({"status": "error", "message": "Permission field is required"}), 400
    permission = data['permission']
    try:
        users_settings = load_users_settings()
        if user_id not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        if permission in users_settings[user_id].get('permissions', []):
            return jsonify({"status": "error", "message": "Permission already exists"}), 400
        users_settings[user_id]['permissions'].append(permission)
        save_users_settings(users_settings)
        return jsonify({"status": "success", "message": "Permission added"}), 200
    except Exception as e:
        return
blueprints/user_settings.py
from flask import Blueprint, jsonify, request
from utils.auth import login_required
from utils.users import load_users_settings, save_users_settings  # Changed from utils.data to utils.users

# Define the user_settings blueprint
user_settings_bp = Blueprint('user_settings', __name__)

@user_settings_bp.route('/<USERid>/user', methods=['GET'])
@login_required(["self", "admin"], require_all=False)
def get_user_settings(USERid):
    """
    Retrieve the settings for a specific user.
    """
    try:
        users_settings = load_users_settings()
        if USERid not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        settings = users_settings[USERid]
        return jsonify({
            "status": "success",
            "contact_name": settings.get("contact_name", ""),
            "website_url": settings.get("website_url", ""),
            "email_address": settings.get("email_address", ""),
            "phone_number": settings.get("phone_number", ""),
            "wixClientId": settings.get("wixClientId", "")
        }), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_settings_bp.route('/<USERid>/user', methods=['PUT'])
@login_required(["self", "admin"], require_all=False)
def put_user_settings(USERid):
    """
    Replace the entire settings for a specific user.
    """
    if not request.json:
        return jsonify({"status": "error", "message": "Request body must contain settings"}), 400
    settings = request.json
    required_fields = ["contact_name", "website_url", "email_address", "phone_number", "wixClientId"]
    if not all(field in settings for field in required_fields):
        return jsonify({"status": "error", "message": "Settings must include all required fields"}), 400
    try:
        users_settings = load_users_settings()
        users_settings[USERid] = settings
        save_users_settings(users_settings)
        return jsonify({
            "status": "success",
            "message": f"Settings for user {USERid} replaced",
            "settings": settings
        }), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

@user_settings_bp.route('/<USERid>/user', methods=['PATCH'])
@login_required(["self", "admin", "wixpro"], require_all=False)
def patch_user_settings(USERid):
    """
    Partially update the settings for a specific user.
    """
    if not request.json:
        return jsonify({"status": "error", "message": "Request body must contain settings"}), 400
    new_settings = request.json
    try:
        users_settings = load_users_settings()
        if USERid not in users_settings:
            return jsonify({"status": "error", "message": "User not found"}), 404
        current_settings = users_settings[USERid]
        valid_fields = ["contact_name", "website_url", "email_address", "phone_number", "wixClientId"]

        # Restrict "wixpro" users to only updating wixClientId unless they have admin or self permissions
        if "wixpro" in request.permissions and not ("admin" in request.permissions or request.user_id == USERid):
            if any(key not in ["wixClientId"] for key in new_settings.keys()):
                return jsonify({"status": "error", "message": "Wixpro can only update wixClientId"}), 403

        # Update only the provided fields
        for key in new_settings:
            if key in valid_fields:
                current_settings[key] = new_settings[key]
        users_settings[USERid] = current_settings
        save_users_settings(users_settings)
        return jsonify({
            "status": "success",
            "message": f"Settings for user {USERid} updated",
            "settings": current_settings
        }), 200
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500
blueprints/utility.py
from flask import Blueprint, jsonify, request, make_response
import markdown
import os
import requests
import re
import whois
from utils.auth import login_required  # Changed from require_permissions

utility_bp = Blueprint('utility', __name__)

@utility_bp.route('/render-md/<path:full_path>', methods=['GET'])
@login_required(["allauth"], require_all=False)  # Changed from require_permissions
def render_md(full_path):
    """
    Render Markdown files from the static folder or GitHub based on the URL path.
    Returns an HTML response using templates from static/error/<status_code>.md.
    """
    from flask import current_app as app
    try:
        # Parse the full_path, removing trailing slashes
        segments = full_path.rstrip('/').split('/')
        if not segments or segments == ['']:
            raise ValueError("Invalid path provided")

        # Determine source: static folder or GitHub
        if segments[0] == 'static':
            # Handle static file
            if len(segments) < 2:
                raise ValueError("No file path provided after 'static'")
            file_path = '/'.join(segments[1:])
            if not file_path.endswith('.md'):
                raise ValueError("Only .md files are supported")
            static_file = os.path.join(app.static_folder, file_path)
            if not os.path.isfile(static_file):
                raise FileNotFoundError("File not found in static folder")
            with open(static_file, 'r', encoding='utf-8') as f:
                md_content = f.read()
        else:
            # Handle GitHub file
            if len(segments) < 4:
                raise ValueError("Invalid GitHub path: Must provide owner/repo/branch/path")
            owner, repo, branch = segments[:3]
            path_segments = segments[3:]
            path = '/'.join(path_segments)
            if not path.endswith('.md'):
                raise ValueError("Only .md files are supported")
            url = f"https://raw.githubusercontent.com/{owner}/{repo}/{branch}/{path}"
            response = requests.get(url)
            if response.status_code != 200:
                raise FileNotFoundError(f"File not found on GitHub: {response.status_code}")
            md_content = response.text

        # Convert Markdown to HTML with table support
        html_content = markdown.markdown(md_content, extensions=['tables'])
        status_code = 200
    except ValueError as e:
        status_code = 404
        error_message = str(e)
    except FileNotFoundError as e:
        status_code = 404
        error_message = str(e)
    except requests.RequestException as e:
        status_code = 500
        error_message = "Failed to fetch from GitHub"
    except Exception as e:
        status_code = 500
        error_message = "An unexpected error occurred"

    # Load the corresponding template
    template_path = os.path.join(app.static_folder, 'error', f'{status_code}.md')
    if not os.path.exists(template_path):
        return jsonify({"status": "error", "message": f"Template for status {status_code} not found"}), 500
    with open(template_path, 'r', encoding='utf-8') as f:
        template = f.read()

    # Replace the appropriate placeholder
    if status_code == 200:
        final_html = template.replace('{content}', html_content)
    else:
        final_html = template.replace('{error_message}', error_message)

    # Create and return the response
    response = make_response(final_html, status_code)
    response.headers['Content-Type'] = 'text/html'
    return response

@utility_bp.route('/check-domain', methods=['GET'])
@login_required(["allauth"], require_all=False)  # Changed from require_permissions
def check_domain():
    """
    Check the availability of a domain name using WHOIS.
    """
    domain = request.args.get('domain')
    
    # Basic validation (matches client-side regex: /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/)
    if not domain:
        return jsonify({"error": "Please provide a domain name"}), 400
    
    if not all(c.isalnum() or c in '-.' for c in domain) or \
       '.' not in domain or \
       len(domain.split('.')[-1]) < 2:
        return jsonify({"error": "Invalid domain name (e.g., mystore.uk)"}), 400
    
    # Query WHOIS data
    try:
        w = whois.whois(domain)
        # If no registration data exists (e.g., creation_date is None), domain is available
        is_available = w.creation_date is None
        return jsonify({
            "domain": domain,
            "available": is_available
        }), 200
    except Exception as e:
        return jsonify({"error": f"Failed to check domain availability: {str(e)}"}), 500
static/styles.css
body {
    font-family: Arial, sans-serif;
    margin: 0 !important;
    padding: 0 !important;
    background-color: #f4f4f4;
    min-height: 100vh;
    display: block !important;
    align-items: initial !important;
    justify-content: initial !important;
    text-align: initial !important;
}

.layout-wrapper {
    max-width: 1200px;
    width: 100%;
    margin: 0 auto !important;
    box-sizing: border-box;
    display: block !important;
    align-items: initial !important;
    padding: 0 !important;
    margin-top: 0 !important;
}

.container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

.signup-container {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    width: 100%;
    text-align: center;
}

.header {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto !important;
    background-color: #f4f4f4;
    overflow: hidden;
    position: relative;
    box-sizing: border-box;
    padding: 0 !important;
    margin-top: 0 !important;
}

.layout-wrapper .header .header-content {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto !important;
    padding: 12px 20px; /* Updated as per previous request */
    background-color: #007BFF;
    color: white;
    border-radius: 8px;
    display: flex !important;
    flex-direction: column; /* Stack content vertically */
    align-items: flex-start; /* Align content to the left */
    justify-content: center;
    box-sizing: border-box;
    max-height: 80px; /* Limit the height of the header */
    overflow: hidden; /* Prevent content from overflowing */
}

/* Adjust margins for branding content inside header-content */
.layout-wrapper .header .header-content h1 {
    margin: 0 0 5px 0; /* Reduce margin to minimize vertical space */
    font-size: 20px; /* Slightly smaller font size */
}

.layout-wrapper .header .header-content p {
    margin: 0; /* Remove default margin */
    font-size: 14px; /* Smaller font size for tagline */
}

.main-container {
    max-width: 1200px;
    margin: 0 auto !important;
    display: flex;
    gap: 20px;
    padding: 0 20px 20px 20px;
    flex-direction: row;
}

.menu-container {
    flex: 0 0 300px;
    max-width: 300px;
    margin-top: 10px; /* Ensure a small gap below the header */
}

.content-wrapper {
    flex: 0 0 900px;
    max-width: 900px;
}

.menu {
    margin-bottom: 20px;
    text-align: left;
    margin-top: 0; /* Ensure no extra top margin */
}

.menu button {
    padding: 10px 10px 10px 10px; /* Adjusted to ensure space for caret */
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    width: 100%;
    max-width: 300px;
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    position: relative;
    padding-right: 30px; /* Ensure space for the caret */
}

.menu button:hover {
    background-color: #0056b3;
}

/* Visual feedback for open submenus */
.menu button[data-submenu][aria-expanded="true"] {
    background-color: #0056b3; /* Darker shade to indicate open state */
    border-left: 4px solid #fff; /* White border on the left for emphasis */
}

.menu button i,
.menu button .svg-icon,
.menu button .icon-group {
    margin-right: 8px;
    vertical-align: middle;
}

.menu button i::before {
    font-family: "Font Awesome 6 Free";
}

.menu button i.fas::before {
    font-weight: 900;
}

.menu button .svg-icon {
    display: inline-block;
    height: 16px;
    width: auto;
}

.menu button .svg-icon svg {
    height: 100%;
    width: auto;
    fill: white;
}

.menu button .icon-group {
    display: inline-flex;
    align-items: center;
    position: relative;
}

.menu button .icon-group .small-icon {
    font-size: 10px;
    position: absolute;
    bottom: 0;
    right: -8px;
    color: white;
}

.menu button .button-content {
    display: inline-flex;
    align-items: center;
    text-align: left;
    flex-grow: 1;
}

.menu button .caret {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: white; /* Ensure caret is visible */
    font-size: 14px; /* Match button font size */
}

.menu .btn-admin {
    background-color: #dc3545;
}

.menu .btn-admin:hover {
    background-color: #c82333;
}

.menu .btn-logoff {
    background-color: #dc3545;
}

.menu .btn-logoff:hover {
    background-color: #c82333;
}

.submenu {
    display: none;
    padding-left: 20px;
    overflow: hidden;
    transition: max-height 0.3s ease-in-out; /* Reintroduce smooth transition */
    max-height: 0; /* Start collapsed */
}

.submenu.open {
    display: block;
    max-height: 500px; /* Adjust based on content height */
}

/* Styling for submenu buttons */
.submenu button {
    padding: 8px 10px; /* Slightly smaller padding than top-level buttons */
    background-color: #6c757d; /* Gray to differentiate from top-level buttons */
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 13px; /* Slightly smaller font size */
    width: 100%;
    max-width: 280px; /* Slightly narrower to indicate hierarchy */
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    position: relative;
}

.submenu button:hover {
    background-color: #5a6268; /* Darker gray on hover */
}

/* Highlight active submenu item */
.submenu button.active {
    background-color: #28a745; /* Green to indicate active section */
    color: white;
}

.section {
    display: none;
}

.section.active {
    display: block;
}

.form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-width: 400px;
}

.form label {
    font-weight: bold;
}

.form input, .form select {
    padding: 5px;
}

.form button {
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
}

.form button:hover {
    background-color: #0056b3;
}

.signup-instructions {
    margin-top: 15px;
    font-size: 0.9em;
    color: #555;
}

.signup-instructions a {
    color: #007BFF;
    text-decoration: none;
}

.signup-instructions a:hover {
    text-decoration: underline;
}

.settings-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-width: 600px;
}

.settings-form label {
    font-weight: bold;
    margin-bottom: 5px;
}

.settings-form input, 
.settings-form textarea {
    padding: 8px;
    width: 100%;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.settings-form button {
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
    border-radius: 4px;
}

.settings-form button:hover {
    background-color: #0056b3;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

.deals-table th {
    background-color: #f2f2f2;
}

.treeview {
    max-height: 600px;
    overflow-y: auto;
    margin-bottom: 10px;
}

.treeview, .treeview ul, .treeview li {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.treeview .node {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 5px 0;
}

.treeview .toggle {
    cursor: pointer;
    width: 20px;
    text-align: center;
    font-weight: bold;
    flex-shrink: 0;
}

.treeview input[type="checkbox"] {
    width: 16px !important;
    height: 16px !important;
    margin: 0;
    flex-shrink: 0;
}

.treeview .subcategories {
    display: none;
    padding-left: 20px;
}

.treeview .subcategories.open {
    display: block;
}

#toast-container > .toast-success {
    background-color: #28a745;
    border-color: #218838;
}

#toast-container > .toast-error {
    background-color: #dc3545;
    border-color: #c82333;
}

.action-cell {
    display: flex;
    gap: 10px;
    align-items: center;
}

h2 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    width: 100%;
    max-width: 400px;
}

.form-group label {
    font-weight: bold;
    flex: 1;
    text-align: right;
    margin-bottom: 0;
}

.form-group .input-container {
    position: relative;
    width: 200px;
}

.form-group input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
    padding-right: 30px;
    font-size: 14px;
}

.form-group .toggle-password {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
}

.button-container {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}

button {
    width: 100%;
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    max-width: 200px;
}

button:hover {
    background-color: #0056b3;
}

.toggle-link {
    text-align: center;
    margin-top: 15px;
}

.toggle-link a {
    color: #007BFF;
    text-decoration: none;
    cursor: pointer;
}

.toggle-link a:hover {
    text-decoration: underline;
}

.hidden {
    display: none;
}

.toggle-section {
    cursor: pointer;
    font-weight: bold;
    margin: 10px 0;
    background-color: #e9ecef;
    padding: 5px;
    border-radius: 4px;
}

.toggle-content {
    display: none;
}

.toggle-content.open {
    display: block;
}

.page-section, .email-section {
    margin-top: 10px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.email-section {
    margin-top: 10px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.widget-checkboxes div {
    margin-bottom: 10px;
}

.remove-page-btn, .remove-email-btn {
    padding: 5px 10px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
}

.remove-page-btn:hover, .remove-email-btn:hover {
    background-color: #c82333;
}

.password-container {
    position: relative;
    display: flex;
    flex-direction: column;
    margin-bottom: 15px;
    justify-content: flex-end;
    align-items: center;
}

.password-container input {
    padding: 8px 30px 8px 8px;
    width: 50%;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 65%;
    transform: translateY(-50%);
    cursor: pointer;
}

#my-store .settings-form {
    max-width: 600px;
}

#my-store .email-section input[type="text"] {
    width: 50%;
}

#my-store .widget-checkboxes input[type="checkbox"] {
    width: 10px;
}

h1 {
    font-size: 24px;
    margin-bottom: 20px;
    color: #333;
}

.options {
    display: flex;
    gap: 5px;
    justify-content: center;
    margin-bottom: 30px;
}

.option {
    text-align: center;
    cursor: pointer;
    padding: 10px;
    transition: border 0.3s ease;
}

.option.selected {
    border: 3px solid #007BFF;
    border-radius: 5px;
}

.option img {
    object-fit: cover;
    border-radius: 5px;
}

.option span {
    display: block;
    margin-top: 10px;
    font-size: 16px;
    color: #333;
}

.option input[type="radio"] {
    display: none;
}

.form-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    margin-right: 100px;
}

/* Loading Overlay */
#loadingOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 1);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

/* Multicircle Loader Container */
.multicircle-loader {
    position: relative;
    width: 100px;
    height: 100px;
}

/* Circle Styles */
.multicircle-loader .circle {
    position: absolute;
    border-radius: 50%;
    border: 4px solid transparent;
    animation: spin 1.5s linear infinite;
}

/* Individual Circle Variations */
.circle1 {
    width: 60px;
    height: 60px;
    border-top-color: #ff6f61;
    top: 20px;
    left: 20px;
    animation-delay: 0s;
}

.circle2 {
    width: 45px;
    height: 45px;
    border-top-color: #6bff61;
    top: 27.5px;
    left: 27.5px;
    animation-delay: 0.3s;
}

.circle3 {
    width: 30px;
    height: 30px;
    border-top-color: #61cfff;
    top: 35px;
    left: 35px;
    animation-delay: 0.6s;
}

.circle4 {
    width: 15px;
    height: 15px;
    border-top-color: #ff61ff;
    top: 42.5px;
    left: 42.5px;
    animation-delay: 0.9s;
}

/* Spin Animation */
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Login page specific styles */
.login-page {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    padding: 20px;
}

.login-page .container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

.login-page h2 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

.login-page .form-group {
    margin-bottom: 15px;
    transform: translateX(-40px);
}

.login-page .form-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 0;
    max-width: 70px; /* Reduced width to shift labels left */
}

.login-page input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
}

.login-page button {
    width: 100%;
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
}

.login-page button:hover {
    background-color: #0056b3;
}

.login-page .toggle-link {
    text-align: center;
    margin-top: 15px;
}

.login-page .toggle-link a {
    color: #007BFF;
    text-decoration: none;
    cursor: pointer;
}

.login-page .toggle-link a:hover {
    text-decoration: underline;
}

.login-page #toast-container > .toast-success {
    background-color: #28a745;
    border-color: #218838;
}

.login-page #toast-container > .toast-error {
    background-color: #dc3545;
    border-color: #c82333;
}

.login-page .custom-login-notice {
    background-color: #f0e68c;
    border: 2px dashed #4682b4;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.2);
    font-family: 'Courier New', Courier, monospace;
    color: #2f4f4f;
    transition: transform 0.3s ease-in-out;
    margin-bottom: 30px; /* Increased gap between notice and email field */
}

.login-page .custom-login-notice .highlight {
    color: #007BFF; /* Match the blue of the toggle links */
    font-weight: bold;
}

.login-page .custom-login-notice:hover {
    transform: scale(1.02);
}

/* New styles for "My Account" section */
.settings-form {
    max-width: 400px;
    margin: 20px auto;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.settings-form label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #333;
}

.settings-form input[type="text"],
.settings-form input[type="url"],
.settings-form input[type="email"],
.settings-form input[type="password"] {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

.settings-form button {
    background-color: #007BFF;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
}

.settings-form button:hover {
    background-color: #0056b3;
}

.password-container {
    position: relative;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
    font-size: 16px;
}

.password-toggle:hover {
    color: #007BFF;
}

.settings-form button i {
    margin-right: 5px;
}
static/error/200.md
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Rendered Markdown</title>
    <style>
        table { border-collapse: collapse; width: 100%; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    {content}
</body>
</html>
static/error/403.md
# 403 - Forbidden

We're sorry, but you do not have permission to access this resource.

**Details:**
- {error_message}

Please contact support if you believe this is an error.
static/error/404.md
# 404 - Not Found

We're sorry, but the requested resource could not be found.

**Details:**
- {error_message}

Please check the URL or try again later.
static/error/500.md
# 500 - Internal Server Error

We're sorry, but an unexpected error occurred while processing your request.

**Details:**
- {error_message}

Our team has been notified. Please try again later.
static/js/admin-page.js

// admin-page.js
// Purpose: Manages page-specific functionality for the /admin page.

// Define the global initialize function expected by waitForInitialize
window.initialize = function(pageType) {
    console.log('window.initialize - Initializing page - Page Type:', pageType);
    if (pageType === 'admin') {
        initializeAdmin();
    } else {
        console.warn('window.initialize - Unsupported page type:', pageType);
    }
};

// Initializes the admin page with permission checks.
function initializeAdmin() {
    console.log('initializeAdmin - Initializing admin page');
    const token = localStorage.getItem('authToken');
    if (!token) {
        console.error('initializeAdmin - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeAdmin - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: Admin permission required');
        console.error('initializeAdmin - No admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    loadBranding(); // From site-navigation.js
    restoreState(); // From page-load.js
    initializeNavigation(); // Add this to set up navigation event listeners
    console.log('initializeAdmin - Admin page initialized successfully');
}

// Updates affiliate program credentials.
async function updateAffiliate(affiliate) {
    console.log('updateAffiliate - Updating affiliate - Affiliate:', affiliate);
    let credentials = {};
    if (affiliate === 'amazon_uk') {
        credentials = {
            ACCESS_KEY: document.getElementById('amazonAccessKey').value.trim(),
            SECRET_KEY: document.getElementById('amazonSecretKey').value.trim(),
            ASSOCIATE_TAG: document.getElementById('amazonAssociateTag').value.trim(),
            COUNTRY: document.getElementById('amazonCountry').value.trim()
        };
    } else if (affiliate === 'ebay_uk') {
        credentials = { APP_ID: document.getElementById('ebayAppId').value.trim() };
    } else if (affiliate === 'awin') {
        credentials = { API_TOKEN: document.getElementById('awinApiToken').value.trim() };
    } else if (affiliate === 'cj') {
        credentials = {
            API_KEY: document.getElementById('cjApiKey').value.trim(),
            WEBSITE_ID: document.getElementById('cjWebsiteId').value.trim()
        };
    } else if (affiliate === 'textmagic') {
        credentials = {
            USERNAME: document.getElementById('textmagicUsername').value.trim(),
            API_KEY: document.getElementById('textmagicApiKey').value.trim()
        };
    } else if (affiliate === 'tiny') {
        credentials = { API_KEY: document.getElementById('tinyApiKey').value.trim() };
    }

    credentials = Object.fromEntries(Object.entries(credentials).filter(([_, v]) => v !== ''));
    if (Object.keys(credentials).length === 0) {
        console.warn('updateAffiliate - No changes to update');
        toastr.warning('No changes to update');
        return;
    }

    try {
        console.log('updateAffiliate - Sending update - URL:', `${window.apiUrl}/config/${affiliate}`);
        const response = await authenticatedFetch(`${window.apiUrl}/config/${affiliate}`, {
            method: 'PATCH',
            body: JSON.stringify(credentials)
        });
        if (!response.ok) throw new Error(`Failed to update: ${response.status}`);
        const data = await response.json();
        console.log('updateAffiliate - Update successful - Response:', JSON.stringify(data));
        toastr.success(`Update successful: ${data.message}`);
    } catch (error) {
        console.error('updateAffiliate - Error updating affiliate - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error updating credentials: ${error.message}`);
    }
}

// Submits referral form data (page visits or orders).
async function submitReferral(formId, successMessage) {
    console.log('submitReferral - Setting up referral submission - Form ID:', formId);
    const form = document.getElementById(formId);
    if (form.dataset.listenerAdded) return;
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('submitReferral - Form submitted - Form ID:', formId);
        const formData = new FormData(form);
        const jsonData = Object.fromEntries(formData.entries());
        try {
            console.log('submitReferral - Sending referral data - URL:', `${window.apiUrl}/referal`);
            const response = await authenticatedFetch(`${window.apiUrl}/referal`, {
                method: 'POST',
                body: JSON.stringify(jsonData),
            });
            if (!response.ok) throw new Error((await response.json()).message || 'Unknown error');
            const data = await response.json();
            if (data.status === 'success') {
                console.log('submitReferral - Referral recorded - Referer:', data.referer);
                toastr.success(`${successMessage} - Referer: ${data.referer}`);
            } else {
                throw new Error(data.message || 'Unknown error');
            }
        } catch (error) {
            console.error('submitReferral - Error submitting referral - Error:', error.message, 'Stack:', error.stack);
            toastr.error(error.message || 'Failed to connect to server');
        }
    });
    form.dataset.listenerAdded = 'true';
    console.log('submitReferral - Listener added - Form ID:', formId);
}

// Populates the referer dropdown with community users.
async function populateRefererDropdown(selectId) {
    console.log('populateRefererDropdown - Populating dropdown - Select ID:', selectId);
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('populateRefererDropdown - Users fetched - Count:', users.length);

        const communityUsers = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('community') && !permissions.includes('admin')) {
                communityUsers.push({ USERid: user.USERid, contact_name: user.contact_name });
            }
        }
        console.log('populateRefererDropdown - Community users filtered - Count:', communityUsers.length);

        const select = document.getElementById(selectId);
        select.innerHTML = '';
        communityUsers.forEach(user => {
            const option = document.createElement('option');
            option.value = user.USERid;
            option.text = user.contact_name;
            select.appendChild(option);
        });
        if (communityUsers.length === 0) {
            select.innerHTML = '<option value="">No community users found</option>';
        }
        console.log('populateRefererDropdown - Dropdown populated - Select ID:', selectId);
    } catch (error) {
        console.error('populateRefererDropdown - Error loading referer options - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading referer options: ${error.message}`);
        document.getElementById(selectId).innerHTML = '<option value="">Error loading users</option>';
    }
}

// Loads and displays merchant users.
async function loadMerchants() {
    console.log('loadMerchants - Loading merchants');
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('loadMerchants - Users fetched - Count:', users.length);

        const merchants = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('merchant') && !permissions.includes('admin')) {
                merchants.push({
                    USERid: user.USERid,
                    contact_name: user.contact_name,
                    email_address: user.email_address,
                    phone_number: user.phone_number,
                    permissions
                });
            }
        }
        console.log('loadMerchants - Merchants filtered - Count:', merchants.length);

        updateUserTable('merchantsList', merchants, 'merchants');
        toastr.success('Merchants loaded successfully');
    } catch (error) {
        console.error('loadMerchants - Error loading merchants - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading merchants: ${error.message}`);
    }
}

// Loads and displays community users.
async function loadCommunities() {
    console.log('loadCommunities - Loading communities');
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('loadCommunities - Users fetched - Count:', users.length);

        const communities = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('community') && !permissions.includes('admin')) {
                communities.push({
                    USERid: user.USERid,
                    contact_name: user.contact_name,
                    email_address: user.email_address,
                    phone_number: user.phone_number,
                    permissions
                });
            }
        }
        console.log('loadCommunities - Communities filtered - Count:', communities.length);

        updateUserTable('communitiesList', communities, 'communities');
        toastr.success('Communities loaded successfully');
    } catch (error) {
        console.error('loadCommunities - Error loading communities - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading communities: ${error.message}`);
    }
}

// Loads and displays partner users.
async function loadPartners() {
    console.log('loadPartners - Loading partners');
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('loadPartners - Users fetched - Count:', users.length);

        const partners = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('wixpro')) {
                partners.push({
                    USERid: user.USERid,
                    contact_name: user.contact_name,
                    email_address: user.email_address,
                    phone_number: user.phone_number,
                    permissions
                });
            }
        }
        console.log('loadPartners - Partners filtered - Count:', partners.length);

        updateUserTable('partnersList', partners, 'partners');
        toastr.success('Partners loaded successfully');
    } catch (error) {
        console.error('loadPartners - Error loading partners - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading partners: ${error.message}`);
    }
}

// Updates the user table for merchants, communities, or partners.
function updateUserTable(tableId, users, section) {
    console.log('updateUserTable - Updating table - Table ID:', tableId, 'Section:', section, 'User count:', users.length);
    const tbody = document.getElementById(tableId);
    tbody.innerHTML = '';
    if (users.length === 0) {
        const colspan = 5;
        tbody.innerHTML = `<tr><td colspan="${colspan}">No users found</td></tr>`;
        console.log('updateUserTable - No users found - Table ID:', tableId);
        return;
    }

    users.forEach(user => {
        const row = document.createElement('tr');
        let actionsHtml = '';

        if (section === 'partners') {
            const hasAdmin = user.permissions.includes('admin');
            actionsHtml += `
                <i class="${hasAdmin ? 'fas' : 'far'} fa-user-shield" 
                   title="Grants administrative access to the platform" 
                   style="${hasAdmin ? '' : 'color: #ccc;'} cursor: pointer;" 
                   onclick="togglePermission('${user.USERid}', 'admin', '${section}', ${!hasAdmin})"></i>
            `;
        }

        if (section === 'partners') {
            const hasMerchant = user.permissions.includes('merchant');
            actionsHtml += `
                <i class="${hasMerchant ? 'fas' : 'far'} fa-store" 
                   title="Allows managing merchant-specific features" 
                   style="${hasMerchant ? '' : 'color: #ccc;'} cursor: pointer;" 
                   onclick="togglePermission('${user.USERid}', 'merchant', '${section}', ${!hasMerchant})"></i>
            `;
        }

        const hasValidated = user.permissions.includes('validated');
        if (section === 'communities') {
            actionsHtml += `
                <i class="${hasValidated ? 'fas' : 'far'} fa-check-circle" 
                   title="Confirms user validation status" 
                   style="${hasValidated ? '' : 'color: #ccc;'}"></i>
            `;
        } else {
            actionsHtml += `
                <i class="${hasValidated ? 'fas' : 'far'} fa-check-circle" 
                   title="Confirms user validation status" 
                   style="${hasValidated ? '' : 'color: #ccc;'} cursor: pointer;" 
                   onclick="togglePermission('${user.USERid}', 'validated', '${section}', ${!hasValidated})"></i>
            `;
        }

        const hasDebug = user.permissions.includes('debug');
        actionsHtml += `
            <i class="${hasDebug ? 'fas' : 'far'} fa-bug" 
               title="Allows access to debugging tools" 
               style="${hasDebug ? '' : 'color: #ccc;'} cursor: pointer;" 
               onclick="togglePermission('${user.USERid}', 'debug', '${section}', ${!hasDebug})"></i>
        `;

        const phoneNumber = user.phone_number || 'N/A';

        row.innerHTML = `
            <td>${user.USERid}</td>
            <td>${user.contact_name}</td>
            <td>${user.email_address}</td>
            <td>${phoneNumber}</td>
            <td class="action-cell">${actionsHtml}</td>
        `;
        tbody.appendChild(row);
    });

    console.log('updateUserTable - Table updated - Table ID:', tableId);
}

// Toggles a user’s permission status.
async function togglePermission(userId, permission, section, isChecked) {
    console.log('togglePermission - Toggling permission - User ID:', userId, 'Permission:', permission, 'Section:', section, 'Checked:', isChecked);
    try {
        const method = isChecked ? 'POST' : 'DELETE';
        const response = await authenticatedFetch(`${window.apiUrl}/permissions/${userId}`, {
            method: method,
            body: JSON.stringify({ permission })
        });
        if (!response.ok) throw new Error(`Failed to ${isChecked ? 'add' : 'remove'} permission: ${response.status}`);
        const data = await response.json();
        console.log('togglePermission - Permission toggled - Response:', JSON.stringify(data));
        toastr.success(data.message || `${isChecked ? 'Added' : 'Removed'} ${permission} permission for user ${userId}`);
        loadSection(section);
    } catch (error) {
        console.error('togglePermission - Error toggling permission - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error: ${error.message}`);
        loadSection(section);
    }
}

// Creates a deal row for discounted products (admin-specific).
function createDealRow(product) {
    console.log('createDealRow - Creating deal row - Product:', JSON.stringify(product));
    const tr = document.createElement('tr');
    const discountPercent = product.discount_percent || 
        (product.original_price > product.current_price 
            ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
            : 'N/A');
    tr.innerHTML = `
        <td>${product.category || 'N/A'}</td>
        <td>${product.title}</td>
        <td><a href="${product.product_url}" target="_blank">Link</a></td>
        <td>${product.current_price}</td>
        <td>${product.original_price}</td>
        <td>${discountPercent}</td>
        <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
        <td>${product.QTY || 'N/A'}</td>
    `;
    console.log('createDealRow - Deal row created - Product ID:', product.id || 'N/A');
    return tr;
}

// Restores the state of the page (stubbed for now)
function restoreState() {
    console.log('restoreState - Restoring page state (stub)');
}
static/js/category-management.js
// category-management.js
// Purpose: Manages treeview functionality for displaying and editing nested category information (used in community.html and admin.html).

// Creates a treeview node for category display with configurable behavior.
function createTreeNode(category, level = 0, isAdmin = false, savedCategories = []) {
    console.log('createTreeNode - Creating node - Category:', JSON.stringify(category), 'Level:', level, 'IsAdmin:', isAdmin);
    const li = document.createElement('li');
    const nodeDiv = document.createElement('div');
    nodeDiv.className = 'node';

    const toggle = document.createElement('span');
    toggle.className = 'toggle';
    toggle.setAttribute('data-id', category.id);
    toggle.textContent = '+'; // Default to '+' assuming subcategories may exist
    toggle.addEventListener('click', () => toggleSubcategories(category.id, toggle));

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = category.id;
    if (isAdmin) {
        checkbox.addEventListener('change', () => handleCategorySelection(category.id, checkbox));
    } else {
        checkbox.checked = savedCategories.includes(category.id.toString());
    }

    const span = document.createElement('span');
    span.textContent = `${category.name} (${category.id})`;

    nodeDiv.appendChild(toggle);
    nodeDiv.appendChild(checkbox);
    nodeDiv.appendChild(span);
    li.appendChild(nodeDiv);

    const subUl = document.createElement('ul');
    subUl.className = 'subcategories';
    li.appendChild(subUl);

    console.log('createTreeNode - Node created - Category ID:', category.id);
    return li;
}

// Loads category data for treeview rendering, with options for admin or community context.
async function loadCategories(userId = null, isAdmin = false) {
    console.log('loadCategories - Starting category load - UserID:', userId, 'IsAdmin:', isAdmin);
    let savedCategories = [];
    try {
        console.log('loadCategories - Fetching categories via authenticatedFetch');
        const startTime = Date.now();

        // Load user's saved categories if not admin
        if (!isAdmin && userId) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`);
            if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
            const userData = await userResponse.json();
            savedCategories = userData.categories || [];
            console.log('loadCategories - Saved categories fetched - Count:', savedCategories.length);
        }

        // Load all categories
        const response = await authenticatedFetch(`${window.apiUrl}/categories`);
        if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
        const data = await response.json();
        const duration = Date.now() - startTime;
        console.log('loadCategories - Categories fetched - Count:', data.categories?.length, 'Duration:', `${duration}ms`);

        const treeElement = document.getElementById('categoryTree');
        if (!treeElement) {
            console.error('loadCategories - Tree element not found - ID: categoryTree');
            return;
        }
        treeElement.innerHTML = '';
        const ul = document.createElement('ul');

        // Filter top-level categories for community, show all for admin
        const categoriesToRender = isAdmin ? data.categories : data.categories.filter(cat => !cat.parent_id);
        console.log('loadCategories - Categories to render - Count:', categoriesToRender.length);

        categoriesToRender.forEach(category => {
            const node = createTreeNode(category, 0, isAdmin, savedCategories);
            ul.appendChild(node);
        });
        treeElement.appendChild(ul);

        // Reattach listeners for community context
        if (!isAdmin) attachEventListeners();

        console.log('loadCategories - Treeview rendered successfully');
        toastr.success('Categories loaded successfully');
    } catch (error) {
        console.error('loadCategories - Error loading categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to load categories');
    }
    console.log('loadCategories - Category load completed');
}

// Toggles visibility of subcategories in treeview and loads them dynamically if needed.
async function toggleSubcategories(categoryId, toggle) {
    console.log('toggleSubcategories - Toggling subcategories - Category ID:', categoryId);
    const li = toggle.closest('li');
    const subUl = li.querySelector('.subcategories');

    if (!subUl) {
        console.error('toggleSubcategories - Subcategories element not found - Category ID:', categoryId);
        return;
    }

    if (subUl.classList.contains('open')) {
        subUl.classList.remove('open');
        toggle.textContent = '+';
        console.log('toggleSubcategories - Subcategories closed - ID:', categoryId);
    } else {
        if (subUl.children.length === 0) {
            try {
                console.log('toggleSubcategories - Fetching subcategories - Parent ID:', categoryId);
                const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${categoryId}`);
                if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                const data = await response.json();

                if (data.categories && data.categories.length > 0) {
                    data.categories.forEach(cat => {
                        const node = createTreeNode(cat, 1); // Level 1 for subcategories
                        subUl.appendChild(node);
                    });
                    console.log('toggleSubcategories - Subcategories loaded - Count:', data.categories.length, 'Parent ID:', categoryId);
                    toastr.success(`Subcategories for ${categoryId} loaded successfully`);
                } else {
                    toggle.textContent = ' '; // No subcategories
                    console.log('toggleSubcategories - No subcategories found - Parent ID:', categoryId);
                    toastr.info(`No subcategories for ${categoryId}`);
                    return;
                }
            } catch (error) {
                console.error('toggleSubcategories - Error loading subcategories - Error:', error.message, 'Stack:', error.stack);
                toastr.error(`Error loading subcategories: ${error.message}`);
                toggle.textContent = ' ';
                return;
            }
        }
        subUl.classList.add('open');
        toggle.textContent = '-';
        console.log('toggleSubcategories - Subcategories opened - ID:', categoryId);
    }
    console.log('toggleSubcategories - Toggle completed');
}

// Saves updated category structure from treeview (community context).
async function saveCategories(userId) {
    console.log('saveCategories - Starting category save - UserID:', userId);
    if (!userId) {
        console.error('saveCategories - User ID not provided');
        toastr.error('User ID not found in session');
        return;
    }

    const checkedCategories = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
    console.log('saveCategories - Checked categories - Count:', checkedCategories.length, 'Values:', checkedCategories);

    try {
        console.log('saveCategories - Sending categories via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/mycategories`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`, {
            method: 'PUT',
            body: JSON.stringify({ categories: checkedCategories })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveCategories - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save categories: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveCategories - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Categories saved successfully');
    } catch (error) {
        console.error('saveCategories - Error saving categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save categories: ${error.message}`);
    }
    console.log('saveCategories - Save process completed');
}

// Handles category selection in admin context to load discounted products.
async function handleCategorySelection(categoryId, checkbox) {
    console.log('handleCategorySelection - Handling selection - Category ID:', categoryId, 'Checked:', checkbox.checked);
    document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
        if (cb !== checkbox) cb.checked = false;
    });

    const tbody = document.getElementById('dealList');
    if (!tbody) {
        console.error('handleCategorySelection - Deal list element not found - ID: dealList');
        return;
    }

    if (checkbox.checked) {
        try {
            console.log('handleCategorySelection - Fetching discounted products - Category ID:', categoryId);
            const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
            if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
            const data = await response.json();

            tbody.innerHTML = '';
            data.products.forEach(product => {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                tbody.appendChild(tr);
            });
            console.log('handleCategorySelection - Products loaded - Count:', data.products.length);
            toastr.success(`Loaded ${data.products.length} discounted products for category ${categoryId}`);
        } catch (error) {
            console.error('handleCategorySelection - Error loading products - Error:', error.message, 'Stack:', error.stack);
            toastr.error(`Error loading discounted products: ${error.message}`);
            checkbox.checked = false;
            tbody.innerHTML = '';
        }
    } else {
        tbody.innerHTML = '';
        console.log('handleCategorySelection - Cleared deal list - Category deselected');
    }
    console.log('handleCategorySelection - Selection handling completed');
}// category-management.js
// Purpose: Manages treeview functionality for displaying and editing nested category information (used in community.html and admin.html).

// Creates a treeview node for category display with configurable behavior.
function createTreeNode(category, level = 0, isAdmin = false, savedCategories = []) {
    console.log('createTreeNode - Creating node - Category:', JSON.stringify(category), 'Level:', level, 'IsAdmin:', isAdmin);
    const li = document.createElement('li');
    const nodeDiv = document.createElement('div');
    nodeDiv.className = 'node';

    const toggle = document.createElement('span');
    toggle.className = 'toggle';
    toggle.setAttribute('data-id', category.id);
    toggle.textContent = '+'; // Default to '+' assuming subcategories may exist
    toggle.addEventListener('click', () => toggleSubcategories(category.id, toggle));

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = category.id;
    if (isAdmin) {
        checkbox.addEventListener('change', () => handleCategorySelection(category.id, checkbox));
    } else {
        checkbox.checked = savedCategories.includes(category.id.toString());
    }

    const span = document.createElement('span');
    span.textContent = `${category.name} (${category.id})`;

    nodeDiv.appendChild(toggle);
    nodeDiv.appendChild(checkbox);
    nodeDiv.appendChild(span);
    li.appendChild(nodeDiv);

    const subUl = document.createElement('ul');
    subUl.className = 'subcategories';
    li.appendChild(subUl);

    console.log('createTreeNode - Node created - Category ID:', category.id);
    return li;
}

// Loads category data for treeview rendering, with options for admin or community context.
async function loadCategories(userId = null, isAdmin = false) {
    console.log('loadCategories - Starting category load - UserID:', userId, 'IsAdmin:', isAdmin);
    let savedCategories = [];
    try {
        console.log('loadCategories - Fetching categories via authenticatedFetch');
        const startTime = Date.now();

        // Load user's saved categories if not admin
        if (!isAdmin && userId) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`);
            if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
            const userData = await userResponse.json();
            savedCategories = userData.categories || [];
            console.log('loadCategories - Saved categories fetched - Count:', savedCategories.length);
        }

        // Load all categories
        const response = await authenticatedFetch(`${window.apiUrl}/categories`);
        if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
        const data = await response.json();
        const duration = Date.now() - startTime;
        console.log('loadCategories - Categories fetched - Count:', data.categories?.length, 'Duration:', `${duration}ms`);

        const treeElement = document.getElementById('categoryTree');
        if (!treeElement) {
            console.error('loadCategories - Tree element not found - ID: categoryTree');
            return;
        }
        treeElement.innerHTML = '';
        const ul = document.createElement('ul');

        // Filter top-level categories for community, show all for admin
        const categoriesToRender = isAdmin ? data.categories : data.categories.filter(cat => !cat.parent_id);
        console.log('loadCategories - Categories to render - Count:', categoriesToRender.length);

        categoriesToRender.forEach(category => {
            const node = createTreeNode(category, 0, isAdmin, savedCategories);
            ul.appendChild(node);
        });
        treeElement.appendChild(ul);

        // Reattach listeners for community context
        if (!isAdmin) attachEventListeners();

        console.log('loadCategories - Treeview rendered successfully');
        toastr.success('Categories loaded successfully');
    } catch (error) {
        console.error('loadCategories - Error loading categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to load categories');
    }
    console.log('loadCategories - Category load completed');
}

// Toggles visibility of subcategories in treeview and loads them dynamically if needed.
async function toggleSubcategories(categoryId, toggle) {
    console.log('toggleSubcategories - Toggling subcategories - Category ID:', categoryId);
    const li = toggle.closest('li');
    const subUl = li.querySelector('.subcategories');

    if (!subUl) {
        console.error('toggleSubcategories - Subcategories element not found - Category ID:', categoryId);
        return;
    }

    if (subUl.classList.contains('open')) {
        subUl.classList.remove('open');
        toggle.textContent = '+';
        console.log('toggleSubcategories - Subcategories closed - ID:', categoryId);
    } else {
        if (subUl.children.length === 0) {
            try {
                console.log('toggleSubcategories - Fetching subcategories - Parent ID:', categoryId);
                const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${categoryId}`);
                if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                const data = await response.json();

                if (data.categories && data.categories.length > 0) {
                    data.categories.forEach(cat => {
                        const node = createTreeNode(cat, 1); // Level 1 for subcategories
                        subUl.appendChild(node);
                    });
                    console.log('toggleSubcategories - Subcategories loaded - Count:', data.categories.length, 'Parent ID:', categoryId);
                    toastr.success(`Subcategories for ${categoryId} loaded successfully`);
                } else {
                    toggle.textContent = ' '; // No subcategories
                    console.log('toggleSubcategories - No subcategories found - Parent ID:', categoryId);
                    toastr.info(`No subcategories for ${categoryId}`);
                    return;
                }
            } catch (error) {
                console.error('toggleSubcategories - Error loading subcategories - Error:', error.message, 'Stack:', error.stack);
                toastr.error(`Error loading subcategories: ${error.message}`);
                toggle.textContent = ' ';
                return;
            }
        }
        subUl.classList.add('open');
        toggle.textContent = '-';
        console.log('toggleSubcategories - Subcategories opened - ID:', categoryId);
    }
    console.log('toggleSubcategories - Toggle completed');
}

// Saves updated category structure from treeview (community context).
async function saveCategories(userId) {
    console.log('saveCategories - Starting category save - UserID:', userId);
    if (!userId) {
        console.error('saveCategories - User ID not provided');
        toastr.error('User ID not found in session');
        return;
    }

    const checkedCategories = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
    console.log('saveCategories - Checked categories - Count:', checkedCategories.length, 'Values:', checkedCategories);

    try {
        console.log('saveCategories - Sending categories via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/mycategories`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`, {
            method: 'PUT',
            body: JSON.stringify({ categories: checkedCategories })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveCategories - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save categories: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveCategories - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Categories saved successfully');
    } catch (error) {
        console.error('saveCategories - Error saving categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save categories: ${error.message}`);
    }
    console.log('saveCategories - Save process completed');
}

// Handles category selection in admin context to load discounted products.
async function handleCategorySelection(categoryId, checkbox) {
    console.log('handleCategorySelection - Handling selection - Category ID:', categoryId, 'Checked:', checkbox.checked);
    document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
        if (cb !== checkbox) cb.checked = false;
    });

    const tbody = document.getElementById('dealList');
    if (!tbody) {
        console.error('handleCategorySelection - Deal list element not found - ID: dealList');
        return;
    }

    if (checkbox.checked) {
        try {
            console.log('handleCategorySelection - Fetching discounted products - Category ID:', categoryId);
            const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
            if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
            const data = await response.json();

            tbody.innerHTML = '';
            data.products.forEach(product => {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                tbody.appendChild(tr);
            });
            console.log('handleCategorySelection - Products loaded - Count:', data.products.length);
            toastr.success(`Loaded ${data.products.length} discounted products for category ${categoryId}`);
        } catch (error) {
            console.error('handleCategorySelection - Error loading products - Error:', error.message, 'Stack:', error.stack);
            toastr.error(`Error loading discounted products: ${error.message}`);
            checkbox.checked = false;
            tbody.innerHTML = '';
        }
    } else {
        tbody.innerHTML = '';
        console.log('handleCategorySelection - Cleared deal list - Category deselected');
    }
    console.log('handleCategorySelection - Selection handling completed');
}
static/js/common.js
// common.js
// Purpose: Provides core shared utilities for all pages, specifically Toastr configuration.

// Configures Toastr for consistent toast notifications across the application.
function setupToastr() {
    console.log('setupToastr - Initiating Toastr configuration');
    toastr.options = {
        closeButton: true,
        progressBar: true,
        positionClass: 'toast-top-right',
        timeOut: 5000,
        showMethod: 'slideDown',
        hideMethod: 'slideUp'
    };
    console.log('setupToastr - Toastr options configured:', JSON.stringify(toastr.options));
    console.log('setupToastr - Configuration completed');
}
static/js/community-page.js
// community-page.js
// Purpose: Manages page-specific functionality for the /community page.

// Initializes the community page with permission checks.
function initializeCommunity() {
    console.log('initializeCommunity - Initializing community page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializeCommunity - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeCommunity - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('admin') || window.userPermissions.includes('community')) {
        toastr.error('Permission denied: Community permission required');
        console.error('initializeCommunity - No community permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    if (!userId) {
        toastr.error('User ID not found in session, redirecting to login');
        console.error('initializeCommunity - No userId found in localStorage');
        window.location.href = '/';
        return;
    }
    document.getElementById('userId').value = userId;
    updateMenu();
    loadBranding();
    showSection('welcome');
    waitForTinyMCE(initializeTinyMCE);
    attachEventListeners();
    console.log('initializeCommunity - Community page initialized successfully');
}

// Updates the menu dynamically based on permissions.
function updateMenu() {
    console.log('updateMenu - Updating menu');
    const menu = document.getElementById('menu');
    const userId = document.getElementById('userId').value;
    menu.innerHTML = `<input type="text" id="userId" style="display: none;" value="${userId || ''}">`;
    menu.innerHTML += `
        <button data-submenu="my_website" data-section="my_website_intro">My Web Site <i class="fas fa-caret-down"></i></button>
        <div id="my_website" class="submenu">
            <button data-section="wix">Wix</button>
            <button data-section="wordpress">WordPress</button>
            <button data-section="squarespace">Squarespace</button>
            <button data-section="weebly">Weebly</button>
            <button data-section="joomla">Joomla</button>
            <button data-section="no_website">I Don’t Have a Website Yet</button>
        </div>
        <button data-section="categories">My Categories</button>
        <button data-submenu="referrals" data-section="referrals_intro">My Referrals <i class="fas fa-caret-down"></i></button>
        <div id="referrals" class="submenu">
            <button data-section="visits">Visits</button>
            <button data-section="orders">Orders</button>
        </div>
        <button data-section="settings">My Account</button>
    `;
    if (window.userPermissions.includes('admin')) {
        menu.innerHTML += '<button data-href="/admin" class="btn-admin">Back to Admin</button>';
    }
    menu.innerHTML += '<button id="logOffBtn" class="btn-logoff">Log Off</button>';
    console.log('updateMenu - Menu updated');
}

// Updates integration code for web platforms.
function updateIntegrationCode(section) {
    console.log('updateIntegrationCode - Updating integration code - Section:', section);
    const codeElements = {
        'wix': 'wixCode',
        'wordpress': 'wordpressCode',
        'squarespace': 'squarespaceCode',
        'weebly': 'weeblyCode',
        'joomla': 'joomlaCode'
    };
    const codeId = codeElements[section];
    const userId = document.getElementById('userId').value;
    if (codeId) {
        const codeElement = document.getElementById(codeId);
        if (codeElement) {
            codeElement.textContent = `<iframe src="https://clubmadeira.io/discounts?referrer=${userId || 'unknown'}" width="100%" height="600"></iframe>`;
            console.log('updateIntegrationCode - Code updated - ID:', codeId);
        } else {
            console.warn('updateIntegrationCode - Code element not found - ID:', codeId);
        }
    }
}

// Loads referral visits specific to community page.
async function loadVisits() {
    console.log('loadVisits - Loading visits');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadVisits - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadVisits - Fetching visits - URL:', `${window.apiUrl}/${userId}/visits`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/visits`);
        if (!response.ok) throw new Error(`Failed to fetch visits: ${response.status}`);
        const data = await response.json();
        console.log('loadVisits - Visits fetched - Data:', JSON.stringify(data));
        if (data.status === 'success') {
            const now = new Date();
            const thisMonth = now.getMonth();
            const thisYear = now.getFullYear();
            const visitsThisMonth = [];
            const visitsLastMonth = [];
            const visitsEarlier = [];
            data.visits.forEach(visit => {
                const visitDate = new Date(visit.timestamp);
                if (visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth) visitsThisMonth.push(visit);
                else if ((visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth - 1) || 
                         (visitDate.getFullYear() === thisYear - 1 && thisMonth === 0 && visitDate.getMonth() === 11)) visitsLastMonth.push(visit);
                else visitsEarlier.push(visit);
            });
            updateVisitsTable('visitsListThisMonth', visitsThisMonth);
            updateVisitsTable('visitsListLastMonth', visitsLastMonth);
            updateVisitsTable('visitsListEarlier', visitsEarlier);
            console.log('loadVisits - Visits loaded - Counts:', { thisMonth: visitsThisMonth.length, lastMonth: visitsLastMonth.length, earlier: visitsEarlier.length });
        }
    } catch (error) {
        console.error('loadVisits - Error loading visits - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading visits: ${error.message}`);
    }
}

// Updates the visits table.
function updateVisitsTable(tableId, visits) {
    console.log('updateVisitsTable - Updating table - Table ID:', tableId, 'Visits:', visits.length);
    const tbody = document.getElementById(tableId);
    if (tbody) {
        tbody.innerHTML = visits.length === 0 ? '<tr><td colspan="2">No visits found</td></tr>' : '';
        visits.forEach(visit => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${visit.page}</td><td>${visit.timestamp}</td>`;
            tbody.appendChild(row);
        });
        console.log('updateVisitsTable - Table updated - ID:', tableId);
    } else {
        console.warn('updateVisitsTable - Table element not found - ID:', tableId);
    }
}

// Loads referral orders specific to community page.
async function loadOrders() {
    console.log('loadOrders - Loading orders');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadOrders - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadOrders - Fetching orders - URL:', `${window.apiUrl}/${userId}/orders`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/orders`);
        if (!response.ok) throw new Error(`Failed to fetch orders: ${response.status}`);
        const data = await response.json();
        console.log('loadOrders - Orders fetched - Data:', JSON.stringify(data));
        if (data.status === 'success') {
            const now = new Date();
            const thisMonth = now.getMonth();
            const thisYear = now.getFullYear();
            const ordersThisMonth = [];
            const ordersLastMonth = [];
            const ordersEarlier = [];
            data.orders.forEach(order => {
                const orderDate = new Date(order.timestamp);
                if (orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth) ordersThisMonth.push(order);
                else if ((orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth - 1) || 
                         (orderDate.getFullYear() === thisYear - 1 && thisMonth === 0 && orderDate.getMonth() === 11)) ordersLastMonth.push(order);
                else ordersEarlier.push(order);
            });
            updateOrdersTable('ordersListThisMonth', ordersThisMonth);
            updateOrdersTable('ordersListLastMonth', ordersLastMonth);
            updateOrdersTable('ordersListEarlier', ordersEarlier);
            console.log('loadOrders - Orders loaded - Counts:', { thisMonth: ordersThisMonth.length, lastMonth: ordersLastMonth.length, earlier: ordersEarlier.length });
        }
    } catch (error) {
        console.error('loadOrders - Error loading orders - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading orders: ${error.message}`);
    }
}

// Updates the orders table.
function updateOrdersTable(tableId, orders) {
    console.log('updateOrdersTable - Updating table - Table ID:', tableId, 'Orders:', orders.length);
    const tbody = document.getElementById(tableId);
    if (tbody) {
        tbody.innerHTML = orders.length === 0 ? '<tr><td colspan="4">No orders found</td></tr>' : '';
        orders.forEach(order => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${order.orderId}</td><td>${order.buyer}</td><td>$${order.total}</td><td>${order.timestamp}</td>`;
            tbody.appendChild(row);
        });
        console.log('updateOrdersTable - Table updated - ID:', tableId);
    } else {
        console.warn('updateOrdersTable - Table element not found - ID:', tableId);
    }
}

// Waits for TinyMCE to load before initializing (specific invocation).
function waitForTinyMCE(callback) {
    console.log('waitForTinyMCE - Checking if TinyMCE is loaded');
    if (typeof tinymce !== 'undefined' && tinymce.init) {
        console.log('waitForTinyMCE - TinyMCE is loaded, executing callback');
        callback();
    } else {
        console.log('waitForTinyMCE - Waiting for TinyMCE to load...');
        const script = document.querySelector('script[src*="tinymce.min.js"]');
        if (script) {
            script.onload = () => {
                console.log('waitForTinyMCE - TinyMCE script loaded');
                callback();
            };
            script.onerror = () => console.error('waitForTinyMCE - TinyMCE failed to load');
        } else {
            setTimeout(() => waitForTinyMCE(callback), 100);
        }
    }
}
static/js/merchant-page.js
// merchant-page.js
// Purpose: Manages page-specific functionality for the /merchant page.

// Initializes the merchant page with permission checks.
function initializeMerchant() {
    console.log('initializeMerchant - Initializing merchant page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializeMerchant - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeMerchant - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('merchant') && !window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: Merchant or Admin permission required');
        console.error('initializeMerchant - No merchant/admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    if (userId) document.getElementById('userId').value = userId;
    checkAdminPermission();
    loadBranding();
    showSection('info');
    attachEventListeners();
    console.log('initializeMerchant - Merchant page initialized successfully');
}

// Checks and toggles visibility of admin-specific elements.
function checkAdminPermission() {
    console.log('checkAdminPermission - Checking admin permission');
    const backButton = document.querySelector('button[data-href="/admin"]');
    if (backButton) {
        backButton.style.display = window.userPermissions.includes('admin') ? 'block' : 'none';
        console.log('checkAdminPermission - Back button visibility:', backButton.style.display);
    } else {
        console.warn('checkAdminPermission - Back button not found');
    }
}

// Loads and displays merchant products.
async function loadProducts() {
    console.log('loadProducts - Loading products');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadProducts - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadProducts - Fetching products - URL:', `${window.apiUrl}/${userId}/products`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/products`);
        if (!response.ok) throw new Error(`Failed to fetch products: ${response.status}`);
        const data = await response.json();
        console.log('loadProducts - Products fetched - Data:', JSON.stringify(data));
        
        const tbody = document.getElementById('productList');
        if (tbody) {
            tbody.innerHTML = '';
            data.products.forEach(product => tbody.appendChild(createProductRow(product)));
            console.log('loadProducts - Product table updated - Count:', data.products.length);
        } else {
            console.warn('loadProducts - Product list element not found');
        }
    } catch (error) {
        console.error('loadProducts - Error loading products - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading products: ${error.message}`);
    }
}

// Creates a table row for a product.
function createProductRow(product) {
    console.log('createProductRow - Creating row - Product:', JSON.stringify(product));
    const tr = document.createElement('tr');
    tr.innerHTML = `
        <td class="hidden">${product.id}</td>
        <td>${product.category || 'N/A'}</td>
        <td>${product.title}</td>
        <td><a href="${product.product_url}" target="_blank">Link</a></td>
        <td>${product.current_price}</td>
        <td>${product.original_price}</td>
        <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
        <td>${product.qty || 'N/A'}</td>
    `;
    return tr;
}

// Loads store request data specific to merchant page.
async function loadStoreRequest() {
    console.log('loadStoreRequest - Loading store request');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadStoreRequest - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadStoreRequest - Fetching store request - URL:', `${window.apiUrl}/${userId}/siterequest`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/siterequest`);
        if (!response.ok) throw new Error(`Failed to fetch store request: ${response.status}`);
        const data = await response.json();
        const storeRequest = data.site_request || {};
        console.log('loadStoreRequest - Store request fetched - Data:', JSON.stringify(storeRequest));

        document.getElementById('storeName').value = storeRequest.storeName || '';
        if (window.tinyMCELoaded) {
            tinymce.get('aboutStore')?.setContent(storeRequest.aboutStore || '');
        } else {
            document.getElementById('aboutStore').value = storeRequest.aboutStore || '';
        }
        document.getElementById('colorPrefs').value = storeRequest.colorPrefs || '';
        document.getElementById('stylingDetails').value = storeRequest.stylingDetails || '';
        document.getElementById('preferredDomain').value = storeRequest.preferredDomain || 'mystore.uk';

        const emails = storeRequest.emails || ['info'];
        window.emailCount = 0;
        const emailsContainer = document.getElementById('emailsContainer');
        emailsContainer.innerHTML = '';
        emails.forEach((email, index) => {
            window.emailCount++;
            const emailDiv = document.createElement('div');
            emailDiv.className = 'email-section';
            emailDiv.dataset.email = window.emailCount;
            emailDiv.innerHTML = `
                <label for="email${window.emailCount}Name">Email Name:</label>
                <input type="text" id="email${window.emailCount}Name" name="email${window.emailCount}Name" value="${email}">
                <span id="email${window.emailCount}Domain">@${storeRequest.preferredDomain || 'mystore.uk'}</span>
                ${window.emailCount > 1 ? `<button type="button" class="remove-email-btn" onclick="removeEmail(${window.emailCount})">Remove Email</button>` : ''}
            `;
            emailsContainer.appendChild(emailDiv);
        });

        const pages = storeRequest.pages && storeRequest.pages.length >= 2 ? storeRequest.pages : [
            { name: 'Home', content: '' },
            { name: 'Returns Policy', content: '' }
        ];
        window.pageCount = 0;
        const pagesContainer = document.getElementById('pagesContainer');
        pagesContainer.innerHTML = '';
        pages.forEach((page, index) => {
            window.pageCount++;
            const pageDiv = document.createElement('div');
            pageDiv.className = 'page-section';
            pageDiv.dataset.page = window.pageCount;
            pageDiv.innerHTML = `
                <label for="page${window.pageCount}Name">Page Name:</label>
                <input type="text" id="page${window.pageCount}Name" name="page${window.pageCount}Name" value="${page.name || ''}" ${window.pageCount <= 2 ? 'readonly' : ''}>
                <br><br>
                <label for="page${window.pageCount}Content">${window.pageCount === 1 ? 'Home Page' : window.pageCount === 2 ? 'Returns Policy' : 'Page'} Content:</label>
                <textarea id="page${window.pageCount}Content" name="page${window.pageCount}Content">${page.content || ''}</textarea>
                <label for="page${window.pageCount}Images">Additional Images:</label>
                <input type="file" id="page${window.pageCount}Images" name="page${window.pageCount}Images" accept="image/*" multiple>
                ${window.pageCount > 2 ? `<button type="button" class="remove-page-btn" onclick="removePage(${window.pageCount})">Remove Page</button>` : ''}
            `;
            pagesContainer.appendChild(pageDiv);
            if (window.tinyMCELoaded) {
                tinymce.init({
                    selector: `#page${window.pageCount}Content`,
                    height: 200,
                    menubar: false,
                    plugins: 'lists',
                    toolbar: 'bold italic | bullist numlist',
                    setup: editor => {
                        editor.on('init', () => console.log(`TinyMCE editor initialized for page${window.pageCount}`));
                    }
                });
            }
        });

        const widgets = storeRequest.widgets || [];
        document.querySelectorAll('input[name="widgets"]').forEach(checkbox => {
            checkbox.checked = widgets.includes(checkbox.value);
        });

        updateDomainPreview();
        console.log('loadStoreRequest - Store request loaded successfully');
    } catch (error) {
        console.error('loadStoreRequest - Error loading store request - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading store request: ${error.message}`);
    }
}
static/js/page-load.js
// /static/js/page-load.js
// Purpose: Manages page initialization, event listener attachment for navigation and section handling, and loading overlay behavior.

// Function to show the loading overlay
function showLoadingOverlay() {
    let loadingOverlay = document.getElementById('loadingOverlay');
    if (!loadingOverlay) {
        loadingOverlay = document.createElement('div');
        loadingOverlay.id = 'loadingOverlay';
        loadingOverlay.innerHTML = `
            <div class="multicircle-loader">
                <div class="circle circle1"></div>
                <div class="circle circle2"></div>
                <div class="circle circle3"></div>
                <div class="circle circle4"></div>
            </div>
        `;
        document.body.prepend(loadingOverlay);
        console.log('showLoadingOverlay - Created and prepended loading overlay');
    }
    loadingOverlay.style.display = 'flex';
    console.log('showLoadingOverlay - Loading overlay set to visible');
    return loadingOverlay;
}

// Function to hide the loading overlay and show the main content with a minimum visibility delay
async function hideLoadingOverlay(minDelay = 1000) {
    const loadingOverlay = document.getElementById('loadingOverlay');
    const layoutWrapper = document.querySelector('.layout-wrapper');
    
    if (loadingOverlay && layoutWrapper) {
        await new Promise(resolve => setTimeout(resolve, minDelay));
        loadingOverlay.style.display = 'none';
        layoutWrapper.style.display = 'block';
        console.log('hideLoadingOverlay - Loading overlay hidden, main content displayed');
    } else {
        console.warn('hideLoadingOverlay - Loading overlay or layout wrapper not found');
    }
}

// Attaches event listeners for navigation and section handling.
function attachEventListeners() {
    console.log('attachEventListeners - Attaching event listeners');
    const buttons = document.querySelectorAll('button[data-section], button[data-submenu], button[data-href]');
    console.log('attachEventListeners - Found buttons with data attributes:', buttons.length);
    buttons.forEach(button => {
        if (button.dataset.section || button.dataset.submenu) {
            button.addEventListener('click', handleSectionClick);
            console.log('attachEventListeners - Added click listener to button with data-section/submenu:', button.dataset.section || button.dataset.submenu);
        }
        if (button.dataset.href) {
            button.addEventListener('click', handleHrefClick);
            console.log('attachEventListeners - Added click listener to button with data-href:', button.dataset.href);
        }
    });

    // Add delegated listener for logOffBtn
    document.addEventListener('click', (e) => {
        if (e.target.matches('#logOffBtn')) {
            e.preventDefault();
            console.log('Document click - Log Off button clicked');
            logOff();
        }
    });
    console.log('attachEventListeners - Added delegated click listener for logOffBtn');

    console.log('attachEventListeners - Event listeners attached');
}

// Base initialization function ensuring permission checks before page setup.
function initializePage(requiredPermissions, callback) {
    console.log('initializePage - Starting initialization - Permissions required:', requiredPermissions);
    const token = localStorage.getItem('authToken');
    console.log('initializePage - Retrieved token from localStorage:', token || 'None');
    if (!token) {
        console.warn('initializePage - No auth token found - Redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    console.log('initializePage - Decoded token:', decoded ? JSON.stringify(decoded) : 'null');
    if (!decoded) {
        console.warn('initializePage - Failed to decode token - Redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    console.log('initializePage - User permissions set:', JSON.stringify(window.userPermissions));
    if (!requiredPermissions.some(perm => window.userPermissions.includes(perm))) {
        console.warn('initializePage - Required permissions not found - Required:', requiredPermissions, 'Permissions:', window.userPermissions);
        toastr.error(`Permission denied: one of ${requiredPermissions.join(', ')} required`);
        window.location.href = '/';
        return;
    }
    console.log('initializePage - Permission check passed - Executing callback');
    callback();
    console.log('initializePage - Initialization completed for permissions:', requiredPermissions);
}

// Common initialize function handling page-specific setup based on page type.
async function initialize(pageType) {
    console.log('initialize - Starting page initialization - Page type:', pageType);
    
    showLoadingOverlay();

    const pageConfigs = {
        'partner': {
            permissions: ["wixpro", "admin"],
            brandingType: 'partner',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing partner-specific steps');
                attachEventListeners();
                console.log('initialize - Partner-specific steps completed');
            }
        },
        'merchant': {
            permissions: ["merchant", "admin"],
            brandingType: 'merchant',
            initialSection: 'info',
            requiresUserId: true,
            extraSteps: () => {
                console.log('initialize - Executing merchant-specific steps');
                const userId = localStorage.getItem('userId');
                console.log('initialize - Retrieved userId from localStorage:', userId || 'None');
                if (userId) {
                    console.log('initialize - Setting userId in DOM - ID:', userId);
                    document.getElementById('userId').value = userId;
                } else {
                    console.warn('initialize - No userId found for merchant - Proceeding without setting');
                }                
                attachEventListeners();
                console.log('initialize - Merchant-specific steps completed');
            }
        },
        'community': {
            permissions: ["community", "admin"],
            brandingType: 'community',
            initialSection: 'welcome',
            requiresUserId: true,
            extraSteps: () => {
                console.log('initialize - Executing community-specific steps');
                const userId = localStorage.getItem('userId');
                console.log('initialize - Retrieved userId from localStorage:', userId || 'None');
                if (!userId) {
                    console.warn('initialize - User ID not found for community - Redirecting to /');
                    toastr.error('User ID not found in session');
                    window.location.href = '/';
                    return;
                }
                console.log('initialize - Setting userId in DOM - ID:', userId);
                document.getElementById('userId').value = userId;
                updateMenu();
                waitForTinyMCE(initializeTinyMCE);
                attachEventListeners();
                console.log('initialize - Community-specific steps completed');
            }
        },
        'admin': {
            permissions: ["admin"],
            brandingType: 'admin',
            initialSection: 'welcome',
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing admin-specific steps');
                attachEventListeners();
                console.log('initialize - Admin-specific steps completed');
            }
        },
        'login': {
            permissions: [],
            brandingType: 'login',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing login-specific steps');
                console.log('initialize - Login-specific steps completed');
            }
        },
        'signup': {
            permissions: [],
            brandingType: 'signup',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing signup-specific steps');
                console.log('initialize - Signup-specific steps completed');
            }
        }
    };

    const config = pageConfigs[pageType];
    if (!config) {
        console.error('initialize - Invalid page type provided - Type:', pageType);
        toastr.error('Invalid page type');
        await hideLoadingOverlay();
        return;
    }
    console.log('initialize - Configuration loaded for page type:', pageType, 'Config:', JSON.stringify(config));

    if (config.permissions && config.permissions.length > 0) {
        console.log('initialize - Performing permission check for:', config.permissions);
        initializePage(config.permissions, async () => {
            console.log('initialize - Permission validated for:', config.permissions);
            await performPageSetup(pageType, config);
            await hideLoadingOverlay();
        });
    } else {
        console.log('initialize - No permissions required for:', pageType);
        await performPageSetup(pageType, config);
        await hideLoadingOverlay();
    }
    console.log('initialize - Initialization process completed for:', pageType);
}

// Attach initialize to the window object to ensure it's globally available
window.initialize = initialize;

// Helper function to perform page setup after permission checks.
async function performPageSetup(pageType, config) {
    console.log('performPageSetup - Starting setup - Page type:', pageType);
    
    console.log('performPageSetup - Loading branding - Type:', config.brandingType);
    await loadBranding(config.brandingType);

    if (config.initialSection) {
        console.log('performPageSetup - Showing initial section - ID:', config.initialSection);
        showSection(config.initialSection);
    } else {
        console.log('performPageSetup - No initial section specified for:', pageType);
    }

    if (typeof config.extraSteps === 'function') {
        console.log('performPageSetup - Executing extra steps for:', pageType);
        config.extraSteps();
    } else {
        console.log('performPageSetup - No extra steps defined for:', pageType);
    }

    console.log('performPageSetup - Page setup completed for:', pageType);
}

// Attaches click event listeners for section navigation.
function handleSectionClick(event) {
    console.log('handleSectionClick - Section click event triggered');
    const target = event.target.closest('button[data-section], button[data-submenu]');
    console.log('handleSectionClick - Event target:', target);
    if (!target) return;

    event.stopPropagation(); // Stop bubbling to parent elements

    const sectionId = target.getAttribute('data-section');
    const submenuId = target.getAttribute('data-submenu');
    console.log(`handleSectionClick - Extracted attributes - Section: ${sectionId} Submenu: ${submenuId}`);

    // Toggle submenu if the button has a data-submenu attribute
    if (submenuId) {
        console.log(`handleSectionClick - Toggling submenu - ID: ${submenuId}`);
        toggleSubmenu(submenuId);
    }

    // Show section if the button has a data-section attribute
    if (sectionId) {
        console.log(`handleSectionClick - Showing section - ID: ${sectionId}`);
        showSection(sectionId);
    }
    console.log('handleSectionClick - Event handling completed');
}

// Attaches click event listeners for href navigation with SPA support.
async function handleHrefClick(event, options = {}) {
    console.log('handleHrefClick - Href click event triggered');
    const target = event.currentTarget;
    console.log('handleHrefClick - Event target:', target);
    const href = target.getAttribute('data-href');
    console.log('handleHrefClick - Extracted href:', href);
    console.log('handleHrefClick - Options provided:', JSON.stringify(options));
    if (!href) {
        console.warn('handleHrefClick - No href attribute found - Target:', target);
        return;
    }

    showLoadingOverlay();
    try {
        console.log('handleHrefClick - Initiating fetch for protected page - Href:', href);
        const startTime = Date.now();
        const html = await fetchProtectedPage(href);
        const duration = Date.now() - startTime;
        if (!html) {
            console.error('handleHrefClick - No HTML returned - Href:', href);
            return;
        }
        console.log('handleHrefClick - HTML fetched successfully - Length:', html.length, 'Duration:', `${duration}ms`);

        const { spaPaths = ['/partner'], containerSelector = '.content-container', onLoad = null } = options;
        console.log('handleHrefClick - SPA paths:', spaPaths, 'Container selector:', containerSelector);

        if (spaPaths.includes(href)) {
            console.log('handleHrefClick - Initiating SPA redirect - Href:', href);
            history.pushState({ page: href.slice(1) }, `${href} Page`, href);
            console.log('handleHrefClick - URL updated via history.pushState - New URL:', window.location.href);
            const contentContainer = document.querySelector(containerSelector);
            console.log('handleHrefClick - Content container:', contentContainer);
            if (contentContainer) {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const content = doc.querySelector(containerSelector) || doc.body;
                console.log('handleHrefClick - Extracted content element:', content.tagName);
                contentContainer.innerHTML = content.innerHTML;
                console.log('handleHrefClick - Content container updated - Href:', href);
                const scripts = doc.querySelectorAll('script:not([src])');
                console.log('handleHrefClick - Found inline scripts:', scripts.length);
                scripts.forEach((script, index) => {
                    if (script.innerHTML.trim()) {
                        console.log('handleHrefClick - Executing inline script', index + 1);
                        try {
                            new Function(script.innerHTML)();
                            console.log('handleHrefClick - Inline script', index + 1, 'executed successfully');
                        } catch (e) {
                            console.error('handleHrefClick - Error executing inline script', index + 1, 'Error:', e.message);
                        }
                    }
                });
            } else {
                console.error('handleHrefClick - Content container not found - Selector:', containerSelector);
                toastr.error('Failed to update page content: container missing');
                document.body.innerHTML = html;
                console.log('handleHrefClick - Body updated with full HTML - Href:', href);
            }
        } else {
            console.log('handleHrefClick - Performing full page load - Href:', href);
            document.body.innerHTML = html;
            console.log('handleHrefClick - Body updated with new HTML - Href:', href);
        }

        if (typeof onLoad === 'function') {
            console.log('handleHrefClick - Executing onLoad callback - Href:', href);
            onLoad(href, html);
        }
    } catch (error) {
        console.error('handleHrefClick - Error handling href click - Href:', href, 'Error:', error.message);
        toastr.error('Navigation failed: ' + error.message);
    } finally {
        await hideLoadingOverlay();
    }
    console.log('handleHrefClick - Event handling completed');
}

// Initialize on DOM load (fallback, though fetchProtectedPage should handle it)
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOMContentLoaded - Starting initialization');
    const pageType = window.location.pathname.split('/')[1] || 'login';
    console.log('DOMContentLoaded - Determined page type:', pageType);
    initialize(pageType);
});
static/js/partner-page.js
// partner-page.js
// Purpose: Manages page-specific functionality for the /partner page.

// Initializes the partner page with permission checks.
function initializePartner() {
    console.log('initializePartner - Initializing partner page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializePartner - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializePartner - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('wixpro') && !window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: WixPro or Admin permission required');
        console.error('initializePartner - No wixpro/admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    if (userId) document.getElementById('userId').value = userId;
    checkAdminPermission();
    loadBranding();
    showSection('welcome');
    attachEventListeners();
    console.log('initializePartner - Partner page initialized successfully');
}

// Checks and toggles visibility of admin-specific elements.
function checkAdminPermission() {
    console.log('checkAdminPermission - Checking admin permission');
    const backButton = document.querySelector('button[data-href="/admin"]');
    if (backButton) {
        backButton.style.display = window.userPermissions.includes('admin') ? 'block' : 'none';
        console.log('checkAdminPermission - Back button visibility:', backButton.style.display);
    } else {
        console.warn('checkAdminPermission - Back button not found');
    }
}

// Loads and displays partner-specific integrations or tests.
async function loadPartnerIntegrations() {
    console.log('loadPartnerIntegrations - Loading partner integrations');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadPartnerIntegrations - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadPartnerIntegrations - Fetching integrations - URL:', `${window.apiUrl}/${userId}/integrations`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/integrations`);
        if (!response.ok) throw new Error(`Failed to fetch integrations: ${response.status}`);
        const data = await response.json();
        console.log('loadPartnerIntegrations - Integrations fetched - Data:', JSON.stringify(data));

        const integrationList = document.getElementById('integrationList');
        if (integrationList) {
            integrationList.innerHTML = '';
            data.integrations.forEach(integration => {
                const li = document.createElement('li');
                li.textContent = `${integration.name} - Status: ${integration.status}`;
                integrationList.appendChild(li);
            });
            console.log('loadPartnerIntegrations - Integration list updated - Count:', data.integrations.length);
        } else {
            console.warn('loadPartnerIntegrations - Integration list element not found');
        }
    } catch (error) {
        console.error('loadPartnerIntegrations - Error loading integrations - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading integrations: ${error.message}`);
    }
}
static/js/site-auth.js
// site-auth.js
// Purpose: Manages authentication-related functionality, including password visibility toggling, 
// user logout, JWT token decoding, and password saving for user management.

// Toggles the visibility of a password input field, updating associated icon.
function togglePassword(fieldId) {
    console.log('togglePassword - Initiating visibility toggle - Field ID:', fieldId);
    const input = document.getElementById(fieldId);
    const icon = input ? input.nextElementSibling : null;
    console.log('togglePassword - Input element retrieved:', input, 'Icon element:', icon);

    if (!input) {
        console.error('togglePassword - Password input not found - Field ID:', fieldId);
        return;
    }
    if (!icon) {
        console.error('togglePassword - Icon element not found for input - Field ID:', fieldId);
        return;
    }

    const isPassword = input.type === 'password';
    console.log('togglePassword - Current input type:', input.type);
    if (isPassword) {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
        console.log('togglePassword - Changed to text visibility - Field ID:', fieldId);
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
        console.log('togglePassword - Changed to password visibility - Field ID:', fieldId);
    }
    console.log('togglePassword - Toggle completed - New type:', input.type);
}

// Logs the user out, clearing session data and redirecting to home.
function logOff() {
    console.log('logOff - Initiating logout process');
    const confirmed = confirm('Are you sure you want to log off?');
    console.log('logOff - User confirmation received:', confirmed);

    if (confirmed) {
        console.log('logOff - User confirmed logout - Clearing session data');
        localStorage.removeItem('authToken');
        localStorage.removeItem('userId');
        console.log('logOff - Auth token and userId removed from localStorage - Current localStorage:', JSON.stringify(localStorage));
        toastr.success('Logged off successfully');
        console.log('logOff - Success toast displayed');

        setTimeout(() => {
            console.log('logOff - Redirecting to / after 1-second delay');
            window.location.href = '/';
            console.log('logOff - Redirect executed');
        }, 1000);
    } else {
        console.log('logOff - Logout cancelled by user');
    }
    console.log('logOff - Logout process completed');
}

// Decodes a JWT token to extract user data, such as permissions.
function decodeJWT(token) {
    console.log('decodeJWT - Starting JWT decoding - Input token:', token);
    if (!token || typeof token !== 'string') {
        console.warn('decodeJWT - Invalid token: null or not a string - Token:', token);
        return null;
    }
    if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
        console.warn('decodeJWT - Token does not match JWT format - Token:', token);
        return null;
    }
    console.log('decodeJWT - Token format validated - Proceeding with decode');

    const parts = token.split('.');
    console.log('decodeJWT - Token split into parts:', parts);

    try {
        const base64Url = parts[1];
        console.log('decodeJWT - Extracted base64Url from token:', base64Url);
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        console.log('decodeJWT - Converted to base64:', base64);
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
        console.log('decodeJWT - Decoded JSON payload:', jsonPayload);
        const decoded = JSON.parse(jsonPayload);
        console.log('decodeJWT - Parsed JWT payload:', JSON.stringify(decoded));
        return decoded;
    } catch (error) {
        console.error('decodeJWT - Error decoding JWT - Error:', error.message, 'Stack:', error.stack, 'Token:', token);
        return null;
    }
}

// Saves an updated user password via an authenticated request.
async function savePassword(newPassword) {
    console.log('savePassword - Starting password save - New password length:', newPassword ? newPassword.length : 'None');
    if (!newPassword || typeof newPassword !== 'string') {
        console.error('savePassword - Invalid password provided - Password:', newPassword);
        toastr.error('Invalid password provided');
        return;
    }

    try {
        console.log('savePassword - Sending password update via authenticatedFetch');
        const startTime = Date.now();
        const response = await authenticatedFetch('/update-password', { // Assumes endpoint exists
            method: 'POST',
            body: JSON.stringify({ password: newPassword })
        });
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('savePassword - No response from fetch');
            toastr.error('Failed to save password: No server response');
            return;
        }

        console.log('savePassword - Response received - Status:', response.status, 'Duration:', `${duration}ms`);
        const result = await response.json();
        console.log('savePassword - Save response data:', JSON.stringify(result));

        if (result.status === 'success') {
            console.log('savePassword - Password saved successfully');
            toastr.success('Password updated successfully');
        } else {
            console.error('savePassword - Server reported failure - Message:', result.message);
            toastr.error(result.message || 'Failed to save password');
        }
    } catch (error) {
        console.error('savePassword - Error saving password - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to save password: ' + error.message);
    }
    console.log('savePassword - Password save process completed');
}
static/js/site-navigation.js
// site-navigation.js
// Purpose: Handles navigation and content loading across the site, including authenticated fetch requests, 
// protected page loading, branding, and section/submenu management.

// Check if window.apiUrl is defined, throw an error if not
if (!window.apiUrl) {
    console.error('site-navigation.js - window.apiUrl is not defined. Please set window.apiUrl before loading this script.');
    throw new Error('window.apiUrl is not defined');
}
console.log('site-navigation.js - Using apiUrl:', window.apiUrl);

// Performs authenticated fetch requests for protected resources, ensuring proper authorization headers.
async function authenticatedFetch(url, options = {}) {
    console.log('authenticatedFetch - Initiating fetch - URL:', url);
    const token = localStorage.getItem('authToken');
    console.log('authenticatedFetch - Token retrieved from localStorage:', token || 'None');
    console.log('authenticatedFetch - Options provided:', JSON.stringify(options));

    if (!token) {
        console.warn('authenticatedFetch - No authentication token found - Redirecting to /');
        toastr.error('No authentication token found. Please log in.');
        window.location.href = '/';
        return null;
    }

    const headers = {
        ...options.headers,
        'Authorization': `Bearer ${token}`,
        'Content-Type': options.body instanceof FormData ? undefined : 'application/json'
    };
    console.log('authenticatedFetch - Request headers constructed:', JSON.stringify(headers));

    const finalOptions = {
        ...options,
        headers: headers
    };
    console.log('authenticatedFetch - Final fetch options:', JSON.stringify(finalOptions));

    // Add timestamp to the URL to prevent caching
    const timestamp = Date.now();
    const separator = url.includes('?') ? '&' : '?';
    const fetchUrl = `${url}${separator}t=${timestamp}`;
    console.log('authenticatedFetch - Sending fetch request to:', fetchUrl);

    try {
        const startTime = Date.now();
        const response = await fetch(fetchUrl, finalOptions);
        const duration = Date.now() - startTime;
        console.log('authenticatedFetch - Fetch response received - Status:', response.status, 'Duration:', `${duration}ms`);
        console.log('authenticatedFetch - Response headers:', JSON.stringify([...response.headers.entries()]));
        console.log('authenticatedFetch - Response URL:', response.url);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('authenticatedFetch - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Server returned ${response.status}: ${errorText}`);
        }

        if (response.status === 401) {
            console.warn('authenticatedFetch - Unauthorized response (401) - Clearing token and redirecting to /');
            toastr.error('Session expired. Please log in again.');
            localStorage.removeItem('authToken');
            localStorage.removeItem('userId');
            window.location.href = '/';
            return null;
        }

        console.log('authenticatedFetch - Fetch successful - Response OK');
        return response;
    } catch (error) {
        console.error('authenticatedFetch - Error during fetch - URL:', url, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(error.message || 'Failed to connect to server');
        return null;
    }
}

// Fetches protected page content for navigation, with an option to load into a specific container
async function fetchProtectedPage(url, targetContainer = null) {
    const token = localStorage.getItem('authToken');
    if (!token) {
        toastr.error('No authentication token found. Please log in.');
        showLogin();
        return;
    }

    const overlay = showLoadingOverlay();
    try {
        const response = await fetch(`${window.apiUrl}${url}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'text/html'
            }
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`Server returned ${response.status}: ${errorText}`);
        }

        const html = await response.text();

        // Parse the HTML
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const scripts = doc.querySelectorAll('script');
        scripts.forEach(script => script.remove()); // Remove scripts to avoid double execution

        if (targetContainer) {
            // Load content into the specified container (e.g., .content-wrapper)
            const container = document.querySelector(targetContainer);
            if (!container) {
                console.error(`fetchProtectedPage - Target container not found: ${targetContainer}`);
                toastr.error('Failed to load page content: Container not found');
                hideLoadingOverlay();
                return;
            }

            // Extract the main content (assuming the target page has a .content-wrapper or similar structure)
            const newContent = doc.querySelector('.content-wrapper') || doc.body;
            container.innerHTML = newContent.innerHTML;

            // Load and execute scripts manually
            const scriptPromises = [];
            scripts.forEach(script => {
                if (script.src) {
                    const newScript = document.createElement('script');
                    newScript.src = script.src;
                    newScript.async = false;
                    scriptPromises.push(
                        new Promise(resolve => {
                            newScript.onload = resolve;
                            newScript.onerror = () => console.error(`Failed to load script: ${script.src}`);
                            document.head.appendChild(newScript);
                        })
                    );
                } else if (script.innerHTML.trim()) {
                    try {
                        const scriptFn = new Function(script.innerHTML);
                        scriptFn();
                    } catch (e) {
                        console.error('Error executing inline script:', e);
                    }
                }
            });

            // Wait for scripts to load
            await Promise.all(scriptPromises);

            // Reinitialize navigation and other scripts
            if (typeof window.initialize === 'function') {
                const pageType = url.split('/')[1] || 'admin';
                console.log('fetchProtectedPage - Triggering window.initialize for page type:', pageType);
                window.initialize(pageType);
            } else {
                console.warn('fetchProtectedPage - window.initialize not found');
            }

            // Reinitialize navigation to ensure menu functionality
            initializeNavigation();

            // Hide the loading overlay
            setTimeout(() => {
                hideLoadingOverlay();
            }, 500);

            return html;
        } else {
            // Original behavior: Replace the entire document
            document.documentElement.innerHTML = doc.documentElement.innerHTML;

            // Ensure critical stylesheets are present
            const head = document.head;
            const requiredStyles = [
                'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css',
                'https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css',
                '/static/styles.css'
            ];
            requiredStyles.forEach(href => {
                if (!head.querySelector(`link[href="${href}"]`)) {
                    const link = document.createElement('link');
                    link.rel = 'stylesheet';
                    link.href = href;
                    head.appendChild(link);
                }
            });

            // Load and execute scripts manually
            const scriptPromises = [];
            scripts.forEach(script => {
                if (script.src) {
                    const newScript = document.createElement('script');
                    newScript.src = script.src;
                    newScript.async = false;
                    scriptPromises.push(
                        new Promise(resolve => {
                            newScript.onload = resolve;
                            newScript.onerror = () => console.error(`Failed to load script: ${script.src}`);
                            document.head.appendChild(newScript);
                        })
                    );
                } else if (script.innerHTML.trim()) {
                    try {
                        const scriptFn = new Function(script.innerHTML);
                        scriptFn();
                    } catch (e) {
                        console.error('Error executing inline script:', e);
                    }
                }
            });

            // Wait for scripts to load
            await Promise.all(scriptPromises);

            // Trigger page initialization
            if (typeof window.initialize === 'function') {
                const pageType = url.split('/')[1] || 'login';
                console.log('fetchProtectedPage - Triggering window.initialize for page type:', pageType);
                window.initialize(pageType);
            } else {
                console.warn('fetchProtectedPage - window.initialize not found');
            }

            // Show the page
            setTimeout(() => {
                const layoutWrapper = document.querySelector('.layout-wrapper');
                if (layoutWrapper) {
                    layoutWrapper.style.display = 'block';
                } else {
                    toastr.error('Failed to load page content');
                }
                hideLoadingOverlay();
            }, 1000);

            return html;
        }
    } catch (error) {
        console.error('fetchProtectedPage - Error:', error);
        toastr.error(error.message || 'Failed to load protected page');
        showLogin();
        hideLoadingOverlay();
    }
}

// Loads page-specific branding content into a specified container.
async function loadBranding(brandingType, containerId = 'brandingContent') {
    console.log('loadBranding - Starting branding load - Type:', brandingType, 'Container ID:', containerId);
    const defaultContents = {
        'partner': '<h1>Partner Dashboard</h1>',
        'merchant': '<h1>Merchant Dashboard</h1>',
        'community': '<h1>Community Dashboard</h1>',
        'admin': '<h1>Admin Dashboard</h1>',
        'login': '<h1>Login</h1>',
        'signup': '<h1>Signup</h1>'
    };
    const defaultContent = defaultContents[brandingType] || '<h1>Dashboard</h1>';
    console.log('loadBranding - Default content for type:', brandingType, 'is:', defaultContent);

    const container = document.getElementById(containerId);
    console.log('loadBranding - Container element:', container);
    if (!container) {
        console.error('loadBranding - Container not found - ID:', containerId);
        return;
    }

    try {
        const fetchUrl = `${window.apiUrl}/branding?type=${encodeURIComponent(brandingType)}`;
        console.log('loadBranding - Fetching branding from:', fetchUrl);
        const startTime = Date.now();
        const response = await authenticatedFetch(fetchUrl);
        const duration = Date.now() - startTime;
        if (!response) {
            console.warn('loadBranding - No response from fetch - Using default content - Type:', brandingType);
            container.innerHTML = defaultContent;
            console.log('loadBranding - Set container innerHTML to default content:', container.innerHTML);
            return;
        }
        console.log('loadBranding - Fetch completed - Duration:', `${duration}ms`);
        const data = await response.json();
        console.log('loadBranding - Branding data received:', JSON.stringify(data));
        if (data.status === 'success' && data.branding) {
            const brandingContent = data.branding;
            console.log('loadBranding - Setting branding content:', brandingContent);
            container.innerHTML = brandingContent;
            console.log('loadBranding - Branding content updated in container:', containerId, 'New innerHTML:', container.innerHTML);
        } else {
            console.warn('loadBranding - Invalid branding data - Using default content - Type:', brandingType);
            container.innerHTML = defaultContent;
            console.log('loadBranding - Set container innerHTML to default content:', container.innerHTML);
        }
    } catch (error) {
        console.error('loadBranding - Error loading branding - Type:', brandingType, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading ${brandingType} branding: ${error.message}`);
        container.innerHTML = defaultContent;
        console.log('loadBranding - Fallback to default content applied - Container ID:', containerId, 'New innerHTML:', container.innerHTML);
    }
}

// Displays a specific section while hiding others, with optional load callback.
function showSection(sectionId, onSectionLoad = null) {
    console.log('showSection - Starting section display - Section ID:', sectionId);
    console.log('showSection - Callback provided:', typeof onSectionLoad === 'function' ? 'Yes' : 'No');
    const allSections = document.querySelectorAll('.section');
    console.log('showSection - Found sections to hide:', allSections.length);
    allSections.forEach(s => {
        console.log('showSection - Hiding section - ID:', s.id);
        s.classList.remove('active');
        s.style.display = 'none';
    });
    const activeSection = document.getElementById(sectionId);
    console.log('showSection - Target section element:', activeSection);
    if (!activeSection) {
        console.error('showSection - Section not found - ID:', sectionId);
        return;
    }
    activeSection.classList.add('active');
    activeSection.style.display = 'block';
    console.log('showSection - Section activated - ID:', sectionId);

    // Highlight the corresponding submenu button
    document.querySelectorAll('.submenu button').forEach(button => {
        button.classList.remove('active');
        if (button.getAttribute('data-section') === sectionId) {
            button.classList.add('active');
        }
    });

    if (typeof onSectionLoad === 'function') {
        console.log('showSection - Executing onSectionLoad callback for:', sectionId);
        onSectionLoad(sectionId);
    } else {
        console.log('showSection - No callback provided, calling loadSection directly');
        loadSection(sectionId);
    }
    console.log('showSection - Section display completed');
}

// Loads content or configures DOM elements for a specific section based on its ID.
async function loadSection(sectionId) {
    console.log('loadSection - Starting section load - Section ID:', sectionId);

    // Handle static or test sections
    if (['welcome', 'page_visit_test', 'order_test', 'affiliateProgramsIntro', 'userManagementIntro', 'testScriptsIntro', 'referralTestsIntro'].includes(sectionId)) {
        console.log('loadSection - Processing static/test section:', sectionId);
        if (sectionId === 'page_visit_test' || sectionId === 'order_test') {
            const timestampId = sectionId === 'page_visit_test' ? 'pageTimestamp' : 'orderTimestamp';
            const timestampElement = document.getElementById(timestampId);
            console.log('loadSection - Timestamp element for', timestampId, ':', timestampElement);

            if (timestampElement) {
                const timestamp = getCurrentTimestamp(); // From site-request.js
                timestampElement.value = timestamp;
                console.log('loadSection - Set timestamp for', timestampId, 'to:', timestamp);
            } else {
                console.error('loadSection - Timestamp element not found - ID:', timestampId);
            }

            const refererId = sectionId === 'page_visit_test' ? 'pageReferer' : 'orderReferer';
            console.log('loadSection - Populating referer dropdown - ID:', refererId);
            await populateRefererDropdown(refererId); // Page-specific stub
        }
        console.log('loadSection - Static/test section load completed');
        return;
    }

    // Handle category listings
    if (sectionId === 'deal_listings') {
        console.log('loadSection - Loading deal listings');
        await loadCategories(); // From category-management.js
        console.log('loadSection - Deal listings loaded');
        return;
    }

    // Handle entity lists
    if (sectionId === 'merchants') {
        console.log('loadSection - Loading merchants');
        await loadMerchants(); // Page-specific stub
        console.log('loadSection - Merchants loaded');
        return;
    }
    if (sectionId === 'communities') {
        console.log('loadSection - Loading communities');
        await loadCommunities(); // Page-specific stub
        console.log('loadSection - Communities loaded');
        return;
    }
    if (sectionId === 'partners') {
        console.log('loadSection - Loading partners');
        await loadPartners(); // Page-specific stub
        console.log('loadSection - Partners loaded');
        return;
    }

    // Handle configuration sections
    console.log('loadSection - Attempting to load config for section:', sectionId);
    try {
        const fetchUrl = `${window.apiUrl}/config`;
        console.log('loadSection - Fetching config from:', fetchUrl);
        const startTime = Date.now();
        const response = await authenticatedFetch(fetchUrl);
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('loadSection - No response from fetch for config - Section:', sectionId);
            toastr.error('Failed to load section credentials: No response');
            return;
        }
        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadSection - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Failed to fetch /config: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadSection - Config data received - Duration:', `${duration}ms`, 'Data:', JSON.stringify(data));
        const config = data.config[sectionId] || {};
        console.log('loadSection - Config for section:', sectionId, 'is:', JSON.stringify(config));

        // Populate fields based on section
        if (sectionId === 'amazon_uk') {
            const elements = {
                amazonAccessKey: 'ACCESS_KEY',
                amazonSecretKey: 'SECRET_KEY',
                amazonAssociateTag: 'ASSOCIATE_TAG',
                amazonCountry: 'COUNTRY'
            };
            Object.entries(elements).forEach(([id, key]) => {
                const el = document.getElementById(id);
                console.log('loadSection - Checking element - ID:', id, 'Element:', el);
                if (el) {
                    el.value = config[key] || '';
                    console.log('loadSection - Set', id, 'to:', el.value);
                } else {
                    console.error('loadSection - Element not found - ID:', id);
                }
            });
        } else if (sectionId === 'ebay_uk') {
            const el = document.getElementById('ebayAppId');
            console.log('loadSection - eBay App ID element:', el);
            if (el) {
                el.value = config.APP_ID || '';
                console.log('loadSection - Set ebayAppId to:', el.value);
            } else {
                console.error('loadSection - Element not found - ID: ebayAppId');
            }
        } else if (sectionId === 'awin') {
            const el = document.getElementById('awinApiToken');
            console.log('loadSection - Awin API Token element:', el);
            if (el) {
                el.value = config.API_TOKEN || '';
                console.log('loadSection - Set awinApiToken to:', el.value);
            } else {
                console.error('loadSection - Element not found - ID: awinApiToken');
            }
        } else if (sectionId === 'cj') {
            const elements = {
                cjApiKey: 'API_KEY',
                cjWebsiteId: 'WEBSITE_ID'
            };
            Object.entries(elements).forEach(([id, key]) => {
                const el = document.getElementById(id);
                console.log('loadSection - Checking element - ID:', id, 'Element:', el);
                if (el) {
                    el.value = config[key] || '';
                    console.log('loadSection - Set', id, 'to:', el.value);
                } else {
                    console.error('loadSection - Element not found - ID:', id);
                }
            });
        } else if (sectionId === 'textmagic') {
            const elements = {
                textmagicUsername: 'USERNAME',
                textmagicApiKey: 'API_KEY'
            };
            Object.entries(elements).forEach(([id, key]) => {
                const el = document.getElementById(id);
                console.log('loadSection - Checking element - ID:', id, 'Element:', el);
                if (el) {
                    el.value = config[key] || '';
                    console.log('loadSection - Set', id, 'to:', el.value);
                } else {
                    console.error('loadSection - Element not found - ID:', id);
                }
            });
        } else if (sectionId === 'tiny') {
            const el = document.getElementById('tinyApiKey');
            console.log('loadSection - Tiny API Key element:', el);
            if (el) {
                el.value = config.API_KEY || '';
                console.log('loadSection - Set tinyApiKey to:', el.value);
            } else {
                console.error('loadSection - Element not found - ID: tinyApiKey');
            }
        }

        console.log('loadSection - Successfully loaded credentials for:', sectionId);
        toastr.success(`Loaded credentials for ${sectionId}`);
    } catch (error) {
        console.error('loadSection - Error loading section credentials - Section:', sectionId, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading credentials: ${error.message}`);
    }
    console.log('loadSection - Section load completed - Section ID:', sectionId);
}

// Updated toggleSubmenu function with improved caret detection
function toggleSubmenu(submenuId) {
    console.log(`toggleSubmenu - Starting toggle - Submenu ID: ${submenuId}`);
    const submenuElement = document.getElementById(submenuId);
    if (!submenuElement) {
        console.error(`toggleSubmenu - Submenu element not found: ${submenuId}`);
        toastr.error(`Navigation error: Submenu "${submenuId}" not found.`);
        return;
    }
    console.log(`toggleSubmenu - Submenu element retrieved:`, submenuElement);

    const button = document.querySelector(`button[data-submenu="${submenuId}"]`);
    if (!button) {
        console.error(`toggleSubmenu - Button for submenu not found: ${submenuId}`);
        toastr.error(`Navigation error: Button for submenu "${submenuId}" not found.`);
        return;
    }

    const isTopLevel = submenuElement.parentElement.classList.contains('menu') || !submenuElement.parentElement.closest('.submenu');
    console.log(`toggleSubmenu - Submenu is top-level: ${isTopLevel}`);

    // Close sibling submenus at the same level
    const parentMenu = isTopLevel ? document.querySelector('.menu') : submenuElement.parentElement.closest('.submenu');
    if (!parentMenu) {
        console.warn(`toggleSubmenu - Parent menu not found for submenu: ${submenuId}. Skipping sibling submenu closure.`);
        toastr.warning(`Navigation warning: Parent menu for "${submenuId}" not found.`);
    } else {
        const siblingSubmenus = parentMenu.querySelectorAll(`.submenu:not(#${submenuId})`);
        siblingSubmenus.forEach(sibling => {
            console.log(`toggleSubmenu - Closing sibling submenu - ID: ${sibling.id}`);
            sibling.style.display = 'none';
            sibling.classList.remove('open');
            const siblingButton = document.querySelector(`button[data-submenu="${sibling.id}"]`);
            if (siblingButton) {
                siblingButton.setAttribute('aria-expanded', 'false');
            }
            const siblingCaret = siblingButton ? siblingButton.querySelector('.caret') : null;
            if (siblingCaret) {
                siblingCaret.classList.replace('fa-caret-down', 'fa-caret-right');
                console.log(`toggleSubmenu - Reset caret for sibling submenu: ${sibling.id} to fa-caret-right`);
            }
        });
    }

    // Use getComputedStyle to accurately determine the current display state
    const computedStyle = window.getComputedStyle(submenuElement);
    const isOpen = computedStyle.display === 'block';
    console.log(`toggleSubmenu - Toggled state - ID: ${submenuId} Was open: ${isOpen} Now open: ${!isOpen}`);

    // Toggle the target submenu
    submenuElement.style.display = isOpen ? 'none' : 'block';
    if (isOpen) {
        submenuElement.classList.remove('open');
    } else {
        submenuElement.classList.add('open');
    }

    // Update ARIA attribute for accessibility
    button.setAttribute('aria-expanded', !isOpen);

    // Find the caret using the .caret class
    let caret = button.querySelector('.caret');
    if (!caret) {
        console.warn(`toggleSubmenu - Caret not found for submenu: ${submenuId}. Adding caret programmatically.`);
        caret = document.createElement('i');
        caret.className = 'fas fa-caret-right caret';
        button.appendChild(caret);
    }

    if (caret) {
        console.log(`toggleSubmenu - Caret found for submenu: ${submenuId}, current classes: ${caret.className}`);
        if (!isOpen) {
            caret.classList.replace('fa-caret-right', 'fa-caret-down');
            console.log(`toggleSubmenu - Set caret to fa-caret-down for submenu: ${submenuId}`);
        } else {
            caret.classList.replace('fa-caret-down', 'fa-caret-right');
            console.log(`toggleSubmenu - Set caret to fa-caret-right for submenu: ${submenuId}`);
        }
    } else {
        console.error(`toggleSubmenu - Failed to find or create caret for submenu: ${submenuId}`);
    }

    console.log(`toggleSubmenu - Toggle completed`);
}

// Updated initializeNavigation with SPA navigation for data-href buttons without URL change
function initializeNavigation() {
    console.log('initializeNavigation - Starting navigation setup');

    // Initialize submenu states (all closed by default)
    document.querySelectorAll('.submenu').forEach(submenu => {
        submenu.style.display = 'none';
        submenu.classList.remove('open');
        const submenuId = submenu.id;
        const button = document.querySelector(`button[data-submenu="${submenuId}"]`);
        if (button) {
            button.setAttribute('aria-expanded', 'false');
            let caret = button.querySelector('.caret');
            if (!caret) {
                console.warn(`initializeNavigation - Caret not found for submenu: ${submenuId}. Adding caret programmatically.`);
                caret = document.createElement('i');
                caret.className = 'fas fa-caret-right caret';
                button.appendChild(caret);
            } else {
                caret.classList.remove('fa-caret-down');
                caret.classList.add('fa-caret-right');
            }
        }
    });

    // Optionally, open a default submenu (e.g., "affiliatePrograms" on /admin)
    const defaultSubmenuId = 'affiliatePrograms';
    if (window.location.pathname === '/admin' && document.getElementById(defaultSubmenuId)) {
        console.log(`initializeNavigation - Opening default submenu: ${defaultSubmenuId}`);
        toggleSubmenu(defaultSubmenuId);
    }

    // Handle section navigation for buttons with only data-section (no submenu)
    document.querySelectorAll('button[data-section]:not([data-submenu])').forEach(button => {
        button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            const sectionId = button.getAttribute('data-section');
            console.log(`initializeNavigation - Section button clicked - Section ID: ${sectionId}`);
            showSection(sectionId);
        });
    });

    // Handle SPA navigation for buttons with data-href without changing the URL
    document.querySelectorAll('button[data-href]').forEach(button => {
        button.addEventListener('click', async (e) => {
            e.preventDefault();
            e.stopPropagation();
            const href = button.getAttribute('data-href');
            console.log('initializeNavigation - SPA navigation button clicked - HREF:', href);

            // Load the content into the .content-wrapper without changing the URL
            await fetchProtectedPage(href, '.content-wrapper');

            // Update the branding based on the page type
            const pageType = href.split('/')[1] || 'admin';
            await loadBranding(pageType);
        });
    });

    console.log('initializeNavigation - Navigation setup completed');
}

// Initialize navigation based on document readiness
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('DOMContentLoaded - Initializing navigation');
        initializeNavigation();
    });
} else {
    console.log('Document already loaded - Initializing navigation immediately');
    initializeNavigation();
}
static/js/site-request.js
// site-request.js
// Purpose: Manages site request functionality for merchants and communities (e.g., merchant.html, community.html), 
// including page/email management, domain handling, and TinyMCE integration.

// Adds a page to the site request form based on type (merchant/community).
function addPage(type = 'merchant') {
    console.log('addPage - Adding page to site request - Type:', type);
    const maxPages = 5;
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('addPage - Current page count:', pageCount);

    if (pageCount >= maxPages) {
        console.warn('addPage - Maximum pages reached - Max:', maxPages);
        toastr.error(`Maximum of ${maxPages} pages allowed`);
        return;
    }

    pageCount++;
    console.log('addPage - Incrementing page count to:', pageCount);
    localStorage.setItem(`${type}PageCount`, pageCount);

    const container = document.getElementById('pagesContainer');
    console.log('addPage - Pages container:', container);
    if (!container) {
        console.error('addPage - Pages container not found');
        return;
    }

    const pageDiv = document.createElement('div');
    pageDiv.className = 'page-section';
    pageDiv.dataset.page = pageCount;
    const isMerchantDefault = type === 'merchant' && pageCount <= 2;
    const pageName = isMerchantDefault ? (pageCount === 1 ? 'Home' : 'Returns Policy') : '';
    pageDiv.innerHTML = `
        <label for="page${pageCount}Name">Page Name:</label>
        <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" value="${pageName}" ${isMerchantDefault ? 'readonly' : ''} placeholder="e.g., ${type === 'merchant' ? 'Products' : 'Events'}">
        <br><br>
        <label for="page${pageCount}Content">${isMerchantDefault ? (pageCount === 1 ? 'Home Page' : 'Returns Policy') : 'Page'} Content:</label>
        <textarea id="page${pageCount}Content" name="page${pageCount}Content" placeholder="Describe this page"></textarea>
        <label for="page${pageCount}Images">Additional Images:</label>
        <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
        ${pageCount > (type === 'merchant' ? 2 : 1) ? `<button type="button" class="remove-page-btn" data-page="${pageCount}">Remove Page</button>` : ''}
    `;
    container.appendChild(pageDiv);
    console.log('addPage - New page section added - Page number:', pageCount);

    tinymce.remove(`#page${pageCount}Content`);
    initializeTinyMCE(`#page${pageCount}Content`);
    console.log('addPage - TinyMCE initialized for new page');
    console.log('addPage - Page addition completed');
}

// Removes a page from the site request form based on type (merchant/community).
function removePage(pageNum, type = 'merchant') {
    console.log('removePage - Removing page - Page number:', pageNum, 'Type:', type);
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('removePage - Current page count:', pageCount);
    const minPages = type === 'merchant' ? 2 : 1;

    if (pageCount <= minPages) {
        console.warn('removePage - Cannot remove below minimum pages - Min:', minPages);
        toastr.error(`Cannot remove the last ${type === 'merchant' ? 'Home or Returns Policy' : ''} page${minPages > 1 ? 's' : ''}`);
        return;
    }

    const pageSection = document.querySelector(`.page-section[data-page="${pageNum}"]`);
    console.log('removePage - Page section to remove:', pageSection);
    if (pageSection) {
        tinymce.get(`page${pageNum}Content`)?.remove();
        console.log('removePage - Removed TinyMCE instance for page:', pageNum);
        pageSection.remove();
        pageCount--;
        localStorage.setItem(`${type}PageCount`, pageCount);
        console.log('removePage - Page removed, new page count:', pageCount);
    } else {
        console.error('removePage - Page section not found - Page number:', pageNum);
    }
    console.log('removePage - Removal completed');
}

// Adds an email to the site request form.
function addEmail(type = 'merchant') {
    console.log('addEmail - Adding email to site request - Type:', type);
    const maxEmails = 5;
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('addEmail - Current email count:', emailCount);

    if (emailCount >= maxEmails) {
        console.warn('addEmail - Maximum emails reached - Max:', maxEmails);
        toastr.error(`Maximum of ${maxEmails} email addresses allowed`);
        return;
    }

    emailCount++;
    console.log('addEmail - Incrementing email count to:', emailCount);
    localStorage.setItem(`${type}EmailCount`, emailCount);

    const container = document.getElementById('emailsContainer');
    console.log('addEmail - Emails container:', container);
    if (!container) {
        console.error('addEmail - Emails container not found');
        return;
    }

    const domain = document.getElementById('preferredDomain')?.value || (type === 'merchant' ? 'mystore.uk' : 'mycommunity.org');
    console.log('addEmail - Using domain:', domain);
    const emailDiv = document.createElement('div');
    emailDiv.className = 'email-section';
    emailDiv.dataset.email = emailCount;
    emailDiv.innerHTML = `
        <label for="email${emailCount}Name">Email Name:</label>
        <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" placeholder="e.g., contact">
        <span id="email${emailCount}Domain">@${domain}</span>
        <button type="button" class="remove-email-btn" data-email="${emailCount}">Remove Email</button>
    `;
    container.appendChild(emailDiv);
    console.log('addEmail - New email section added - Email number:', emailCount);

    updateDomainPreview(type);
    console.log('addEmail - Email addition completed');
}

// Removes an email from the site request form.
function removeEmail(emailNum, type = 'merchant') {
    console.log('removeEmail - Removing email - Email number:', emailNum, 'Type:', type);
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('removeEmail - Current email count:', emailCount);

    if (emailCount <= 1) {
        console.warn('removeEmail - Cannot remove the last email');
        toastr.error('Cannot remove the last email');
        return;
    }

    const emailSection = document.querySelector(`.email-section[data-email="${emailNum}"]`);
    console.log('removeEmail - Email section to remove:', emailSection);
    if (emailSection) {
        emailSection.remove();
        emailCount--;
        localStorage.setItem(`${type}EmailCount`, emailCount);
        console.log('removeEmail - Email removed, new email count:', emailCount);
        updateDomainPreview(type);
    } else {
        console.error('removeEmail - Email section not found - Email number:', emailNum);
    }
    console.log('removeEmail - Removal completed');
}

// Updates the domain preview and email domain spans for the site request.
function updateDomainPreview(type = 'merchant') {
    console.log('updateDomainPreview - Updating domain preview - Type:', type);
    const domain = document.getElementById('preferredDomain')?.value || (type === 'merchant' ? 'mystore.uk' : 'mycommunity.org');
    console.log('updateDomainPreview - Domain value:', domain);

    const previewElement = document.getElementById('domainPreview');
    if (previewElement) {
        previewElement.textContent = `@${domain}`;
        console.log('updateDomainPreview - Updated domain preview to:', `@${domain}`);
    }

    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('updateDomainPreview - Email count:', emailCount);
    for (let i = 1; i <= emailCount; i++) {
        const domainSpan = document.getElementById(`email${i}Domain`);
        console.log('updateDomainPreview - Checking domain span - ID:', `email${i}Domain`, 'Element:', domainSpan);
        if (domainSpan) {
            domainSpan.textContent = `@${domain}`;
            console.log('updateDomainPreview - Updated email domain - ID:', `email${i}Domain`, 'to:', `@${domain}`);
        }
    }
    console.log('updateDomainPreview - Update completed');
}

// Checks domain availability for the site request.
async function checkDomainAvailability() {
    console.log('checkDomainAvailability - Starting domain availability check');
    const domainInput = document.getElementById('preferredDomain');
    const domain = domainInput?.value;
    console.log('checkDomainAvailability - Domain to check:', domain);

    const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!domain) {
        console.warn('checkDomainAvailability - No domain provided');
        toastr.error('Please enter a preferred domain name');
        return false;
    }
    if (!domainRegex.test(domain)) {
        console.warn('checkDomainAvailability - Invalid domain format - Domain:', domain);
        toastr.error('Invalid domain name (e.g., mystore.uk)');
        return false;
    }

    console.log('checkDomainAvailability - Domain format valid, proceeding with check');
    toastr.info(`Checking availability for ${domain}...`);

    try {
        const startTime = Date.now();
        const response = await fetch(`https://clubmadeira.io/check-domain?domain=${encodeURIComponent(domain)}`, {
            method: 'GET',
            credentials: 'same-origin'
        });
        const duration = Date.now() - startTime;
        console.log('checkDomainAvailability - Fetch response received - Status:', response.status, 'Duration:', `${duration}ms`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('checkDomainAvailability - Fetch failed - Status:', response.status, 'Error text:', errorText);
            if (response.status === 403) {
                throw new Error('Permission denied - please log in');
            }
            throw new Error(`Server error: ${errorText}`);
        }

        const result = await response.json();
        console.log('checkDomainAvailability - Availability result:', JSON.stringify(result));
        if (result.available) {
            console.log('checkDomainAvailability - Domain available:', domain);
            toastr.success(`${result.domain} is available!`);
            return true;
        } else {
            console.warn('checkDomainAvailability - Domain not available:', domain);
            toastr.error(`${result.domain} is not available`);
            if (domainInput) domainInput.value = '';
            return false;
        }
    } catch (error) {
        console.error('checkDomainAvailability - Error checking domain - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to check domain availability: ${error.message}`);
        return false;
    }
}

// Loads TinyMCE editor for site request content editing.
async function loadTinyMCE() {
    console.log('loadTinyMCE - Starting TinyMCE load');
    if (typeof tinymce !== 'undefined' && tinymce.init) {
        console.log('loadTinyMCE - TinyMCE already loaded');
        initializeTinyMCE();
        return;
    }

    console.log('loadTinyMCE - Loading TinyMCE script');
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js';
        script.referrerpolicy = 'origin';
        document.head.appendChild(script);
        console.log('loadTinyMCE - Script element added to head:', script.src);

        script.onload = () => {
            console.log('loadTinyMCE - TinyMCE script loaded successfully');
            initializeTinyMCE();
            resolve();
        };
        script.onerror = () => {
            console.error('loadTinyMCE - Failed to load TinyMCE script');
            toastr.error('Failed to load rich text editor');
            reject(new Error('TinyMCE load failed'));
        };
    });
}

// Initializes TinyMCE editor for site request content editing with a specific selector.
function initializeTinyMCE(selector = 'textarea[name$="Content"], #aboutStore, #aboutCommunity') {
    console.log('initializeTinyMCE - Starting TinyMCE initialization - Selector:', selector);
    if (!window.tinymce) {
        console.error('initializeTinyMCE - TinyMCE not available');
        return;
    }

    tinymce.remove(selector);
    console.log('initializeTinyMCE - Removed existing TinyMCE instances for selector:', selector);

    tinymce.init({
        selector: selector,
        height: 200,
        menubar: false,
        plugins: 'lists',
        toolbar: 'bold italic | bullist numlist',
        setup: editor => {
            editor.on('init', () => {
                console.log('initializeTinyMCE - TinyMCE editor initialized for:', editor.id);
            });
        }
    });
    console.log('initializeTinyMCE - TinyMCE initialization completed');
}

// Generates a formatted timestamp for site request forms.
function getCurrentTimestamp() {
    console.log('getCurrentTimestamp - Generating current timestamp');
    const now = new Date();
    console.log('getCurrentTimestamp - Current date object:', now);
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    console.log('getCurrentTimestamp - Extracted components - Year:', year, 'Month:', month, 'Day:', day, 'Hours:', hours, 'Minutes:', minutes, 'Seconds:', seconds);
    const timestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    console.log('getCurrentTimestamp - Generated timestamp:', timestamp);
    return timestamp;
}

// Saves the site request form data for either a merchant store or community site.
async function saveSiteRequest(type = 'merchant') {
    console.log('saveSiteRequest - Starting site request save - Type:', type);
    const userId = document.getElementById('userId')?.value || localStorage.getItem('userId');
    console.log('saveSiteRequest - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveSiteRequest - User ID not found in session or DOM');
        toastr.error('User ID not found in session');
        return;
    }

    const nameField = type === 'merchant' ? 'storeName' : 'communityName';
    const aboutField = type === 'merchant' ? 'aboutStore' : 'aboutCommunity';
    const logoField = type === 'merchant' ? 'storeLogos' : 'communityLogos';
    const defaultDomain = type === 'merchant' ? 'mystore.uk' : 'mycommunity.org';

    const siteRequest = {
        userId: userId,
        type: type,
        [nameField]: document.getElementById(nameField)?.value.trim() || '',
        [aboutField]: tinymce.get(aboutField)?.getContent() || document.getElementById(aboutField)?.value || '',
        [logoField]: [],
        colorPrefs: document.getElementById('colorPrefs')?.value.trim() || '',
        stylingDetails: document.getElementById('stylingDetails')?.value.trim() || '',
        preferredDomain: document.getElementById('preferredDomain')?.value.trim() || defaultDomain,
        emails: [],
        pages: [],
        widgets: Array.from(document.querySelectorAll('input[name="widgets"]:checked')).map(cb => cb.value)
    };
    console.log('saveSiteRequest - Initial site request object:', JSON.stringify(siteRequest));

    // Validation
    if (!siteRequest[nameField]) {
        console.warn('saveSiteRequest - Name field is empty - Field:', nameField);
        toastr.error(`${type === 'merchant' ? 'Store' : 'Community'} name is required`);
        return;
    }

    const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!domainRegex.test(siteRequest.preferredDomain)) {
        console.warn('saveSiteRequest - Invalid domain format - Domain:', siteRequest.preferredDomain);
        toastr.error(`Invalid domain name (e.g., ${defaultDomain})`);
        return;
    }

    // Handle logos
    const logoFiles = document.getElementById(logoField)?.files || [];
    console.log('saveSiteRequest - Logo files count:', logoFiles.length);
    if (logoFiles.length > 5) {
        console.warn('saveSiteRequest - Too many logos - Count:', logoFiles.length);
        toastr.error('Maximum of 5 logos allowed');
        return;
    }
    for (let i = 0; i < logoFiles.length; i++) {
        const reader = new FileReader();
        await new Promise(resolve => {
            reader.onload = () => {
                siteRequest[logoField].push(reader.result);
                console.log('saveSiteRequest - Added logo - Index:', i, 'Result length:', reader.result.length);
                resolve();
            };
            reader.readAsDataURL(logoFiles[i]);
        });
    }

    // Collect emails
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('saveSiteRequest - Collecting emails - Email count:', emailCount);
    for (let i = 1; i <= emailCount; i++) {
        const emailInput = document.getElementById(`email${i}Name`);
        if (emailInput && emailInput.value.trim()) {
            siteRequest.emails.push(emailInput.value.trim());
            console.log('saveSiteRequest - Added email - Index:', i, 'Value:', emailInput.value.trim());
        }
    }

    // Collect pages
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('saveSiteRequest - Collecting pages - Page count:', pageCount);
    for (let i = 1; i <= pageCount; i++) {
        const nameInput = document.getElementById(`page${i}Name`);
        const contentEditor = tinymce.get(`page${i}Content`);
        const contentFallback = document.getElementById(`page${i}Content`);
        const imagesInput = document.getElementById(`page${i}Images`);
        if (nameInput && nameInput.value.trim()) {
            const page = {
                name: nameInput.value.trim(),
                content: contentEditor ? contentEditor.getContent() : (contentFallback?.value || ''),
                images: []
            };
            console.log('saveSiteRequest - Processing page - Index:', i, 'Name:', page.name);

            if (imagesInput && imagesInput.files.length > 0) {
                for (let j = 0; j < imagesInput.files.length; j++) {
                    const reader = new FileReader();
                    await new Promise(resolve => {
                        reader.onload = () => {
                            page.images.push(reader.result);
                            console.log('saveSiteRequest - Added image to page - Page:', i, 'Image index:', j, 'Result length:', reader.result.length);
                            resolve();
                        };
                        reader.readAsDataURL(imagesInput.files[j]);
                    });
                }
            }
            siteRequest.pages.push(page);
        }
    }

    const minPages = type === 'merchant' ? 2 : 1;
    if (siteRequest.pages.length < minPages || (type === 'merchant' && (!siteRequest.pages.some(p => p.name === 'Home') || !siteRequest.pages.some(p => p.name === 'Returns Policy')))) {
        console.warn('saveSiteRequest - Insufficient or missing required pages - Pages:', siteRequest.pages.length, 'Required:', minPages);
        toastr.error(type === 'merchant' ? 'Home and Returns Policy pages are required' : 'At least one page is required');
        return;
    }

    // Save to server
    try {
        console.log('saveSiteRequest - Sending site request to server - URL:', `${apiUrl}/${userId}/siterequest`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${apiUrl}/${userId}/siterequest`, {
            method: 'POST',
            body: JSON.stringify(siteRequest)
        });
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('saveSiteRequest - No response from fetch');
            toastr.error('Failed to save site request: No server response');
            return;
        }
        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveSiteRequest - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Failed to save site request: ${response.status} - ${errorText}`);
        }

        console.log('saveSiteRequest - Save successful - Duration:', `${duration}ms`);
        toastr.success(`${type === 'merchant' ? 'Store' : 'Site'} request saved successfully`);
    } catch (error) {
        console.error('saveSiteRequest - Error saving site request - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error saving ${type === 'merchant' ? 'store' : 'site'} request: ${error.message}`);
    }
    console.log('saveSiteRequest - Save process completed');
}
static/js/user-management.js
// user-management.js
// Purpose: Manages user-specific settings and Wix client ID operations.

// Loads user settings into the DOM.
async function loadSettings() {
    console.log('loadSettings - Starting settings load');
    const userId = localStorage.getItem('userId');
    console.log('loadSettings - Retrieved userId:', userId);

    if (!userId) {
        console.error('loadSettings - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('loadSettings - Fetching settings via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/user`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/user`);
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadSettings - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to fetch settings: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadSettings - Settings fetched - Data:', JSON.stringify(data), 'Duration:', `${duration}ms`);

        // Update DOM with settings
        const referrerId = document.getElementById('referrerId');
        const contactName = document.getElementById('contactName');
        const websiteUrl = document.getElementById('websiteUrl');
        const emailAddress = document.getElementById('emailAddress');
        const phoneNumber = document.getElementById('phoneNumber');

        if (referrerId) referrerId.textContent = userId;
        if (contactName) contactName.value = data.contact_name || '';
        if (websiteUrl) websiteUrl.value = data.website_url || '';
        if (emailAddress) emailAddress.value = data.email_address || '';
        if (phoneNumber) phoneNumber.value = data.phone_number || '';

        console.log('loadSettings - DOM updated - Fields:', {
            referrerId: userId,
            contactName: data.contact_name || '',
            websiteUrl: data.website_url || '',
            emailAddress: data.email_address || '',
            phoneNumber: data.phone_number || ''
        });
    } catch (error) {
        console.error('loadSettings - Error loading settings - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading settings: ${error.message}`);
    }
    console.log('loadSettings - Settings load completed');
}

// Saves user settings from the DOM.
async function saveSettings(settings) {
    console.log('saveSettings - Starting settings save - Settings:', JSON.stringify(settings));
    const userId = localStorage.getItem('userId');
    console.log('saveSettings - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveSettings - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('saveSettings - Sending settings via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/user`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/user`, {
            method: 'PUT',
            body: JSON.stringify(settings)
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveSettings - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save settings: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveSettings - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Settings saved successfully');
    } catch (error) {
        console.error('saveSettings - Error saving settings - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save settings: ${error.message}`);
    }
    console.log('saveSettings - Save process completed');
}

// Loads Wix client ID into the DOM.
async function loadWixClientId() {
    console.log('loadWixClientId - Starting Wix client ID load');
    const userId = localStorage.getItem('userId');
    console.log('loadWixClientId - Retrieved userId:', userId);

    if (!userId) {
        console.error('loadWixClientId - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('loadWixClientId - Fetching Wix client ID via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/wix-client-id`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/wix-client-id`);
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadWixClientId - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to fetch Wix client ID: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadWixClientId - Wix client ID fetched - Data:', JSON.stringify(data), 'Duration:', `${duration}ms`);

        // Update DOM with Wix client ID
        const wixClientIdField = document.getElementById('wixClientId');
        if (wixClientIdField) {
            wixClientIdField.value = data.client_id || data.clientId || ''; // Flexible key name
            console.log('loadWixClientId - DOM updated - wixClientId:', data.client_id || data.clientId || '');
        } else {
            console.warn('loadWixClientId - Wix client ID field not found - ID: wixClientId');
        }
    } catch (error) {
        console.error('loadWixClientId - Error loading Wix client ID - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading Wix client ID: ${error.message}`);
    }
    console.log('loadWixClientId - Wix client ID load completed');
}

// Saves Wix client ID from the DOM.
async function saveWixClientId(clientId) {
    console.log('saveWixClientId - Starting Wix client ID save - Client ID:', clientId);
    const userId = localStorage.getItem('userId');
    console.log('saveWixClientId - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveWixClientId - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('saveWixClientId - Sending Wix client ID via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/wix-client-id`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/wix-client-id`, {
            method: 'POST',
            body: JSON.stringify({ clientId })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveWixClientId - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save Wix client ID: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveWixClientId - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Wix client ID saved successfully');
    } catch (error) {
        console.error('saveWixClientId - Error saving Wix client ID - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save Wix client ID: ${error.message}`);
    }
    console.log('saveWixClientId - Save process completed');
}
static/old/admin copy.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Admin</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            display: block;
        }
        .header { 
            height: 150px; 
            width: 100%;
            background-color: #f4f4f4; 
            margin-bottom: 25px; 
            overflow: hidden;
            position: relative;
            display: block;
        }
        .header-content { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .main-container { 
            max-width: 1200px; 
            margin: 0 auto; 
            display: flex; 
            gap: 20px; 
        }
        .menu-container { 
            flex: 1; 
            max-width: 300px; 
        }
        .content-container { 
            flex: 2; 
        }
        .menu { 
            margin-bottom: 20px; 
            text-align: left; 
        }
        .menu button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 14px; 
            text-align: left; 
            width: 100%; 
            margin-bottom: 5px; 
            display: block; 
        }
        .menu button:hover { 
            background-color: #0056b3; 
        }
        .submenu { 
            display: none; 
            padding-left: 20px; 
        }
        .submenu.open { 
            display: block; 
        }
        .section { 
            display: none; 
        }
        .section.active { 
            display: block; 
        }
        .form { 
            display: flex; 
            flex-direction: column; 
            gap: 10px; 
            max-width: 400px; 
        }
        .form label { 
            font-weight: bold; 
        }
        .form input, .form select { 
            padding: 5px; 
        }
        .form button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            cursor: pointer; 
        }
        .form button:hover { 
            background-color: #0056b3; 
        }
        .signup-instructions { 
            margin-top: 15px; 
            font-size: 0.9em; 
            color: #555; 
        }
        .signup-instructions a { 
            color: #007BFF; 
            text-decoration: none; 
        }
        .signup-instructions a:hover { 
            text-decoration: underline; 
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
        }
        th, td { 
            border: 1px solid #ddd; 
            padding: 8px; 
            text-align: left; 
        }
        .deals-table th { 
            background-color: #f2f2f2; 
        }
        .treeview { 
            max-height: 600px; 
            overflow-y: auto; 
            margin-bottom: 10px; 
        }
        .treeview, .treeview ul, .treeview li { 
            list-style-type: none; 
            padding: 0; 
            margin: 0; 
        }
        .treeview .node { 
            display: flex; 
            align-items: center; 
        }
        .treeview .toggle { 
            cursor: pointer; 
            width: 20px; 
            text-align: center; 
            font-weight: bold; 
        }
        .treeview .subcategories { 
            display: none; 
            padding-left: 20px; 
        }
        .treeview .subcategories.open { 
            display: block; 
        }
        #toast-container > .toast-success { 
            background-color: #28a745; 
            border-color: #218838; 
        }
        #toast-container > .toast-error { 
            background-color: #dc3545; 
            border-color: #c82333; 
        }
        .action-cell { 
            display: flex; 
            gap: 10px; 
            align-items: center; 
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content" id="brandingContent">
            <!-- Branding content will be loaded here -->
        </div>
    </div>
    <div class="main-container">
        <div class="menu-container">
            <div class="menu">
                <button data-section="deal_listings">Deal Listings</button>
                <button data-submenu="affiliatePrograms" data-section="affiliateProgramsIntro">Affiliate Programs <i class="fas fa-caret-down"></i></button>
                <div id="affiliatePrograms" class="submenu">
                    <button data-section="amazon_uk">Amazon UK</button>
                    <button data-section="ebay_uk">eBay UK</button>
                    <button data-section="awin">Awin</button>
                    <button data-section="cj">CJ</button>
                    <button data-section="textmagic">TextMagic</button>
                    <button data-section="tiny">tiny</button>
                </div>
                <button data-submenu="userManagement" data-section="userManagementIntro">User Management <i class="fas fa-caret-down"></i></button>
                <div id="userManagement" class="submenu">
                    <button data-section="partners">Partners</button>
                    <button data-section="communities">Communities</button>
                    <button data-section="merchants">Merchants</button>
                </div>
                <button data-submenu="testScripts" data-section="testScriptsIntro">Test Scripts <i class="fas fa-caret-down"></i></button>
                <div id="testScripts" class="submenu">
                    <button data-href="/partner">Partner</button>
                    <button data-href="/community">Community</button>
                    <button data-href="/merchant">Merchant</button>
                    <button data-submenu="referralTests" data-section="referralTestsIntro">Referral Tests <i class="fas fa-caret-down"></i></button>
                    <div id="referralTests" class="submenu">
                        <button data-section="page_visit_test">Page Visit Referral Test</button>
                        <button data-section="order_test">Order Referral Test</button>
                    </div>
                </div>
                <button id="logOffBtn" style="background-color: #dc3545;">Log Off</button>
            </div>
        </div>
        <div class="content-container">
            <div id="welcome" class="section">
                <h2>Welcome to Admin Dashboard</h2>
                <p>This is the main administration tool for managing your affiliate programs and deal listings.</p>
                <p>Use the menu on the left to:</p>
                <ul>
                    <li>View and filter discounted deals in "Deal Listings"</li>
                    <li>Manage affiliate credentials under "Affiliate Programs"</li>
                    <li>Manage users under "User Management"</li>
                    <li>Test referral tracking with "Test Scripts"</li>
                </ul>
            </div>

            <div id="deal_listings" class="section">
                <h2>Discounted Deal Listings</h2>
                <p>This section displays all currently active deal listings available across your affiliate programs.</p>
                <div style="display: flex; gap: 20px;">
                    <div style="flex: 1; max-width: 300px;">
                        <h3>Categories</h3>
                        <div class="treeview" id="categoryTree"></div>
                    </div>
                    <div style="flex: 2;">
                        <table class="deals-table">
                            <thead>
                                <tr>
                                    <th>Category</th>
                                    <th>Title</th>
                                    <th>URL</th>
                                    <th>Price</th>
                                    <th>Original</th>
                                    <th>Discount %</th>
                                    <th>Image</th>
                                    <th>QTY</th>
                                </tr>
                            </thead>
                            <tbody id="dealList"></tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div id="affiliateProgramsIntro" class="section">
                <h2>Affiliate Programs</h2>
                <p>Use this section to manage your affiliate program credentials.</p>
                <p>Select an affiliate program from the menu to enter or update your API keys, access tokens, or other necessary credentials.</p>
            </div>

            <div id="amazon_uk" class="section">
                <h2>Amazon UK Credentials</h2>
                <div class="form">
                    <label for="amazonAccessKey">Access Key:</label>
                    <input type="text" id="amazonAccessKey" placeholder="Enter Access Key">
                    <label for="amazonSecretKey">Secret Key:</label>
                    <input type="text" id="amazonSecretKey" placeholder="Enter Secret Key">
                    <label for="amazonAssociateTag">Associate Tag:</label>
                    <input type="text" id="amazonAssociateTag" placeholder="Enter Associate Tag">
                    <label for="amazonCountry">Country:</label>
                    <input type="text" id="amazonCountry" placeholder="Enter Country (e.g., UK)">
                    <button data-affiliate="amazon_uk">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Visit <a href="https://affiliate-program.amazon.com/" target="_blank">Amazon Associates</a>.
                </div>
            </div>

            <div id="ebay_uk" class="section">
                <h2>eBay UK Credentials</h2>
                <div class="form">
                    <label for="ebayAppId">App ID:</label>
                    <input type="text" id="ebayAppId" placeholder="Enter App ID">
                    <button data-affiliate="ebay_uk">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Go to <a href="https://partnernetwork.ebay.com/" target="_blank">eBay Partner Network</a>.
                </div>
            </div>

            <div id="awin" class="section">
                <h2>Awin Credentials</h2>
                <div class="form">
                    <label for="awinApiToken">API Token:</label>
                    <input type="text" id="awinApiToken" placeholder="Enter API Token">
                    <button data-affiliate="awin">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Visit <a href="https://www.awin.com/" target="_blank">Awin</a>.
                </div>
            </div>

            <div id="cj" class="section">
                <h2>CJ Credentials</h2>
                <div class="form">
                    <label for="cjApiKey">API Key:</label>
                    <input type="text" id="cjApiKey" placeholder="Enter API Key">
                    <label for="cjWebsiteId">Website ID:</label>
                    <input type="text" id="cjWebsiteId" placeholder="Enter Website ID">
                    <button data-affiliate="cj">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Go to <a href="https://www.cj.com/" target="_blank">CJ Affiliate</a>.
                </div>
            </div>

            <div id="textmagic" class="section">
                <h2>TextMagic Credentials</h2>
                <div class="form">
                    <label for="textmagicUsername">Username:</label>
                    <input type="text" id="textmagicUsername" placeholder="Enter Username">
                    <label for="textmagicApiKey">API Key:</label>
                    <input type="text" id="textmagicApiKey" placeholder="Enter API Key">
                    <button data-affiliate="textmagic">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Visit <a href="https://www.textmagic.com/" target="_blank">TextMagic</a>.
                </div>
            </div>

            <div id="tiny" class="section">
                <h2>tiny Credentials</h2>
                <div class="form">
                    <label for="tinyApiKey">API Key:</label>
                    <input type="text" id="tinyApiKey" placeholder="Enter API Key">
                    <button data-affiliate="tiny">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Visit <a href="https://www.tiny.cloud/" target="_blank">tiny</a>.
                </div>
            </div>

            <div id="userManagementIntro" class="section">
                <h2>User Management</h2>
                <p>This section allows you to manage different types of users in your system.</p>
                <p>Select a user type from the menu to view their details or modify their permissions:</p>
                <ul>
                    <li><strong>Partners:</strong> Manage users with Partner permissions.</li>
                    <li><strong>Communities:</strong> View community users.</li>
                    <li><strong>Merchants:</strong> Manage merchant users.</li>
                </ul>
            </div>

            <div id="merchants" class="section">
                <h2>Merchant Management</h2>
                <table>
                    <thead>
                        <tr><th>USERid</th><th>Contact Name</th><th>Email</th><th>Actions</th></tr>
                    </thead>
                    <tbody id="merchantsList"></tbody>
                </table>
            </div>

            <div id="communities" class="section">
                <h2>Communities Management</h2>
                <table>
                    <thead>
                        <tr><th>USERid</th><th>Contact Name</th><th>Email</th></tr>
                    </thead>
                    <tbody id="communitiesList"></tbody>
                </table>
            </div>

            <div id="partners" class="section">
                <h2>Partner Management</h2>
                <table>
                    <thead>
                        <tr><th>USERid</th><th>Contact Name</th><th>Email</th><th>Actions</th></tr>
                    </thead>
                    <tbody id="partnersList"></tbody>
                </table>
            </div>

            <div id="testScriptsIntro" class="section">
                <h2>Test Scripts</h2>
                <p>Use this section to test referral tracking and other scripts.</p>
                <p>Select an option from the menu to visit endpoints or run referral tests under "Referral Tests."</p>
            </div>

            <div id="referralTestsIntro" class="section">
                <h2>Referral Tests</h2>
                <p>This section contains tools to test referral tracking functionality.</p>
                <p>Choose "Page Visit Referral Test" or "Order Referral Test" to submit test data and verify tracking behavior.</p>
            </div>

            <div id="page_visit_test" class="section">
                <h2>Page Visit Referral Test</h2>
                <div class="form">
                    <form id="pageVisitForm">
                        <table>
                            <tr><td><label for="pageReferer">Referer:</label></td><td><select id="pageReferer" name="referer"></select></td></tr>
                            <tr><td><label for="page">Page:</label></td><td><input type="text" id="page" name="page" value="/home"></td></tr>
                            <tr><td><label for="pageTimestamp">Timestamp:</label></td><td><input type="text" id="pageTimestamp" name="timestamp"></td></tr>
                            <tr><td colspan="2"><button type="submit">Submit Page Visit</button></td></tr>
                        </table>
                    </form>
                </div>
            </div>

            <div id="order_test" class="section">
                <h2>Order Referral Test</h2>
                <div class="form">
                    <form id="orderForm">
                        <table>
                            <tr><td><label for="orderReferer">Referer:</label></td><td><select id="orderReferer" name="referer"></select></td></tr>
                            <tr><td><label for="orderId">Order ID:</label></td><td><input type="text" id="orderId" name="orderId" value="ORD12345"></td></tr>
                            <tr><td><label for="buyer">Buyer Name:</label></td><td><input type="text" id="buyer" name="buyer" value="John Doe"></td></tr>
                            <tr><td><label for="total">Total Amount (£):</label></td><td><input type="number" id="total" name="total" value="99.99" step="0.01"></td></tr>
                            <tr><td><label for="orderTimestamp">Timestamp:</label></td><td><input type="text" id="orderTimestamp" name="timestamp"></td></tr>
                            <tr><td colspan="2"><button type="submit">Submit Order</button></td></tr>
                        </table>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables defined once
        if (typeof window.apiUrl === 'undefined') window.apiUrl = 'https://clubmadeira.io';
        if (typeof window.userPermissions === 'undefined') window.userPermissions = [];
        if (typeof window.currentState === 'undefined') window.currentState = { activeSection: 'welcome', openSubmenus: [] };

        (function() { // Self-executing function to isolate scope
            function decodeJWT(token) {
                if (!token || typeof token !== 'string') return null;
                if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) return null;
                const parts = token.split('.');
                try {
                    const base64Url = parts[1];
                    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                    return JSON.parse(jsonPayload);
                } catch (error) {
                    console.error('Error decoding JWT:', error.message);
                    return null;
                }
            }

            function initializeAdmin() {
                console.log('Initializing admin page');
                const token = localStorage.getItem('authToken');
                if (!token) {
                    window.location.href = '/';
                    return;
                }
                const decoded = decodeJWT(token);
                if (!decoded) {
                    window.location.href = '/';
                    return;
                }
                window.userPermissions = decoded.permissions || [];
                if (!window.userPermissions.includes('admin')) {
                    toastr.error('Permission denied: Admin permission required');
                    window.location.href = '/';
                    return;
                }
                loadBranding();
                restoreState();
                attachEventListeners();
            }

            toastr.options = { closeButton: true, progressBar: true, positionClass: 'toast-top-right', timeOut: 5000, showMethod: 'slideDown', hideMethod: 'slideUp' };

            async function fetchProtectedPage(url) {
                const token = localStorage.getItem('authToken');
                if (!token) {
                    toastr.error('No authentication token found. Please log in.');
                    window.location.href = '/';
                    return;
                }

                saveState();
                try {
                    const response = await fetch(`${window.apiUrl}${url}`, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': 'text/html'
                        }
                    });
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Server returned ${response.status}: ${errorText}`);
                    }
                    const html = await response.text();

                    // Reset global state to ensure a clean reinitialization
                    window.currentState = { activeSection: 'welcome', openSubmenus: [] };
                    window.userPermissions = [];

                    document.body.innerHTML = html;

                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    // Reload external scripts to ensure dependencies are fresh
                    const scripts = doc.querySelectorAll('script[src]');
                    const scriptPromises = [];
                    for (const script of scripts) {
                        const newScript = document.createElement('script');
                        newScript.src = script.src;
                        newScript.async = false;
                        document.head.appendChild(newScript);
                        scriptPromises.push(new Promise(resolve => {
                            newScript.onload = resolve;
                            newScript.onerror = () => {
                                console.error(`Failed to load script: ${script.src}`);
                                resolve();
                            };
                        }));
                    }
                    await Promise.all(scriptPromises);

                    // Execute inline scripts
                    doc.querySelectorAll('script:not([src])').forEach(script => {
                        if (script.innerHTML.trim()) {
                            try {
                                new Function(script.innerHTML)();
                            } catch (e) {
                                console.error('Error executing inline script:', e);
                            }
                        }
                    });

                    // Ensure admin initialization runs when returning to admin
                    if (url === '/admin') {
                        initializeAdmin();
                    }
                } catch (error) {
                    toastr.error(error.message || 'Failed to load protected page');
                    window.location.href = '/';
                }
            }

            function saveState() {
                const activeSection = document.querySelector('.section.active')?.id || 'welcome';
                const openSubmenus = Array.from(document.querySelectorAll('.submenu.open')).map(sub => sub.id);
                window.currentState = { activeSection, openSubmenus };
                localStorage.setItem('adminState', JSON.stringify(window.currentState));
            }

            function restoreState() {
                const savedState = JSON.parse(localStorage.getItem('adminState') || '{}');
                window.currentState = {
                    activeSection: savedState.activeSection || 'welcome',
                    openSubmenus: savedState.openSubmenus || []
                };
                showSection(window.currentState.activeSection);
                window.currentState.openSubmenus.forEach(submenuId => {
                    const submenu = document.getElementById(submenuId);
                    if (submenu) submenu.classList.add('open');
                });
            }

            function handleSectionClick(event) {
                const section = this.getAttribute('data-section');
                const submenu = this.getAttribute('data-submenu');
                if (submenu) toggleSubmenu(submenu);
                if (section) showSection(section);
            }

            function handleHrefClick() {
                const href = this.getAttribute('data-href');
                fetchProtectedPage(href);
            }

            function handleAffiliateClick() {
                const affiliate = this.getAttribute('data-affiliate');
                updateAffiliate(affiliate);
            }

            function attachEventListeners() {
                const sectionButtons = document.querySelectorAll('.menu button[data-section]');
                sectionButtons.forEach(button => {
                    button.removeEventListener('click', handleSectionClick);
                    button.addEventListener('click', handleSectionClick);
                });

                const hrefButtons = document.querySelectorAll('.menu button[data-href]');
                hrefButtons.forEach(button => {
                    button.removeEventListener('click', handleHrefClick);
                    button.addEventListener('click', handleHrefClick);
                });

                const affiliateButtons = document.querySelectorAll('.form button[data-affiliate]');
                affiliateButtons.forEach(button => {
                    button.removeEventListener('click', handleAffiliateClick);
                    button.addEventListener('click', handleAffiliateClick);
                });

                const logOffBtn = document.getElementById('logOffBtn');
                if (logOffBtn) {
                    logOffBtn.removeEventListener('click', logOff);
                    logOffBtn.addEventListener('click', logOff);
                }

                submitReferral('pageVisitForm', 'Page visit recorded successfully');
                submitReferral('orderForm', 'Order recorded successfully');
            }

            async function loadBranding() {
                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/branding`);
                    if (!response.ok) throw new Error(`Failed to fetch branding: ${response.status}`);
                    const data = await response.json();
                    document.getElementById('brandingContent').innerHTML = data.content || '<h1>Admin Dashboard</h1>';
                } catch (error) {
                    toastr.error(`Error loading branding: ${error.message}`);
                    document.getElementById('brandingContent').innerHTML = '<h1>Admin Dashboard</h1>';
                }
            }

            function getCurrentTimestamp() {
                const now = new Date();
                return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')}`;
            }

            async function authenticatedFetch(url, options = {}) {
                const token = localStorage.getItem('authToken');
                options.headers = {
                    ...options.headers,
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                };
                const response = await fetch(url, options);
                if (response.status === 401) {
                    toastr.error('Session expired. Please log in again.');
                    localStorage.removeItem('authToken');
                    window.location.href = '/';
                }
                return response;
            }

            function toggleSubmenu(submenuId) {
                const submenu = document.getElementById(submenuId);
                if (submenu) {
                    submenu.classList.toggle('open');
                    if (submenu.classList.contains('open') && !window.currentState.openSubmenus.includes(submenuId)) {
                        window.currentState.openSubmenus.push(submenuId);
                    } else if (!submenu.classList.contains('open')) {
                        window.currentState.openSubmenus = window.currentState.openSubmenus.filter(id => id !== submenuId);
                    }
                    saveState();
                }
            }

            function showSection(section) {
                document.querySelectorAll('.section').forEach(s => {
                    s.classList.remove('active');
                    s.style.display = 'none';
                });
                const activeSection = document.getElementById(section);
                if (activeSection) {
                    activeSection.classList.add('active');
                    activeSection.style.display = 'block';
                    window.currentState.activeSection = section;
                    saveState();
                    loadSection(section);
                }
            }

            async function loadSection(section) {
                if (section === 'welcome' || section === 'page_visit_test' || section === 'order_test' || 
                    section === 'affiliateProgramsIntro' || section === 'userManagementIntro' || 
                    section === 'testScriptsIntro' || section === 'referralTestsIntro') {
                    if (section === 'page_visit_test' || section === 'order_test') {
                        document.getElementById(section === 'page_visit_test' ? 'pageTimestamp' : 'orderTimestamp').value = getCurrentTimestamp();
                        await populateRefererDropdown(section === 'page_visit_test' ? 'pageReferer' : 'orderReferer');
                    }
                    return;
                }

                if (section === 'deal_listings') {
                    await loadCategories();
                    return;
                }

                if (section === 'merchants') {
                    await loadMerchants();
                    return;
                }

                if (section === 'communities') {
                    await loadCommunities();
                    return;
                }

                if (section === 'partners') {
                    await loadPartners();
                    return;
                }

                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/config`);
                    if (!response.ok) throw new Error(`Failed to fetch /config: ${response.status}`);
                    const data = await response.json();
                    const config = data.config[section] || {};

                    if (section === 'amazon_uk') {
                        document.getElementById('amazonAccessKey').value = config.ACCESS_KEY || '';
                        document.getElementById('amazonSecretKey').value = config.SECRET_KEY || '';
                        document.getElementById('amazonAssociateTag').value = config.ASSOCIATE_TAG || '';
                        document.getElementById('amazonCountry').value = config.COUNTRY || '';
                    } else if (section === 'ebay_uk') {
                        document.getElementById('ebayAppId').value = config.APP_ID || '';
                    } else if (section === 'awin') {
                        document.getElementById('awinApiToken').value = config.API_TOKEN || '';
                    } else if (section === 'cj') {
                        document.getElementById('cjApiKey').value = config.API_KEY || '';
                        document.getElementById('cjWebsiteId').value = config.WEBSITE_ID || '';
                    } else if (section === 'textmagic') {
                        document.getElementById('textmagicUsername').value = config.USERNAME || '';
                        document.getElementById('textmagicApiKey').value = config.API_KEY || '';
                    } else if (section === 'tiny') {
                        document.getElementById('tinyApiKey').value = config.API_KEY || '';
                    }
                    toastr.success(`Loaded credentials for ${section}`);
                } catch (error) {
                    toastr.error(`Error loading credentials: ${error.message}`);
                }
            }

            async function populateRefererDropdown(selectId) {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const communityUsers = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('community') && !permissions.includes('admin')) {
                            communityUsers.push({ USERid: user.USERid, contact_name: user.contact_name });
                        }
                    }

                    const select = document.getElementById(selectId);
                    select.innerHTML = '';
                    communityUsers.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.USERid;
                        option.text = user.contact_name;
                        select.appendChild(option);
                    });
                    if (communityUsers.length === 0) {
                        select.innerHTML = '<option value="">No community users found</option>';
                    }
                } catch (error) {
                    toastr.error(`Error loading referer options: ${error.message}`);
                    document.getElementById(selectId).innerHTML = '<option value="">Error loading users</option>';
                }
            }

            async function loadMerchants() {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const merchants = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('merchant') && !permissions.includes('admin')) {
                            merchants.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
                        }
                    }

                    updateUserTable('merchantsList', merchants, 'merchants');
                    toastr.success('Merchants loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading merchants: ${error.message}`);
                }
            }

            async function loadCommunities() {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const communities = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('community') && !permissions.includes('admin')) {
                            communities.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
                        }
                    }

                    updateUserTable('communitiesList', communities, 'communities');
                    toastr.success('Communities loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading communities: ${error.message}`);
                }
            }

            async function loadPartners() {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const partners = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('wixpro')) {
                            partners.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
                        }
                    }

                    updateUserTable('partnersList', partners, 'partners');
                    toastr.success('Partners loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading partners: ${error.message}`);
                }
            }

            function updateUserTable(tableId, users, section) {
                const tbody = document.getElementById(tableId);
                tbody.innerHTML = '';
                if (users.length === 0) {
                    const colspan = section === 'communities' ? 3 : 4;
                    tbody.innerHTML = `<tr><td colspan="${colspan}">No users found</td></tr>`;
                    return;
                }
                users.forEach(user => {
                    const row = document.createElement('tr');
                    let actionsHtml = '';
                    if (section !== 'communities') {
                        const hasValidated = user.permissions.includes('validated');
                        actionsHtml = `
                            <input type="checkbox" ${hasValidated ? 'checked' : ''} 
                                onchange="togglePermission('${user.USERid}', 'validated', '${section}', this.checked)">
                            Validated
                        `;
                        if (section === 'partners') {
                            const hasAdmin = user.permissions.includes('admin');
                            const hasMerchant = user.permissions.includes('merchant');
                            actionsHtml = `
                                <input type="checkbox" ${hasAdmin ? 'checked' : ''} 
                                    onchange="togglePermission('${user.USERid}', 'admin', '${section}', this.checked)">
                                Admin
                                <input type="checkbox" ${hasMerchant ? 'checked' : ''} 
                                    onchange="togglePermission('${user.USERid}', 'merchant', '${section}', this.checked)">
                                Merchant
                            ` + actionsHtml;
                        }
                    }
                    row.innerHTML = `
                        <td>${user.USERid}</td>
                        <td>${user.contact_name}</td>
                        <td>${user.email_address}</td>
                        ${section !== 'communities' ? `<td class="action-cell">${actionsHtml}</td>` : ''}
                    `;
                    tbody.appendChild(row);
                });
            }

            async function togglePermission(userId, permission, section, isChecked) {
                try {
                    const method = isChecked ? 'POST' : 'DELETE';
                    const response = await authenticatedFetch(`${window.apiUrl}/permissions/${userId}`, {
                        method: method,
                        body: JSON.stringify({ permission })
                    });
                    if (!response.ok) throw new Error(`Failed to ${isChecked ? 'add' : 'remove'} permission: ${response.status}`);
                    const data = await response.json();
                    toastr.success(data.message || `${isChecked ? 'Added' : 'Removed'} ${permission} permission for user ${userId}`);
                    loadSection(section);
                } catch (error) {
                    toastr.error(`Error: ${error.message}`);
                    loadSection(section);
                }
            }

            async function updateAffiliate(affiliate) {
                let credentials = {};
                if (affiliate === 'amazon_uk') {
                    credentials = {
                        ACCESS_KEY: document.getElementById('amazonAccessKey').value.trim(),
                        SECRET_KEY: document.getElementById('amazonSecretKey').value.trim(),
                        ASSOCIATE_TAG: document.getElementById('amazonAssociateTag').value.trim(),
                        COUNTRY: document.getElementById('amazonCountry').value.trim()
                    };
                } else if (affiliate === 'ebay_uk') {
                    credentials = { APP_ID: document.getElementById('ebayAppId').value.trim() };
                } else if (affiliate === 'awin') {
                    credentials = { API_TOKEN: document.getElementById('awinApiToken').value.trim() };
                } else if (affiliate === 'cj') {
                    credentials = {
                        API_KEY: document.getElementById('cjApiKey').value.trim(),
                        WEBSITE_ID: document.getElementById('cjWebsiteId').value.trim()
                    };
                } else if (affiliate === 'textmagic') {
                    credentials = {
                        USERNAME: document.getElementById('textmagicUsername').value.trim(),
                        API_KEY: document.getElementById('textmagicApiKey').value.trim()
                    };
                } else if (affiliate === 'tiny') {
                    credentials = { API_KEY: document.getElementById('tinyApiKey').value.trim() };
                }

                credentials = Object.fromEntries(Object.entries(credentials).filter(([_, v]) => v !== ''));
                if (Object.keys(credentials).length === 0) {
                    toastr.warning('No changes to update');
                    return;
                }

                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/config/${affiliate}`, {
                        method: 'PATCH',
                        body: JSON.stringify(credentials)
                    });
                    if (!response.ok) throw new Error(`Failed to update: ${response.status}`);
                    const data = await response.json();
                    toastr.success(`Update successful: ${data.message}`);
                } catch (error) {
                    toastr.error(`Error updating credentials: ${error.message}`);
                }
            }

            async function submitReferral(formId, successMessage) {
                const form = document.getElementById(formId);
                if (form.dataset.listenerAdded) return;
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const formData = new FormData(form);
                    const jsonData = Object.fromEntries(formData.entries());
                    try {
                        const response = await authenticatedFetch(`${window.apiUrl}/referal`, {
                            method: 'POST',
                            body: JSON.stringify(jsonData),
                        });
                        if (!response.ok) throw new Error((await response.json()).message || 'Unknown error');
                        const data = await response.json();
                        if (data.status === 'success') {
                            toastr.success(`${successMessage} - Referer: ${data.referer}`);
                        } else {
                            toastr.error(data.message || 'Unknown error');
                        }
                    } catch (error) {
                        toastr.error(error.message || 'Failed to connect to server');
                    }
                });
                form.dataset.listenerAdded = 'true';
            }

            function logOff() {
                if (confirm('Are you sure you want to log off?')) {
                    localStorage.removeItem('authToken');
                    localStorage.removeItem('adminState');
                    toastr.success('Logged off successfully');
                    setTimeout(() => window.location.href = '/', 1000);
                }
            }

            async function loadCategories() {
                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/categories`);
                    if (!response.ok) throw new Error(`Failed to fetch /categories: ${response.status}`);
                    const data = await response.json();
                    const tree = document.getElementById('categoryTree');
                    tree.innerHTML = '';
                    const ul = document.createElement('ul');
                    data.categories.forEach(cat => ul.appendChild(createTreeNode(cat)));
                    tree.appendChild(ul);
                    toastr.success('Categories loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading categories: ${error.message}`);
                }
            }

            function createTreeNode(category) {
                const li = document.createElement('li');
                const nodeDiv = document.createElement('div');
                nodeDiv.className = 'node';

                const toggle = document.createElement('span');
                toggle.className = 'toggle';
                toggle.textContent = '+';
                toggle.onclick = () => toggleSubcategories(category.id, toggle);

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = category.id;
                checkbox.onchange = () => handleCategorySelection(category.id, checkbox);

                const span = document.createElement('span');
                span.textContent = `${category.name} (${category.id})`;

                nodeDiv.appendChild(toggle);
                nodeDiv.appendChild(checkbox);
                nodeDiv.appendChild(span);
                li.appendChild(nodeDiv);

                const subUl = document.createElement('ul');
                subUl.className = 'subcategories';
                li.appendChild(subUl);

                return li;
            }

            async function toggleSubcategories(parentId, toggle) {
                const li = toggle.closest('li');
                const subUl = li.querySelector('.subcategories');

                if (subUl.classList.contains('open')) {
                    subUl.classList.remove('open');
                    toggle.textContent = '+';
                } else {
                    if (subUl.children.length === 0) {
                        try {
                            const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${parentId}`);
                            if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                            const data = await response.json();
                            if (data.categories.length === 0) {
                                toastr.info(`No subcategories for ${parentId}`);
                                return;
                            }
                            data.categories.forEach(cat => subUl.appendChild(createTreeNode(cat)));
                            toastr.success(`Subcategories for ${parentId} loaded successfully`);
                        } catch (error) {
                            toastr.error(`Error loading subcategories: ${error.message}`);
                            return;
                        }
                    }
                    subUl.classList.add('open');
                    toggle.textContent = '-';
                }
            }

            async function handleCategorySelection(categoryId, checkbox) {
                document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
                    if (cb !== checkbox) cb.checked = false;
                });

                if (checkbox.checked) {
                    try {
                        const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
                        if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
                        const data = await response.json();
                        const tbody = document.getElementById('dealList');
                        tbody.innerHTML = '';
                        data.products.forEach(product => tbody.appendChild(createDealRow(product)));
                        toastr.success(`Loaded ${data.count} discounted products for category ${categoryId}`);
                    } catch (error) {
                        toastr.error(`Error loading discounted products: ${error.message}`);
                        checkbox.checked = false;
                    }
                } else {
                    document.getElementById('dealList').innerHTML = '';
                }
            }

            function createDealRow(product) {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                return tr;
            }

            initializeAdmin();
        })();
    </script>
</body>
</html>
static/old/all.js
// admin-page.js
// Purpose: Manages page-specific functionality for the /admin page.

// Initializes the admin page with permission checks.
function initializeAdmin() {
    console.log('initializeAdmin - Initializing admin page');
    const token = localStorage.getItem('authToken');
    if (!token) {
        console.error('initializeAdmin - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeAdmin - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: Admin permission required');
        console.error('initializeAdmin - No admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    loadBranding();
    restoreState();
    attachEventListeners();
    console.log('initializeAdmin - Admin page initialized successfully');
}

// Updates affiliate program credentials.
async function updateAffiliate(affiliate) {
    console.log('updateAffiliate - Updating affiliate - Affiliate:', affiliate);
    let credentials = {};
    if (affiliate === 'amazon_uk') {
        credentials = {
            ACCESS_KEY: document.getElementById('amazonAccessKey').value.trim(),
            SECRET_KEY: document.getElementById('amazonSecretKey').value.trim(),
            ASSOCIATE_TAG: document.getElementById('amazonAssociateTag').value.trim(),
            COUNTRY: document.getElementById('amazonCountry').value.trim()
        };
    } else if (affiliate === 'ebay_uk') {
        credentials = { APP_ID: document.getElementById('ebayAppId').value.trim() };
    } else if (affiliate === 'awin') {
        credentials = { API_TOKEN: document.getElementById('awinApiToken').value.trim() };
    } else if (affiliate === 'cj') {
        credentials = {
            API_KEY: document.getElementById('cjApiKey').value.trim(),
            WEBSITE_ID: document.getElementById('cjWebsiteId').value.trim()
        };
    } else if (affiliate === 'textmagic') {
        credentials = {
            USERNAME: document.getElementById('textmagicUsername').value.trim(),
            API_KEY: document.getElementById('textmagicApiKey').value.trim()
        };
    } else if (affiliate === 'tiny') {
        credentials = { API_KEY: document.getElementById('tinyApiKey').value.trim() };
    }

    credentials = Object.fromEntries(Object.entries(credentials).filter(([_, v]) => v !== ''));
    if (Object.keys(credentials).length === 0) {
        console.warn('updateAffiliate - No changes to update');
        toastr.warning('No changes to update');
        return;
    }

    try {
        console.log('updateAffiliate - Sending update - URL:', `${window.apiUrl}/config/${affiliate}`);
        const response = await authenticatedFetch(`${window.apiUrl}/config/${affiliate}`, {
            method: 'PATCH',
            body: JSON.stringify(credentials)
        });
        if (!response.ok) throw new Error(`Failed to update: ${response.status}`);
        const data = await response.json();
        console.log('updateAffiliate - Update successful - Response:', JSON.stringify(data));
        toastr.success(`Update successful: ${data.message}`);
    } catch (error) {
        console.error('updateAffiliate - Error updating affiliate - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error updating credentials: ${error.message}`);
    }
}

// Submits referral form data (page visits or orders).
async function submitReferral(formId, successMessage) {
    console.log('submitReferral - Setting up referral submission - Form ID:', formId);
    const form = document.getElementById(formId);
    if (form.dataset.listenerAdded) return;
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('submitReferral - Form submitted - Form ID:', formId);
        const formData = new FormData(form);
        const jsonData = Object.fromEntries(formData.entries());
        try {
            console.log('submitReferral - Sending referral data - URL:', `${window.apiUrl}/referal`);
            const response = await authenticatedFetch(`${window.apiUrl}/referal`, {
                method: 'POST',
                body: JSON.stringify(jsonData),
            });
            if (!response.ok) throw new Error((await response.json()).message || 'Unknown error');
            const data = await response.json();
            if (data.status === 'success') {
                console.log('submitReferral - Referral recorded - Referer:', data.referer);
                toastr.success(`${successMessage} - Referer: ${data.referer}`);
            } else {
                throw new Error(data.message || 'Unknown error');
            }
        } catch (error) {
            console.error('submitReferral - Error submitting referral - Error:', error.message, 'Stack:', error.stack);
            toastr.error(error.message || 'Failed to connect to server');
        }
    });
    form.dataset.listenerAdded = 'true';
    console.log('submitReferral - Listener added - Form ID:', formId);
}

// Populates the referer dropdown with community users.
async function populateRefererDropdown(selectId) {
    console.log('populateRefererDropdown - Populating dropdown - Select ID:', selectId);
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('populateRefererDropdown - Users fetched - Count:', users.length);

        const communityUsers = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('community') && !permissions.includes('admin')) {
                communityUsers.push({ USERid: user.USERid, contact_name: user.contact_name });
            }
        }
        console.log('populateRefererDropdown - Community users filtered - Count:', communityUsers.length);

        const select = document.getElementById(selectId);
        select.innerHTML = '';
        communityUsers.forEach(user => {
            const option = document.createElement('option');
            option.value = user.USERid;
            option.text = user.contact_name;
            select.appendChild(option);
        });
        if (communityUsers.length === 0) {
            select.innerHTML = '<option value="">No community users found</option>';
        }
        console.log('populateRefererDropdown - Dropdown populated - Select ID:', selectId);
    } catch (error) {
        console.error('populateRefererDropdown - Error loading referer options - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading referer options: ${error.message}`);
        document.getElementById(selectId).innerHTML = '<option value="">Error loading users</option>';
    }
}

// Loads and displays merchant users.
async function loadMerchants() {
    console.log('loadMerchants - Loading merchants');
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('loadMerchants - Users fetched - Count:', users.length);

        const merchants = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('merchant') && !permissions.includes('admin')) {
                merchants.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
            }
        }
        console.log('loadMerchants - Merchants filtered - Count:', merchants.length);

        updateUserTable('merchantsList', merchants, 'merchants');
        toastr.success('Merchants loaded successfully');
    } catch (error) {
        console.error('loadMerchants - Error loading merchants - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading merchants: ${error.message}`);
    }
}

// Loads and displays community users.
async function loadCommunities() {
    console.log('loadCommunities - Loading communities');
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('loadCommunities - Users fetched - Count:', users.length);

        const communities = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('community') && !permissions.includes('admin')) {
                communities.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
            }
        }
        console.log('loadCommunities - Communities filtered - Count:', communities.length);

        updateUserTable('communitiesList', communities, 'communities');
        toastr.success('Communities loaded successfully');
    } catch (error) {
        console.error('loadCommunities - Error loading communities - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading communities: ${error.message}`);
    }
}

// Loads and displays partner users.
async function loadPartners() {
    console.log('loadPartners - Loading partners');
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('loadPartners - Users fetched - Count:', users.length);

        const partners = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('wixpro')) {
                partners.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
            }
        }
        console.log('loadPartners - Partners filtered - Count:', partners.length);

        updateUserTable('partnersList', partners, 'partners');
        toastr.success('Partners loaded successfully');
    } catch (error) {
        console.error('loadPartners - Error loading partners - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading partners: ${error.message}`);
    }
}

// Updates the user table for merchants, communities, or partners.
function updateUserTable(tableId, users, section) {
    console.log('updateUserTable - Updating table - Table ID:', tableId, 'Section:', section, 'User count:', users.length);
    const tbody = document.getElementById(tableId);
    tbody.innerHTML = '';
    if (users.length === 0) {
        const colspan = section === 'communities' ? 3 : 4;
        tbody.innerHTML = `<tr><td colspan="${colspan}">No users found</td></tr>`;
        console.log('updateUserTable - No users found - Table ID:', tableId);
        return;
    }
    users.forEach(user => {
        const row = document.createElement('tr');
        let actionsHtml = '';
        if (section !== 'communities') {
            const hasValidated = user.permissions.includes('validated');
            actionsHtml = `
                <input type="checkbox" ${hasValidated ? 'checked' : ''} 
                    onchange="togglePermission('${user.USERid}', 'validated', '${section}', this.checked)">
                Validated
            `;
            if (section === 'partners') {
                const hasAdmin = user.permissions.includes('admin');
                const hasMerchant = user.permissions.includes('merchant');
                actionsHtml = `
                    <input type="checkbox" ${hasAdmin ? 'checked' : ''} 
                        onchange="togglePermission('${user.USERid}', 'admin', '${section}', this.checked)">
                    Admin
                    <input type="checkbox" ${hasMerchant ? 'checked' : ''} 
                        onchange="togglePermission('${user.USERid}', 'merchant', '${section}', this.checked)">
                    Merchant
                ` + actionsHtml;
            }
        }
        row.innerHTML = `
            <td>${user.USERid}</td>
            <td>${user.contact_name}</td>
            <td>${user.email_address}</td>
            ${section !== 'communities' ? `<td class="action-cell">${actionsHtml}</td>` : ''}
        `;
        tbody.appendChild(row);
    });
    console.log('updateUserTable - Table updated - Table ID:', tableId);
}

// Toggles a user’s permission status.
async function togglePermission(userId, permission, section, isChecked) {
    console.log('togglePermission - Toggling permission - User ID:', userId, 'Permission:', permission, 'Section:', section, 'Checked:', isChecked);
    try {
        const method = isChecked ? 'POST' : 'DELETE';
        const response = await authenticatedFetch(`${window.apiUrl}/permissions/${userId}`, {
            method: method,
            body: JSON.stringify({ permission })
        });
        if (!response.ok) throw new Error(`Failed to ${isChecked ? 'add' : 'remove'} permission: ${response.status}`);
        const data = await response.json();
        console.log('togglePermission - Permission toggled - Response:', JSON.stringify(data));
        toastr.success(data.message || `${isChecked ? 'Added' : 'Removed'} ${permission} permission for user ${userId}`);
        loadSection(section); // Refresh section
    } catch (error) {
        console.error('togglePermission - Error toggling permission - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error: ${error.message}`);
        loadSection(section); // Refresh on error
    }
}

// Creates a deal row for discounted products (admin-specific).
function createDealRow(product) {
    console.log('createDealRow - Creating deal row - Product:', JSON.stringify(product));
    const tr = document.createElement('tr');
    const discountPercent = product.discount_percent || 
        (product.original_price > product.current_price 
            ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
            : 'N/A');
    tr.innerHTML = `
        <td>${product.category || 'N/A'}</td>
        <td>${product.title}</td>
        <td><a href="${product.product_url}" target="_blank">Link</a></td>
        <td>${product.current_price}</td>
        <td>${product.original_price}</td>
        <td>${discountPercent}</td>
        <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
        <td>${product.QTY || 'N/A'}</td>
    `;
    console.log('createDealRow - Deal row created - Product ID:', product.id || 'N/A');
    return tr;
}// category-management.js
// Purpose: Manages treeview functionality for displaying and editing nested category information (used in community.html and admin.html).

// Creates a treeview node for category display with configurable behavior.
function createTreeNode(category, level = 0, isAdmin = false, savedCategories = []) {
    console.log('createTreeNode - Creating node - Category:', JSON.stringify(category), 'Level:', level, 'IsAdmin:', isAdmin);
    const li = document.createElement('li');
    const nodeDiv = document.createElement('div');
    nodeDiv.className = 'node';

    const toggle = document.createElement('span');
    toggle.className = 'toggle';
    toggle.setAttribute('data-id', category.id);
    toggle.textContent = '+'; // Default to '+' assuming subcategories may exist
    toggle.addEventListener('click', () => toggleSubcategories(category.id, toggle));

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = category.id;
    if (isAdmin) {
        checkbox.addEventListener('change', () => handleCategorySelection(category.id, checkbox));
    } else {
        checkbox.checked = savedCategories.includes(category.id.toString());
    }

    const span = document.createElement('span');
    span.textContent = `${category.name} (${category.id})`;

    nodeDiv.appendChild(toggle);
    nodeDiv.appendChild(checkbox);
    nodeDiv.appendChild(span);
    li.appendChild(nodeDiv);

    const subUl = document.createElement('ul');
    subUl.className = 'subcategories';
    li.appendChild(subUl);

    console.log('createTreeNode - Node created - Category ID:', category.id);
    return li;
}

// Loads category data for treeview rendering, with options for admin or community context.
async function loadCategories(userId = null, isAdmin = false) {
    console.log('loadCategories - Starting category load - UserID:', userId, 'IsAdmin:', isAdmin);
    let savedCategories = [];
    try {
        console.log('loadCategories - Fetching categories via authenticatedFetch');
        const startTime = Date.now();

        // Load user's saved categories if not admin
        if (!isAdmin && userId) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`);
            if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
            const userData = await userResponse.json();
            savedCategories = userData.categories || [];
            console.log('loadCategories - Saved categories fetched - Count:', savedCategories.length);
        }

        // Load all categories
        const response = await authenticatedFetch(`${window.apiUrl}/categories`);
        if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
        const data = await response.json();
        const duration = Date.now() - startTime;
        console.log('loadCategories - Categories fetched - Count:', data.categories?.length, 'Duration:', `${duration}ms`);

        const treeElement = document.getElementById('categoryTree');
        if (!treeElement) {
            console.error('loadCategories - Tree element not found - ID: categoryTree');
            return;
        }
        treeElement.innerHTML = '';
        const ul = document.createElement('ul');

        // Filter top-level categories for community, show all for admin
        const categoriesToRender = isAdmin ? data.categories : data.categories.filter(cat => !cat.parent_id);
        console.log('loadCategories - Categories to render - Count:', categoriesToRender.length);

        categoriesToRender.forEach(category => {
            const node = createTreeNode(category, 0, isAdmin, savedCategories);
            ul.appendChild(node);
        });
        treeElement.appendChild(ul);

        // Reattach listeners for community context
        if (!isAdmin) attachEventListeners();

        console.log('loadCategories - Treeview rendered successfully');
        toastr.success('Categories loaded successfully');
    } catch (error) {
        console.error('loadCategories - Error loading categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to load categories');
    }
    console.log('loadCategories - Category load completed');
}

// Toggles visibility of subcategories in treeview and loads them dynamically if needed.
async function toggleSubcategories(categoryId, toggle) {
    console.log('toggleSubcategories - Toggling subcategories - Category ID:', categoryId);
    const li = toggle.closest('li');
    const subUl = li.querySelector('.subcategories');

    if (!subUl) {
        console.error('toggleSubcategories - Subcategories element not found - Category ID:', categoryId);
        return;
    }

    if (subUl.classList.contains('open')) {
        subUl.classList.remove('open');
        toggle.textContent = '+';
        console.log('toggleSubcategories - Subcategories closed - ID:', categoryId);
    } else {
        if (subUl.children.length === 0) {
            try {
                console.log('toggleSubcategories - Fetching subcategories - Parent ID:', categoryId);
                const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${categoryId}`);
                if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                const data = await response.json();

                if (data.categories && data.categories.length > 0) {
                    data.categories.forEach(cat => {
                        const node = createTreeNode(cat, 1); // Level 1 for subcategories
                        subUl.appendChild(node);
                    });
                    console.log('toggleSubcategories - Subcategories loaded - Count:', data.categories.length, 'Parent ID:', categoryId);
                    toastr.success(`Subcategories for ${categoryId} loaded successfully`);
                } else {
                    toggle.textContent = ' '; // No subcategories
                    console.log('toggleSubcategories - No subcategories found - Parent ID:', categoryId);
                    toastr.info(`No subcategories for ${categoryId}`);
                    return;
                }
            } catch (error) {
                console.error('toggleSubcategories - Error loading subcategories - Error:', error.message, 'Stack:', error.stack);
                toastr.error(`Error loading subcategories: ${error.message}`);
                toggle.textContent = ' ';
                return;
            }
        }
        subUl.classList.add('open');
        toggle.textContent = '-';
        console.log('toggleSubcategories - Subcategories opened - ID:', categoryId);
    }
    console.log('toggleSubcategories - Toggle completed');
}

// Saves updated category structure from treeview (community context).
async function saveCategories(userId) {
    console.log('saveCategories - Starting category save - UserID:', userId);
    if (!userId) {
        console.error('saveCategories - User ID not provided');
        toastr.error('User ID not found in session');
        return;
    }

    const checkedCategories = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
    console.log('saveCategories - Checked categories - Count:', checkedCategories.length, 'Values:', checkedCategories);

    try {
        console.log('saveCategories - Sending categories via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/mycategories`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`, {
            method: 'PUT',
            body: JSON.stringify({ categories: checkedCategories })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveCategories - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save categories: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveCategories - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Categories saved successfully');
    } catch (error) {
        console.error('saveCategories - Error saving categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save categories: ${error.message}`);
    }
    console.log('saveCategories - Save process completed');
}

// Handles category selection in admin context to load discounted products.
async function handleCategorySelection(categoryId, checkbox) {
    console.log('handleCategorySelection - Handling selection - Category ID:', categoryId, 'Checked:', checkbox.checked);
    document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
        if (cb !== checkbox) cb.checked = false;
    });

    const tbody = document.getElementById('dealList');
    if (!tbody) {
        console.error('handleCategorySelection - Deal list element not found - ID: dealList');
        return;
    }

    if (checkbox.checked) {
        try {
            console.log('handleCategorySelection - Fetching discounted products - Category ID:', categoryId);
            const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
            if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
            const data = await response.json();

            tbody.innerHTML = '';
            data.products.forEach(product => {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                tbody.appendChild(tr);
            });
            console.log('handleCategorySelection - Products loaded - Count:', data.products.length);
            toastr.success(`Loaded ${data.products.length} discounted products for category ${categoryId}`);
        } catch (error) {
            console.error('handleCategorySelection - Error loading products - Error:', error.message, 'Stack:', error.stack);
            toastr.error(`Error loading discounted products: ${error.message}`);
            checkbox.checked = false;
            tbody.innerHTML = '';
        }
    } else {
        tbody.innerHTML = '';
        console.log('handleCategorySelection - Cleared deal list - Category deselected');
    }
    console.log('handleCategorySelection - Selection handling completed');
}// category-management.js
// Purpose: Manages treeview functionality for displaying and editing nested category information (used in community.html and admin.html).

// Creates a treeview node for category display with configurable behavior.
function createTreeNode(category, level = 0, isAdmin = false, savedCategories = []) {
    console.log('createTreeNode - Creating node - Category:', JSON.stringify(category), 'Level:', level, 'IsAdmin:', isAdmin);
    const li = document.createElement('li');
    const nodeDiv = document.createElement('div');
    nodeDiv.className = 'node';

    const toggle = document.createElement('span');
    toggle.className = 'toggle';
    toggle.setAttribute('data-id', category.id);
    toggle.textContent = '+'; // Default to '+' assuming subcategories may exist
    toggle.addEventListener('click', () => toggleSubcategories(category.id, toggle));

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = category.id;
    if (isAdmin) {
        checkbox.addEventListener('change', () => handleCategorySelection(category.id, checkbox));
    } else {
        checkbox.checked = savedCategories.includes(category.id.toString());
    }

    const span = document.createElement('span');
    span.textContent = `${category.name} (${category.id})`;

    nodeDiv.appendChild(toggle);
    nodeDiv.appendChild(checkbox);
    nodeDiv.appendChild(span);
    li.appendChild(nodeDiv);

    const subUl = document.createElement('ul');
    subUl.className = 'subcategories';
    li.appendChild(subUl);

    console.log('createTreeNode - Node created - Category ID:', category.id);
    return li;
}

// Loads category data for treeview rendering, with options for admin or community context.
async function loadCategories(userId = null, isAdmin = false) {
    console.log('loadCategories - Starting category load - UserID:', userId, 'IsAdmin:', isAdmin);
    let savedCategories = [];
    try {
        console.log('loadCategories - Fetching categories via authenticatedFetch');
        const startTime = Date.now();

        // Load user's saved categories if not admin
        if (!isAdmin && userId) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`);
            if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
            const userData = await userResponse.json();
            savedCategories = userData.categories || [];
            console.log('loadCategories - Saved categories fetched - Count:', savedCategories.length);
        }

        // Load all categories
        const response = await authenticatedFetch(`${window.apiUrl}/categories`);
        if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
        const data = await response.json();
        const duration = Date.now() - startTime;
        console.log('loadCategories - Categories fetched - Count:', data.categories?.length, 'Duration:', `${duration}ms`);

        const treeElement = document.getElementById('categoryTree');
        if (!treeElement) {
            console.error('loadCategories - Tree element not found - ID: categoryTree');
            return;
        }
        treeElement.innerHTML = '';
        const ul = document.createElement('ul');

        // Filter top-level categories for community, show all for admin
        const categoriesToRender = isAdmin ? data.categories : data.categories.filter(cat => !cat.parent_id);
        console.log('loadCategories - Categories to render - Count:', categoriesToRender.length);

        categoriesToRender.forEach(category => {
            const node = createTreeNode(category, 0, isAdmin, savedCategories);
            ul.appendChild(node);
        });
        treeElement.appendChild(ul);

        // Reattach listeners for community context
        if (!isAdmin) attachEventListeners();

        console.log('loadCategories - Treeview rendered successfully');
        toastr.success('Categories loaded successfully');
    } catch (error) {
        console.error('loadCategories - Error loading categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to load categories');
    }
    console.log('loadCategories - Category load completed');
}

// Toggles visibility of subcategories in treeview and loads them dynamically if needed.
async function toggleSubcategories(categoryId, toggle) {
    console.log('toggleSubcategories - Toggling subcategories - Category ID:', categoryId);
    const li = toggle.closest('li');
    const subUl = li.querySelector('.subcategories');

    if (!subUl) {
        console.error('toggleSubcategories - Subcategories element not found - Category ID:', categoryId);
        return;
    }

    if (subUl.classList.contains('open')) {
        subUl.classList.remove('open');
        toggle.textContent = '+';
        console.log('toggleSubcategories - Subcategories closed - ID:', categoryId);
    } else {
        if (subUl.children.length === 0) {
            try {
                console.log('toggleSubcategories - Fetching subcategories - Parent ID:', categoryId);
                const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${categoryId}`);
                if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                const data = await response.json();

                if (data.categories && data.categories.length > 0) {
                    data.categories.forEach(cat => {
                        const node = createTreeNode(cat, 1); // Level 1 for subcategories
                        subUl.appendChild(node);
                    });
                    console.log('toggleSubcategories - Subcategories loaded - Count:', data.categories.length, 'Parent ID:', categoryId);
                    toastr.success(`Subcategories for ${categoryId} loaded successfully`);
                } else {
                    toggle.textContent = ' '; // No subcategories
                    console.log('toggleSubcategories - No subcategories found - Parent ID:', categoryId);
                    toastr.info(`No subcategories for ${categoryId}`);
                    return;
                }
            } catch (error) {
                console.error('toggleSubcategories - Error loading subcategories - Error:', error.message, 'Stack:', error.stack);
                toastr.error(`Error loading subcategories: ${error.message}`);
                toggle.textContent = ' ';
                return;
            }
        }
        subUl.classList.add('open');
        toggle.textContent = '-';
        console.log('toggleSubcategories - Subcategories opened - ID:', categoryId);
    }
    console.log('toggleSubcategories - Toggle completed');
}

// Saves updated category structure from treeview (community context).
async function saveCategories(userId) {
    console.log('saveCategories - Starting category save - UserID:', userId);
    if (!userId) {
        console.error('saveCategories - User ID not provided');
        toastr.error('User ID not found in session');
        return;
    }

    const checkedCategories = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
    console.log('saveCategories - Checked categories - Count:', checkedCategories.length, 'Values:', checkedCategories);

    try {
        console.log('saveCategories - Sending categories via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/mycategories`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`, {
            method: 'PUT',
            body: JSON.stringify({ categories: checkedCategories })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveCategories - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save categories: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveCategories - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Categories saved successfully');
    } catch (error) {
        console.error('saveCategories - Error saving categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save categories: ${error.message}`);
    }
    console.log('saveCategories - Save process completed');
}

// Handles category selection in admin context to load discounted products.
async function handleCategorySelection(categoryId, checkbox) {
    console.log('handleCategorySelection - Handling selection - Category ID:', categoryId, 'Checked:', checkbox.checked);
    document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
        if (cb !== checkbox) cb.checked = false;
    });

    const tbody = document.getElementById('dealList');
    if (!tbody) {
        console.error('handleCategorySelection - Deal list element not found - ID: dealList');
        return;
    }

    if (checkbox.checked) {
        try {
            console.log('handleCategorySelection - Fetching discounted products - Category ID:', categoryId);
            const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
            if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
            const data = await response.json();

            tbody.innerHTML = '';
            data.products.forEach(product => {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                tbody.appendChild(tr);
            });
            console.log('handleCategorySelection - Products loaded - Count:', data.products.length);
            toastr.success(`Loaded ${data.products.length} discounted products for category ${categoryId}`);
        } catch (error) {
            console.error('handleCategorySelection - Error loading products - Error:', error.message, 'Stack:', error.stack);
            toastr.error(`Error loading discounted products: ${error.message}`);
            checkbox.checked = false;
            tbody.innerHTML = '';
        }
    } else {
        tbody.innerHTML = '';
        console.log('handleCategorySelection - Cleared deal list - Category deselected');
    }
    console.log('handleCategorySelection - Selection handling completed');
}// common.js
// Purpose: Provides core shared utilities for all pages, specifically Toastr configuration.

// Configures Toastr for consistent toast notifications across the application.
function setupToastr() {
    console.log('setupToastr - Initiating Toastr configuration');
    toastr.options = {
        closeButton: true,
        progressBar: true,
        positionClass: 'toast-top-right',
        timeOut: 5000,
        showMethod: 'slideDown',
        hideMethod: 'slideUp'
    };
    console.log('setupToastr - Toastr options configured:', JSON.stringify(toastr.options));
    console.log('setupToastr - Configuration completed');
}// community-page.js
// Purpose: Manages page-specific functionality for the /community page.

// Initializes the community page with permission checks.
function initializeCommunity() {
    console.log('initializeCommunity - Initializing community page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializeCommunity - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeCommunity - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('admin') && !window.userPermissions.includes('community')) {
        toastr.error('Permission denied: Community permission required');
        console.error('initializeCommunity - No community permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    if (!userId) {
        toastr.error('User ID not found in session, redirecting to login');
        console.error('initializeCommunity - No userId found in localStorage');
        window.location.href = '/';
        return;
    }
    document.getElementById('userId').value = userId;
    updateMenu();
    loadBranding();
    showSection('welcome');
    waitForTinyMCE(initializeTinyMCE);
    attachEventListeners();
    console.log('initializeCommunity - Community page initialized successfully');
}

// Updates the menu dynamically based on permissions.
function updateMenu() {
    console.log('updateMenu - Updating menu');
    const menu = document.getElementById('menu');
    const userId = document.getElementById('userId').value;
    menu.innerHTML = `<input type="text" id="userId" style="display: none;" value="${userId || ''}">`;
    menu.innerHTML += `
        <button data-submenu="my_website" data-section="my_website_intro">My Web Site <i class="fas fa-caret-down"></i></button>
        <div id="my_website" class="submenu">
            <button data-section="wix">Wix</button>
            <button data-section="wordpress">WordPress</button>
            <button data-section="squarespace">Squarespace</button>
            <button data-section="weebly">Weebly</button>
            <button data-section="joomla">Joomla</button>
            <button data-section="no_website">I Don’t Have a Website Yet</button>
        </div>
        <button data-section="categories">My Categories</button>
        <button data-submenu="referrals" data-section="referrals_intro">My Referrals <i class="fas fa-caret-down"></i></button>
        <div id="referrals" class="submenu">
            <button data-section="visits">Visits</button>
            <button data-section="orders">Orders</button>
        </div>
        <button data-section="settings">My Account</button>
    `;
    if (window.userPermissions.includes('admin')) {
        menu.innerHTML += '<button data-href="/admin" class="btn-admin">Back to Admin</button>';
    }
    menu.innerHTML += '<button id="logOffBtn" class="btn-logoff">Log Off</button>';
    console.log('updateMenu - Menu updated');
}

// Updates integration code for web platforms.
function updateIntegrationCode(section) {
    console.log('updateIntegrationCode - Updating integration code - Section:', section);
    const codeElements = {
        'wix': 'wixCode',
        'wordpress': 'wordpressCode',
        'squarespace': 'squarespaceCode',
        'weebly': 'weeblyCode',
        'joomla': 'joomlaCode'
    };
    const codeId = codeElements[section];
    const userId = document.getElementById('userId').value;
    if (codeId) {
        const codeElement = document.getElementById(codeId);
        if (codeElement) {
            codeElement.textContent = `<iframe src="https://clubmadeira.io/discounts?referrer=${userId || 'unknown'}" width="100%" height="600"></iframe>`;
            console.log('updateIntegrationCode - Code updated - ID:', codeId);
        } else {
            console.warn('updateIntegrationCode - Code element not found - ID:', codeId);
        }
    }
}

// Loads referral visits specific to community page.
async function loadVisits() {
    console.log('loadVisits - Loading visits');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadVisits - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadVisits - Fetching visits - URL:', `${window.apiUrl}/${userId}/visits`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/visits`);
        if (!response.ok) throw new Error(`Failed to fetch visits: ${response.status}`);
        const data = await response.json();
        console.log('loadVisits - Visits fetched - Data:', JSON.stringify(data));
        if (data.status === 'success') {
            const now = new Date();
            const thisMonth = now.getMonth();
            const thisYear = now.getFullYear();
            const visitsThisMonth = [];
            const visitsLastMonth = [];
            const visitsEarlier = [];
            data.visits.forEach(visit => {
                const visitDate = new Date(visit.timestamp);
                if (visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth) visitsThisMonth.push(visit);
                else if ((visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth - 1) || 
                         (visitDate.getFullYear() === thisYear - 1 && thisMonth === 0 && visitDate.getMonth() === 11)) visitsLastMonth.push(visit);
                else visitsEarlier.push(visit);
            });
            updateVisitsTable('visitsListThisMonth', visitsThisMonth);
            updateVisitsTable('visitsListLastMonth', visitsLastMonth);
            updateVisitsTable('visitsListEarlier', visitsEarlier);
            console.log('loadVisits - Visits loaded - Counts:', { thisMonth: visitsThisMonth.length, lastMonth: visitsLastMonth.length, earlier: visitsEarlier.length });
        }
    } catch (error) {
        console.error('loadVisits - Error loading visits - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading visits: ${error.message}`);
    }
}

// Updates the visits table.
function updateVisitsTable(tableId, visits) {
    console.log('updateVisitsTable - Updating table - Table ID:', tableId, 'Visits:', visits.length);
    const tbody = document.getElementById(tableId);
    if (tbody) {
        tbody.innerHTML = visits.length === 0 ? '<tr><td colspan="2">No visits found</td></tr>' : '';
        visits.forEach(visit => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${visit.page}</td><td>${visit.timestamp}</td>`;
            tbody.appendChild(row);
        });
        console.log('updateVisitsTable - Table updated - ID:', tableId);
    } else {
        console.warn('updateVisitsTable - Table element not found - ID:', tableId);
    }
}

// Loads referral orders specific to community page.
async function loadOrders() {
    console.log('loadOrders - Loading orders');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadOrders - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadOrders - Fetching orders - URL:', `${window.apiUrl}/${userId}/orders`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/orders`);
        if (!response.ok) throw new Error(`Failed to fetch orders: ${response.status}`);
        const data = await response.json();
        console.log('loadOrders - Orders fetched - Data:', JSON.stringify(data));
        if (data.status === 'success') {
            const now = new Date();
            const thisMonth = now.getMonth();
            const thisYear = now.getFullYear();
            const ordersThisMonth = [];
            const ordersLastMonth = [];
            const ordersEarlier = [];
            data.orders.forEach(order => {
                const orderDate = new Date(order.timestamp);
                if (orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth) ordersThisMonth.push(order);
                else if ((orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth - 1) || 
                         (orderDate.getFullYear() === thisYear - 1 && thisMonth === 0 && orderDate.getMonth() === 11)) ordersLastMonth.push(order);
                else ordersEarlier.push(order);
            });
            updateOrdersTable('ordersListThisMonth', ordersThisMonth);
            updateOrdersTable('ordersListLastMonth', ordersLastMonth);
            updateOrdersTable('ordersListEarlier', ordersEarlier);
            console.log('loadOrders - Orders loaded - Counts:', { thisMonth: ordersThisMonth.length, lastMonth: ordersLastMonth.length, earlier: ordersEarlier.length });
        }
    } catch (error) {
        console.error('loadOrders - Error loading orders - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading orders: ${error.message}`);
    }
}

// Updates the orders table.
function updateOrdersTable(tableId, orders) {
    console.log('updateOrdersTable - Updating table - Table ID:', tableId, 'Orders:', orders.length);
    const tbody = document.getElementById(tableId);
    if (tbody) {
        tbody.innerHTML = orders.length === 0 ? '<tr><td colspan="4">No orders found</td></tr>' : '';
        orders.forEach(order => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${order.orderId}</td><td>${order.buyer}</td><td>$${order.total}</td><td>${order.timestamp}</td>`;
            tbody.appendChild(row);
        });
        console.log('updateOrdersTable - Table updated - ID:', tableId);
    } else {
        console.warn('updateOrdersTable - Table element not found - ID:', tableId);
    }
}

// Waits for TinyMCE to load before initializing (specific invocation).
function waitForTinyMCE(callback) {
    console.log('waitForTinyMCE - Checking if TinyMCE is loaded');
    if (typeof tinymce !== 'undefined' && tinymce.init) {
        console.log('waitForTinyMCE - TinyMCE is loaded, executing callback');
        callback();
    } else {
        console.log('waitForTinyMCE - Waiting for TinyMCE to load...');
        const script = document.querySelector('script[src*="tinymce.min.js"]');
        if (script) {
            script.onload = () => {
                console.log('waitForTinyMCE - TinyMCE script loaded');
                callback();
            };
            script.onerror = () => console.error('waitForTinyMCE - TinyMCE failed to load');
        } else {
            setTimeout(() => waitForTinyMCE(callback), 100);
        }
    }
}// merchant-page.js
// Purpose: Manages page-specific functionality for the /merchant page.

// Initializes the merchant page with permission checks.
function initializeMerchant() {
    console.log('initializeMerchant - Initializing merchant page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializeMerchant - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeMerchant - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('merchant') && !window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: Merchant or Admin permission required');
        console.error('initializeMerchant - No merchant/admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    if (userId) document.getElementById('userId').value = userId;
    checkAdminPermission();
    loadBranding();
    showSection('info');
    attachEventListeners();
    console.log('initializeMerchant - Merchant page initialized successfully');
}

// Checks and toggles visibility of admin-specific elements.
function checkAdminPermission() {
    console.log('checkAdminPermission - Checking admin permission');
    const backButton = document.querySelector('button[data-href="/admin"]');
    if (backButton) {
        backButton.style.display = window.userPermissions.includes('admin') ? 'block' : 'none';
        console.log('checkAdminPermission - Back button visibility:', backButton.style.display);
    } else {
        console.warn('checkAdminPermission - Back button not found');
    }
}

// Loads and displays merchant products.
async function loadProducts() {
    console.log('loadProducts - Loading products');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadProducts - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadProducts - Fetching products - URL:', `${window.apiUrl}/${userId}/products`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/products`);
        if (!response.ok) throw new Error(`Failed to fetch products: ${response.status}`);
        const data = await response.json();
        console.log('loadProducts - Products fetched - Data:', JSON.stringify(data));
        
        const tbody = document.getElementById('productList');
        if (tbody) {
            tbody.innerHTML = '';
            data.products.forEach(product => tbody.appendChild(createProductRow(product)));
            console.log('loadProducts - Product table updated - Count:', data.products.length);
        } else {
            console.warn('loadProducts - Product list element not found');
        }
    } catch (error) {
        console.error('loadProducts - Error loading products - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading products: ${error.message}`);
    }
}

// Creates a table row for a product.
function createProductRow(product) {
    console.log('createProductRow - Creating row - Product:', JSON.stringify(product));
    const tr = document.createElement('tr');
    tr.innerHTML = `
        <td class="hidden">${product.id}</td>
        <td>${product.category || 'N/A'}</td>
        <td>${product.title}</td>
        <td><a href="${product.product_url}" target="_blank">Link</a></td>
        <td>${product.current_price}</td>
        <td>${product.original_price}</td>
        <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
        <td>${product.qty || 'N/A'}</td>
    `;
    return tr;
}

// Loads store request data specific to merchant page.
async function loadStoreRequest() {
    console.log('loadStoreRequest - Loading store request');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadStoreRequest - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadStoreRequest - Fetching store request - URL:', `${window.apiUrl}/${userId}/siterequest`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/siterequest`);
        if (!response.ok) throw new Error(`Failed to fetch store request: ${response.status}`);
        const data = await response.json();
        const storeRequest = data.site_request || {};
        console.log('loadStoreRequest - Store request fetched - Data:', JSON.stringify(storeRequest));

        document.getElementById('storeName').value = storeRequest.storeName || '';
        if (window.tinyMCELoaded) {
            tinymce.get('aboutStore')?.setContent(storeRequest.aboutStore || '');
        } else {
            document.getElementById('aboutStore').value = storeRequest.aboutStore || '';
        }
        document.getElementById('colorPrefs').value = storeRequest.colorPrefs || '';
        document.getElementById('stylingDetails').value = storeRequest.stylingDetails || '';
        document.getElementById('preferredDomain').value = storeRequest.preferredDomain || 'mystore.uk';

        const emails = storeRequest.emails || ['info'];
        window.emailCount = 0;
        const emailsContainer = document.getElementById('emailsContainer');
        emailsContainer.innerHTML = '';
        emails.forEach((email, index) => {
            window.emailCount++;
            const emailDiv = document.createElement('div');
            emailDiv.className = 'email-section';
            emailDiv.dataset.email = window.emailCount;
            emailDiv.innerHTML = `
                <label for="email${window.emailCount}Name">Email Name:</label>
                <input type="text" id="email${window.emailCount}Name" name="email${window.emailCount}Name" value="${email}">
                <span id="email${window.emailCount}Domain">@${storeRequest.preferredDomain || 'mystore.uk'}</span>
                ${window.emailCount > 1 ? `<button type="button" class="remove-email-btn" onclick="removeEmail(${window.emailCount})">Remove Email</button>` : ''}
            `;
            emailsContainer.appendChild(emailDiv);
        });

        const pages = storeRequest.pages && storeRequest.pages.length >= 2 ? storeRequest.pages : [
            { name: 'Home', content: '' },
            { name: 'Returns Policy', content: '' }
        ];
        window.pageCount = 0;
        const pagesContainer = document.getElementById('pagesContainer');
        pagesContainer.innerHTML = '';
        pages.forEach((page, index) => {
            window.pageCount++;
            const pageDiv = document.createElement('div');
            pageDiv.className = 'page-section';
            pageDiv.dataset.page = window.pageCount;
            pageDiv.innerHTML = `
                <label for="page${window.pageCount}Name">Page Name:</label>
                <input type="text" id="page${window.pageCount}Name" name="page${window.pageCount}Name" value="${page.name || ''}" ${window.pageCount <= 2 ? 'readonly' : ''}>
                <br><br>
                <label for="page${window.pageCount}Content">${window.pageCount === 1 ? 'Home Page' : window.pageCount === 2 ? 'Returns Policy' : 'Page'} Content:</label>
                <textarea id="page${window.pageCount}Content" name="page${window.pageCount}Content">${page.content || ''}</textarea>
                <label for="page${window.pageCount}Images">Additional Images:</label>
                <input type="file" id="page${window.pageCount}Images" name="page${window.pageCount}Images" accept="image/*" multiple>
                ${window.pageCount > 2 ? `<button type="button" class="remove-page-btn" onclick="removePage(${window.pageCount})">Remove Page</button>` : ''}
            `;
            pagesContainer.appendChild(pageDiv);
            if (window.tinyMCELoaded) {
                tinymce.init({
                    selector: `#page${window.pageCount}Content`,
                    height: 200,
                    menubar: false,
                    plugins: 'lists',
                    toolbar: 'bold italic | bullist numlist',
                    setup: editor => {
                        editor.on('init', () => console.log(`TinyMCE editor initialized for page${window.pageCount}`));
                    }
                });
            }
        });

        const widgets = storeRequest.widgets || [];
        document.querySelectorAll('input[name="widgets"]').forEach(checkbox => {
            checkbox.checked = widgets.includes(checkbox.value);
        });

        updateDomainPreview();
        console.log('loadStoreRequest - Store request loaded successfully');
    } catch (error) {
        console.error('loadStoreRequest - Error loading store request - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading store request: ${error.message}`);
    }
}// page-load.js
// Purpose: Manages page initialization and event listener attachment for navigation and section handling.

// Base initialization function ensuring permission checks before page setup.
function initializePage(permissionRequired, callback) {
    console.log('initializePage - Starting initialization - Permission required:', permissionRequired);
    const token = localStorage.getItem('authToken');
    console.log('initializePage - Retrieved token from localStorage:', token || 'None');
    if (!token) {
        console.warn('initializePage - No auth token found - Redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token); // Assumes decodeJWT is available from site-auth.js
    console.log('initializePage - Decoded token:', JSON.stringify(decoded));
    if (!decoded) {
        console.warn('initializePage - Failed to decode token - Redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    console.log('initializePage - User permissions set:', JSON.stringify(window.userPermissions));
    if (!window.userPermissions.includes(permissionRequired)) {
        console.warn('initializePage - Required permission not found - Required:', permissionRequired, 'Permissions:', window.userPermissions);
        toastr.error(`Permission denied: ${permissionRequired} permission required`);
        window.location.href = '/';
        return;
    }
    console.log('initializePage - Permission check passed - Executing callback');
    callback();
    console.log('initializePage - Initialization completed for permission:', permissionRequired);
}

// Common initialize function handling page-specific setup based on page type.
function initialize(pageType) {
    console.log('initialize - Starting page initialization - Page type:', pageType);
    
    const pageConfigs = {
        'partner': {
            permission: 'admin',
            brandingType: 'partner',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing partner-specific steps');
                attachEventListeners();
                console.log('initialize - Partner-specific steps completed');
            }
        },
        'merchant': {
            permission: 'merchant',
            brandingType: 'merchant',
            initialSection: 'info',
            requiresUserId: true,
            extraSteps: () => {
                console.log('initialize - Executing merchant-specific steps');
                const userId = localStorage.getItem('userId');
                console.log('initialize - Retrieved userId from localStorage:', userId || 'None');
                if (userId) {
                    console.log('initialize - Setting userId in DOM - ID:', userId);
                    document.getElementById('userId').value = userId;
                } else {
                    console.warn('initialize - No userId found for merchant - Proceeding without setting');
                }
                checkAdminPermission(); // From merchant.js stub
                attachEventListeners();
                console.log('initialize - Merchant-specific steps completed');
            }
        },
        'community': {
            permission: 'community',
            brandingType: 'community',
            initialSection: 'welcome',
            requiresUserId: true,
            extraSteps: () => {
                console.log('initialize - Executing community-specific steps');
                const userId = localStorage.getItem('userId');
                console.log('initialize - Retrieved userId from localStorage:', userId || 'None');
                if (!userId) {
                    console.warn('initialize - User ID not found for community - Redirecting to /');
                    toastr.error('User ID not found in session');
                    window.location.href = '/';
                    return;
                }
                console.log('initialize - Setting userId in DOM - ID:', userId);
                document.getElementById('userId').value = userId;
                updateMenu(); // From community.js stub
                waitForTinyMCE(initializeTinyMCE); // From site-request.js
                attachEventListeners();
                console.log('initialize - Community-specific steps completed');
            }
        },
        'admin': {
            permission: 'admin',
            brandingType: 'admin',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing admin-specific steps');
                attachEventListeners();
                console.log('initialize - Admin-specific steps completed');
            }
        },
        'login': {
            permission: null,
            brandingType: 'login',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing login-specific steps');
                // Minimal setup for login page
                console.log('initialize - Login-specific steps completed');
            }
        },
        'signup': {
            permission: null,
            brandingType: 'signup',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing signup-specific steps');
                // Minimal setup for signup page
                console.log('initialize - Signup-specific steps completed');
            }
        }
    };

    const config = pageConfigs[pageType];
    if (!config) {
        console.error('initialize - Invalid page type provided - Type:', pageType);
        toastr.error('Invalid page type');
        return;
    }
    console.log('initialize - Configuration loaded for page type:', pageType, 'Config:', JSON.stringify(config));

    if (config.permission) {
        console.log('initialize - Performing permission check for:', pageType);
        initializePage(config.permission, () => {
            console.log('initialize - Permission validated for:', pageType);
            performPageSetup(pageType, config);
        });
    } else {
        console.log('initialize - No permission required for:', pageType);
        performPageSetup(pageType, config);
    }
    console.log('initialize - Initialization process completed for:', pageType);
}

// Helper function to perform page setup after permission checks.
function performPageSetup(pageType, config) {
    console.log('performPageSetup - Starting setup - Page type:', pageType);
    
    console.log('performPageSetup - Loading branding - Type:', config.brandingType);
    loadBranding(config.brandingType); // From site-navigation.js

    if (config.initialSection) {
        console.log('performPageSetup - Showing initial section - ID:', config.initialSection);
        showSection(config.initialSection); // From site-navigation.js
    } else {
        console.log('performPageSetup - No initial section specified for:', pageType);
    }

    if (typeof config.extraSteps === 'function') {
        console.log('performPageSetup - Executing extra steps for:', pageType);
        config.extraSteps();
    } else {
        console.log('performPageSetup - No extra steps defined for:', pageType);
    }

    console.log('performPageSetup - Page setup completed for:', pageType);
}

// Attaches click event listeners for section navigation.
function handleSectionClick(event) {
    console.log('handleSectionClick - Section click event triggered');
    const target = event.currentTarget;
    console.log('handleSectionClick - Event target:', target);
    const section = target.getAttribute('data-section');
    const submenu = target.getAttribute('data-submenu');
    console.log('handleSectionClick - Extracted attributes - Section:', section, 'Submenu:', submenu);
    if (submenu) {
        console.log('handleSectionClick - Toggling submenu - ID:', submenu);
        toggleSubmenu(submenu); // From site-navigation.js
    }
    if (section) {
        console.log('handleSectionClick - Showing section - ID:', section);
        showSection(section); // From site-navigation.js
    }
    if (!section && !submenu) {
        console.warn('handleSectionClick - No section or submenu attribute found - Target:', target);
    }
    console.log('handleSectionClick - Event handling completed');
}

// Attaches click event listeners for href navigation with SPA support.
async function handleHrefClick(event, options = {}) {
    console.log('handleHrefClick - Href click event triggered');
    const target = event.currentTarget;
    console.log('handleHrefClick - Event target:', target);
    const href = target.getAttribute('data-href');
    console.log('handleHrefClick - Extracted href:', href);
    console.log('handleHrefClick - Options provided:', JSON.stringify(options));
    if (!href) {
        console.warn('handleHrefClick - No href attribute found - Target:', target);
        return;
    }

    try {
        console.log('handleHrefClick - Initiating fetch for protected page - Href:', href);
        const startTime = Date.now();
        const html = await fetchProtectedPage(href); // From site-navigation.js
        const duration = Date.now() - startTime;
        if (!html) {
            console.error('handleHrefClick - No HTML returned - Href:', href);
            return;
        }
        console.log('handleHrefClick - HTML fetched successfully - Length:', html.length, 'Duration:', `${duration}ms`);

        const { spaPaths = ['/partner'], containerSelector = '.content-container', onLoad = null } = options;
        console.log('handleHrefClick - SPA paths:', spaPaths, 'Container selector:', containerSelector);

        if (spaPaths.includes(href)) {
            console.log('handleHrefClick - Initiating SPA redirect - Href:', href);
            history.pushState({ page: href.slice(1) }, `${href} Page`, href);
            console.log('handleHrefClick - URL updated via history.pushState - New URL:', window.location.href);
            const contentContainer = document.querySelector(containerSelector);
            console.log('handleHrefClick - Content container:', contentContainer);
            if (contentContainer) {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const content = doc.querySelector(containerSelector) || doc.body;
                console.log('handleHrefClick - Extracted content element:', content.tagName);
                contentContainer.innerHTML = content.innerHTML;
                console.log('handleHrefClick - Content container updated - Href:', href);
                const scripts = doc.querySelectorAll('script:not([src])');
                console.log('handleHrefClick - Found inline scripts:', scripts.length);
                scripts.forEach((script, index) => {
                    if (script.innerHTML.trim()) {
                        console.log('handleHrefClick - Executing inline script', index + 1, 'Content:', script.innerHTML.substring(0, 100) + '...');
                        try {
                            new Function(script.innerHTML)();
                            console.log('handleHrefClick - Inline script', index + 1, 'executed successfully');
                        } catch (e) {
                            console.error('handleHrefClick - Error executing inline script', index + 1, 'Error:', e.message, 'Stack:', e.stack);
                        }
                    }
                });
            } else {
                console.error('handleHrefClick - Content container not found - Selector:', containerSelector, 'Falling back to full reload');
                toastr.error('Failed to update page content: container missing');
                document.body.innerHTML = html;
                console.log('handleHrefClick - Body updated with full HTML - Href:', href);
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const scripts = doc.querySelectorAll('script:not([src])');
                console.log('handleHrefClick - Found inline scripts for full reload:', scripts.length);
                scripts.forEach((script, index) => {
                    if (script.innerHTML.trim()) {
                        console.log('handleHrefClick - Executing inline script (full reload)', index + 1);
                        try {
                            new Function(script.innerHTML)();
                            console.log('handleHrefClick - Inline script (full reload)', index + 1, 'executed successfully');
                        } catch (e) {
                            console.error('handleHrefClick - Error executing inline script (full reload)', index + 1, 'Error:', e.message, 'Stack:', e.stack);
                        }
                    }
                });
                if (typeof window.initPage === 'function') {
                    console.log('handleHrefClick - Calling window.initPage after full reload');
                    window.initPage();
                }
            }
        } else {
            console.log('handleHrefClick - Performing full page load - Href:', href);
            document.body.innerHTML = html;
            console.log('handleHrefClick - Body updated with new HTML - Href:', href);
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const scripts = doc.querySelectorAll('script:not([src])');
            console.log('handleHrefClick - Found inline scripts for full reload:', scripts.length);
            scripts.forEach((script, index) => {
                if (script.innerHTML.trim()) {
                    console.log('handleHrefClick - Executing inline script (full reload)', index + 1);
                    try {
                        new Function(script.innerHTML)();
                        console.log('handleHrefClick - Inline script (full reload)', index + 1, 'executed successfully');
                    } catch (e) {
                        console.error('handleHrefClick - Error executing inline script (full reload)', index + 1, 'Error:', e.message, 'Stack:', e.stack);
                    }
                }
            });
            if (typeof window.initPage === 'function') {
                console.log('handleHrefClick - Calling window.initPage after full reload');
                window.initPage();
            }
        }

        if (typeof onLoad === 'function') {
            console.log('handleHrefClick - Executing onLoad callback - Href:', href);
            onLoad(href, html);
        }
    } catch (error) {
        console.error('handleHrefClick - Error handling href click - Href:', href, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error('Navigation failed: ' + error.message);
    }
    console.log('handleHrefClick - Event handling completed');
}// partner-page.js
// Purpose: Manages page-specific functionality for the /partner page.

// Initializes the partner page with permission checks.
function initializePartner() {
    console.log('initializePartner - Initializing partner page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializePartner - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializePartner - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('wixpro') && !window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: WixPro or Admin permission required');
        console.error('initializePartner - No wixpro/admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    if (userId) document.getElementById('userId').value = userId;
    checkAdminPermission();
    loadBranding();
    showSection('welcome');
    attachEventListeners();
    console.log('initializePartner - Partner page initialized successfully');
}

// Checks and toggles visibility of admin-specific elements.
function checkAdminPermission() {
    console.log('checkAdminPermission - Checking admin permission');
    const backButton = document.querySelector('button[data-href="/admin"]');
    if (backButton) {
        backButton.style.display = window.userPermissions.includes('admin') ? 'block' : 'none';
        console.log('checkAdminPermission - Back button visibility:', backButton.style.display);
    } else {
        console.warn('checkAdminPermission - Back button not found');
    }
}

// Loads and displays partner-specific integrations or tests.
async function loadPartnerIntegrations() {
    console.log('loadPartnerIntegrations - Loading partner integrations');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadPartnerIntegrations - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadPartnerIntegrations - Fetching integrations - URL:', `${window.apiUrl}/${userId}/integrations`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/integrations`);
        if (!response.ok) throw new Error(`Failed to fetch integrations: ${response.status}`);
        const data = await response.json();
        console.log('loadPartnerIntegrations - Integrations fetched - Data:', JSON.stringify(data));

        const integrationList = document.getElementById('integrationList');
        if (integrationList) {
            integrationList.innerHTML = '';
            data.integrations.forEach(integration => {
                const li = document.createElement('li');
                li.textContent = `${integration.name} - Status: ${integration.status}`;
                integrationList.appendChild(li);
            });
            console.log('loadPartnerIntegrations - Integration list updated - Count:', data.integrations.length);
        } else {
            console.warn('loadPartnerIntegrations - Integration list element not found');
        }
    } catch (error) {
        console.error('loadPartnerIntegrations - Error loading integrations - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading integrations: ${error.message}`);
    }
}// site-auth.js
// Purpose: Manages authentication-related functionality, including password visibility toggling, 
// user logout, JWT token decoding, and password saving for user management.

// Toggles the visibility of a password input field, updating associated icon.
function togglePassword(fieldId) {
    console.log('togglePassword - Initiating visibility toggle - Field ID:', fieldId);
    const input = document.getElementById(fieldId);
    const icon = input ? input.nextElementSibling : null;
    console.log('togglePassword - Input element retrieved:', input, 'Icon element:', icon);

    if (!input) {
        console.error('togglePassword - Password input not found - Field ID:', fieldId);
        return;
    }
    if (!icon) {
        console.error('togglePassword - Icon element not found for input - Field ID:', fieldId);
        return;
    }

    const isPassword = input.type === 'password';
    console.log('togglePassword - Current input type:', input.type);
    if (isPassword) {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
        console.log('togglePassword - Changed to text visibility - Field ID:', fieldId);
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
        console.log('togglePassword - Changed to password visibility - Field ID:', fieldId);
    }
    console.log('togglePassword - Toggle completed - New type:', input.type);
}

// Logs the user out, clearing session data and redirecting to home.
function logOff() {
    console.log('logOff - Initiating logout process');
    const confirmed = confirm('Are you sure you want to log off?');
    console.log('logOff - User confirmation received:', confirmed);

    if (confirmed) {
        console.log('logOff - User confirmed logout - Clearing session data');
        localStorage.removeItem('authToken');
        localStorage.removeItem('userId');
        console.log('logOff - Auth token and userId removed from localStorage - Current localStorage:', JSON.stringify(localStorage));
        toastr.success('Logged off successfully');
        console.log('logOff - Success toast displayed');

        setTimeout(() => {
            console.log('logOff - Redirecting to / after 1-second delay');
            window.location.href = '/';
            console.log('logOff - Redirect executed');
        }, 1000);
    } else {
        console.log('logOff - Logout cancelled by user');
    }
    console.log('logOff - Logout process completed');
}

// Decodes a JWT token to extract user data, such as permissions.
function decodeJWT(token) {
    console.log('decodeJWT - Starting JWT decoding - Input token:', token);
    if (!token || typeof token !== 'string') {
        console.warn('decodeJWT - Invalid token: null or not a string - Token:', token);
        return null;
    }
    if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
        console.warn('decodeJWT - Token does not match JWT format - Token:', token);
        return null;
    }
    console.log('decodeJWT - Token format validated - Proceeding with decode');

    const parts = token.split('.');
    console.log('decodeJWT - Token split into parts:', parts);

    try {
        const base64Url = parts[1];
        console.log('decodeJWT - Extracted base64Url from token:', base64Url);
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        console.log('decodeJWT - Converted to base64:', base64);
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
        console.log('decodeJWT - Decoded JSON payload:', jsonPayload);
        const decoded = JSON.parse(jsonPayload);
        console.log('decodeJWT - Parsed JWT payload:', JSON.stringify(decoded));
        return decoded;
    } catch (error) {
        console.error('decodeJWT - Error decoding JWT - Error:', error.message, 'Stack:', error.stack, 'Token:', token);
        return null;
    }
}

// Saves an updated user password via an authenticated request.
async function savePassword(newPassword) {
    console.log('savePassword - Starting password save - New password length:', newPassword ? newPassword.length : 'None');
    if (!newPassword || typeof newPassword !== 'string') {
        console.error('savePassword - Invalid password provided - Password:', newPassword);
        toastr.error('Invalid password provided');
        return;
    }

    try {
        console.log('savePassword - Sending password update via authenticatedFetch');
        const startTime = Date.now();
        const response = await authenticatedFetch('/update-password', { // Assumes endpoint exists
            method: 'POST',
            body: JSON.stringify({ password: newPassword })
        });
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('savePassword - No response from fetch');
            toastr.error('Failed to save password: No server response');
            return;
        }

        console.log('savePassword - Response received - Status:', response.status, 'Duration:', `${duration}ms`);
        const result = await response.json();
        console.log('savePassword - Save response data:', JSON.stringify(result));

        if (result.status === 'success') {
            console.log('savePassword - Password saved successfully');
            toastr.success('Password updated successfully');
        } else {
            console.error('savePassword - Server reported failure - Message:', result.message);
            toastr.error(result.message || 'Failed to save password');
        }
    } catch (error) {
        console.error('savePassword - Error saving password - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to save password: ' + error.message);
    }
    console.log('savePassword - Password save process completed');
}// site-navigation.js
// Purpose: Handles navigation and content loading across the site, including authenticated fetch requests, 
// protected page loading, branding, and section/submenu management.

const apiUrl = 'https://clubmadeira.io'; // Default API URL, override if needed

// Performs authenticated fetch requests for protected resources, ensuring proper authorization headers.
async function authenticatedFetch(url, options = {}) {
    console.log('authenticatedFetch - Initiating fetch - URL:', url);
    const token = localStorage.getItem('authToken');
    console.log('authenticatedFetch - Token retrieved from localStorage:', token || 'None');
    console.log('authenticatedFetch - Options provided:', JSON.stringify(options));

    if (!token) {
        console.warn('authenticatedFetch - No authentication token found - Redirecting to /');
        toastr.error('No authentication token found. Please log in.');
        window.location.href = '/';
        return null;
    }

    const headers = {
        ...options.headers,
        'Authorization': `Bearer ${token}`,
        'Content-Type': options.body instanceof FormData ? undefined : 'application/json'
    };
    console.log('authenticatedFetch - Request headers constructed:', JSON.stringify(headers));

    const finalOptions = {
        ...options,
        headers: headers
    };
    console.log('authenticatedFetch - Final fetch options:', JSON.stringify(finalOptions));

    try {
        console.log('authenticatedFetch - Sending fetch request to:', url);
        const startTime = Date.now();
        const response = await fetch(url, finalOptions);
        const duration = Date.now() - startTime;
        console.log('authenticatedFetch - Fetch response received - Status:', response.status, 'Duration:', `${duration}ms`);
        console.log('authenticatedFetch - Response headers:', JSON.stringify([...response.headers.entries()]));
        console.log('authenticatedFetch - Response URL:', response.url);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('authenticatedFetch - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Server returned ${response.status}: ${errorText}`);
        }

        if (response.status === 401) {
            console.warn('authenticatedFetch - Unauthorized response (401) - Clearing token and redirecting to /');
            toastr.error('Session expired. Please log in again.');
            localStorage.removeItem('authToken');
            localStorage.removeItem('userId');
            window.location.href = '/';
            return null;
        }

        console.log('authenticatedFetch - Fetch successful - Response OK');
        return response;
    } catch (error) {
        console.error('authenticatedFetch - Error during fetch - URL:', url, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(error.message || 'Failed to connect to server');
        return null;
    }
}

// Fetches protected page content for navigation, ensuring cache-busting with timestamps.
async function fetchProtectedPage(url, options = {}) {
    console.log('fetchProtectedPage - Starting fetch - URL:', url);
    const token = localStorage.getItem('authToken');
    console.log('fetchProtectedPage - Token:', token || 'None');
    console.log('fetchProtectedPage - Options:', JSON.stringify(options));
    if (!token) {
        console.warn('fetchProtectedPage - No token found - Redirecting to /');
        toastr.error('No authentication token found. Please log in.');
        window.location.href = '/';
        return null;
    }
    try {
        const timestamp = Date.now();
        const fetchUrl = `${apiUrl}${url}?t=${timestamp}`;
        console.log('fetchProtectedPage - Constructed fetch URL with timestamp:', fetchUrl);
        const startTime = Date.now();
        const response = await fetch(fetchUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'text/html'
            }
        });
        const duration = Date.now() - startTime;
        console.log('fetchProtectedPage - Response received - Status:', response.status, 'Duration:', `${duration}ms`);
        if (!response.ok) {
            const errorText = await response.text();
            console.error('fetchProtectedPage - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Server returned ${response.status}: ${errorText}`);
        }
        const html = await response.text();
        console.log('fetchProtectedPage - Fetched HTML (first 100 chars):', html.substring(0, 100) + '...', 'Total length:', html.length);
        return html;
    } catch (error) {
        console.error('fetchProtectedPage - Error fetching page - URL:', url, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(error.message || 'Failed to load protected page');
        return null;
    }
}

// Loads page-specific branding content into a specified container.
async function loadBranding(brandingType, containerId = 'brandingContent') {
    console.log('loadBranding - Starting branding load - Type:', brandingType, 'Container ID:', containerId);
    const defaultContents = {
        'partner': '<h1>Partner Dashboard</h1>',
        'merchant': '<h1>Merchant Dashboard</h1>',
        'community': '<h1>Community Dashboard</h1>',
        'admin': '<h1>Admin Dashboard</h1>',
        'login': '<h1>Login</h1>',
        'signup': '<h1>Signup</h1>'
    };
    const defaultContent = defaultContents[brandingType] || '<h1>Dashboard</h1>';
    console.log('loadBranding - Default content for type:', brandingType, 'is:', defaultContent);

    const container = document.getElementById(containerId);
    console.log('loadBranding - Container element:', container);
    if (!container) {
        console.error('loadBranding - Container not found - ID:', containerId);
        return;
    }

    try {
        console.log('loadBranding - Fetching branding from:', `${apiUrl}/branding`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${apiUrl}/branding`);
        const duration = Date.now() - startTime;
        if (!response) {
            console.warn('loadBranding - No response from fetch - Using default content - Type:', brandingType);
            container.innerHTML = defaultContent;
            return;
        }
        console.log('loadBranding - Fetch completed - Duration:', `${duration}ms`);
        const data = await response.json();
        console.log('loadBranding - Branding data received:', JSON.stringify(data));
        const brandingContent = data.content || defaultContent;
        console.log('loadBranding - Setting branding content:', brandingContent);
        container.innerHTML = brandingContent;
        console.log('loadBranding - Branding content updated in container:', containerId);
    } catch (error) {
        console.error('loadBranding - Error loading branding - Type:', brandingType, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading ${brandingType} branding: ${error.message}`);
        container.innerHTML = defaultContent;
        console.log('loadBranding - Fallback to default content applied - Container ID:', containerId);
    }
}

// Displays a specific section while hiding others, with optional load callback.
function showSection(sectionId, onSectionLoad = null) {
    console.log('showSection - Starting section display - Section ID:', sectionId);
    console.log('showSection - Callback provided:', typeof onSectionLoad === 'function' ? 'Yes' : 'No');
    const allSections = document.querySelectorAll('.section');
    console.log('showSection - Found sections to hide:', allSections.length);
    allSections.forEach(s => {
        console.log('showSection - Hiding section - ID:', s.id);
        s.classList.remove('active');
        s.style.display = 'none';
    });
    const activeSection = document.getElementById(sectionId);
    console.log('showSection - Target section element:', activeSection);
    if (!activeSection) {
        console.error('showSection - Section not found - ID:', sectionId);
        return;
    }
    activeSection.classList.add('active');
    activeSection.style.display = 'block';
    console.log('showSection - Section activated - ID:', sectionId);
    if (typeof onSectionLoad === 'function') {
        console.log('showSection - Executing onSectionLoad callback for:', sectionId);
        onSectionLoad(sectionId);
    } else {
        console.log('showSection - No callback provided, calling loadSection directly');
        loadSection(sectionId);
    }
    console.log('showSection - Section display completed');
}

// Loads content or configures DOM elements for a specific section based on its ID.
async function loadSection(sectionId) {
    console.log('loadSection - Starting section load - Section ID:', sectionId);

    // Handle static or test sections
    if (['welcome', 'page_visit_test', 'order_test', 'affiliateProgramsIntro', 'userManagementIntro', 'testScriptsIntro', 'referralTestsIntro'].includes(sectionId)) {
        console.log('loadSection - Processing static/test section:', sectionId);
        if (sectionId === 'page_visit_test' || sectionId === 'order_test') {
            const timestampId = sectionId === 'page_visit_test' ? 'pageTimestamp' : 'orderTimestamp';
            const timestampElement = document.getElementById(timestampId);
            console.log('loadSection - Timestamp element for', timestampId, ':', timestampElement);

            if (timestampElement) {
                const timestamp = getCurrentTimestamp(); // From site-request.js
                timestampElement.value = timestamp;
                console.log('loadSection - Set timestamp for', timestampId, 'to:', timestamp);
            } else {
                console.error('loadSection - Timestamp element not found - ID:', timestampId);
            }

            const refererId = sectionId === 'page_visit_test' ? 'pageReferer' : 'orderReferer';
            console.log('loadSection - Populating referer dropdown - ID:', refererId);
            await populateRefererDropdown(refererId); // Page-specific stub
        }
        console.log('loadSection - Static/test section load completed');
        return;
    }

    // Handle category listings
    if (sectionId === 'deal_listings') {
        console.log('loadSection - Loading deal listings');
        await loadCategories(); // From category-management.js
        console.log('loadSection - Deal listings loaded');
        return;
    }

    // Handle entity lists
    if (sectionId === 'merchants') {
        console.log('loadSection - Loading merchants');
        await loadMerchants(); // Page-specific stub
        console.log('loadSection - Merchants loaded');
        return;
    }
    if (sectionId === 'communities') {
        console.log('loadSection - Loading communities');
        await loadCommunities(); // Page-specific stub
        console.log('loadSection - Communities loaded');
        return;
    }
    if (sectionId === 'partners') {
        console.log('loadSection - Loading partners');
        await loadPartners(); // Page-specific stub
        console.log('loadSection - Partners loaded');
        return;
    }

    // Handle configuration sections
    console.log('loadSection - Attempting to load config for section:', sectionId);
    try {
        const fetchUrl = `${window.apiUrl || apiUrl}/config`;
        console.log('loadSection - Fetching config from:', fetchUrl);
        const startTime = Date.now();
        const response = await authenticatedFetch(fetchUrl);
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('loadSection - No response from fetch for config - Section:', sectionId);
            toastr.error('Failed to load section credentials: No response');
            return;
        }
        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadSection - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Failed to fetch /config: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadSection - Config data received - Duration:', `${duration}ms`, 'Data:', JSON.stringify(data));
        const config = data.config[sectionId] || {};
        console.log('loadSection - Config for section:', sectionId, 'is:', JSON.stringify(config));

        // Populate fields based on section
        if (sectionId === 'amazon_uk') {
            const elements = {
                amazonAccessKey: 'ACCESS_KEY',
                amazonSecretKey: 'SECRET_KEY',
                amazonAssociateTag: 'ASSOCIATE_TAG',
                amazonCountry: 'COUNTRY'
            };
            Object.entries(elements).forEach(([id, key]) => {
                const el = document.getElementById(id);
                console.log('loadSection - Checking element - ID:', id, 'Element:', el);
                if (el) {
                    el.value = config[key] || '';
                    console.log('loadSection - Set', id, 'to:', el.value);
                } else {
                    console.error('loadSection - Element not found - ID:', id);
                }
            });
        } else if (sectionId === 'ebay_uk') {
            const el = document.getElementById('ebayAppId');
            console.log('loadSection - eBay App ID element:', el);
            if (el) {
                el.value = config.APP_ID || '';
                console.log('loadSection - Set ebayAppId to:', el.value);
            } else {
                console.error('loadSection - Element not found - ID: ebayAppId');
            }
        } else if (sectionId === 'awin') {
            const el = document.getElementById('awinApiToken');
            console.log('loadSection - Awin API Token element:', el);
            if (el) {
                el.value = config.API_TOKEN || '';
                console.log('loadSection - Set awinApiToken to:', el.value);
            } else {
                console.error('loadSection - Element not found - ID: awinApiToken');
            }
        } else if (sectionId === 'cj') {
            const elements = {
                cjApiKey: 'API_KEY',
                cjWebsiteId: 'WEBSITE_ID'
            };
            Object.entries(elements).forEach(([id, key]) => {
                const el = document.getElementById(id);
                console.log('loadSection - Checking element - ID:', id, 'Element:', el);
                if (el) {
                    el.value = config[key] || '';
                    console.log('loadSection - Set', id, 'to:', el.value);
                } else {
                    console.error('loadSection - Element not found - ID:', id);
                }
            });
        } else if (sectionId === 'textmagic') {
            const elements = {
                textmagicUsername: 'USERNAME',
                textmagicApiKey: 'API_KEY'
            };
            Object.entries(elements).forEach(([id, key]) => {
                const el = document.getElementById(id);
                console.log('loadSection - Checking element - ID:', id, 'Element:', el);
                if (el) {
                    el.value = config[key] || '';
                    console.log('loadSection - Set', id, 'to:', el.value);
                } else {
                    console.error('loadSection - Element not found - ID:', id);
                }
            });
        } else if (sectionId === 'tiny') {
            const el = document.getElementById('tinyApiKey');
            console.log('loadSection - Tiny API Key element:', el);
            if (el) {
                el.value = config.API_KEY || '';
                console.log('loadSection - Set tinyApiKey to:', el.value);
            } else {
                console.error('loadSection - Element not found - ID: tinyApiKey');
            }
        }

        console.log('loadSection - Successfully loaded credentials for:', sectionId);
        toastr.success(`Loaded credentials for ${sectionId}`);
    } catch (error) {
        console.error('loadSection - Error loading section credentials - Section:', sectionId, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading credentials: ${error.message}`);
    }
    console.log('loadSection - Section load completed - Section ID:', sectionId);
}

// Toggles submenu visibility for navigation menus.
function toggleSubmenu(submenuId) {
    console.log('toggleSubmenu - Starting toggle - Submenu ID:', submenuId);
    const submenu = document.getElementById(submenuId);
    console.log('toggleSubmenu - Submenu element retrieved:', submenu);
    if (!submenu) {
        console.warn('toggleSubmenu - Submenu element not found - ID:', submenuId);
        return;
    }
    const wasOpen = submenu.classList.contains('open');
    submenu.classList.toggle('open');
    const isOpen = submenu.classList.contains('open');
    console.log('toggleSubmenu - Toggled state - ID:', submenuId, 'Was open:', wasOpen, 'Now open:', isOpen);
    console.log('toggleSubmenu - Toggle completed');
}// site-request.js
// Purpose: Manages site request functionality for merchants and communities (e.g., merchant.html, community.html), 
// including page/email management, domain handling, and TinyMCE integration.

// Adds a page to the site request form based on type (merchant/community).
function addPage(type = 'merchant') {
    console.log('addPage - Adding page to site request - Type:', type);
    const maxPages = 5;
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('addPage - Current page count:', pageCount);

    if (pageCount >= maxPages) {
        console.warn('addPage - Maximum pages reached - Max:', maxPages);
        toastr.error(`Maximum of ${maxPages} pages allowed`);
        return;
    }

    pageCount++;
    console.log('addPage - Incrementing page count to:', pageCount);
    localStorage.setItem(`${type}PageCount`, pageCount);

    const container = document.getElementById('pagesContainer');
    console.log('addPage - Pages container:', container);
    if (!container) {
        console.error('addPage - Pages container not found');
        return;
    }

    const pageDiv = document.createElement('div');
    pageDiv.className = 'page-section';
    pageDiv.dataset.page = pageCount;
    const isMerchantDefault = type === 'merchant' && pageCount <= 2;
    const pageName = isMerchantDefault ? (pageCount === 1 ? 'Home' : 'Returns Policy') : '';
    pageDiv.innerHTML = `
        <label for="page${pageCount}Name">Page Name:</label>
        <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" value="${pageName}" ${isMerchantDefault ? 'readonly' : ''} placeholder="e.g., ${type === 'merchant' ? 'Products' : 'Events'}">
        <br><br>
        <label for="page${pageCount}Content">${isMerchantDefault ? (pageCount === 1 ? 'Home Page' : 'Returns Policy') : 'Page'} Content:</label>
        <textarea id="page${pageCount}Content" name="page${pageCount}Content" placeholder="Describe this page"></textarea>
        <label for="page${pageCount}Images">Additional Images:</label>
        <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
        ${pageCount > (type === 'merchant' ? 2 : 1) ? `<button type="button" class="remove-page-btn" data-page="${pageCount}">Remove Page</button>` : ''}
    `;
    container.appendChild(pageDiv);
    console.log('addPage - New page section added - Page number:', pageCount);

    tinymce.remove(`#page${pageCount}Content`);
    initializeTinyMCE(`#page${pageCount}Content`);
    console.log('addPage - TinyMCE initialized for new page');
    console.log('addPage - Page addition completed');
}

// Removes a page from the site request form based on type (merchant/community).
function removePage(pageNum, type = 'merchant') {
    console.log('removePage - Removing page - Page number:', pageNum, 'Type:', type);
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('removePage - Current page count:', pageCount);
    const minPages = type === 'merchant' ? 2 : 1;

    if (pageCount <= minPages) {
        console.warn('removePage - Cannot remove below minimum pages - Min:', minPages);
        toastr.error(`Cannot remove the last ${type === 'merchant' ? 'Home or Returns Policy' : ''} page${minPages > 1 ? 's' : ''}`);
        return;
    }

    const pageSection = document.querySelector(`.page-section[data-page="${pageNum}"]`);
    console.log('removePage - Page section to remove:', pageSection);
    if (pageSection) {
        tinymce.get(`page${pageNum}Content`)?.remove();
        console.log('removePage - Removed TinyMCE instance for page:', pageNum);
        pageSection.remove();
        pageCount--;
        localStorage.setItem(`${type}PageCount`, pageCount);
        console.log('removePage - Page removed, new page count:', pageCount);
    } else {
        console.error('removePage - Page section not found - Page number:', pageNum);
    }
    console.log('removePage - Removal completed');
}

// Adds an email to the site request form.
function addEmail(type = 'merchant') {
    console.log('addEmail - Adding email to site request - Type:', type);
    const maxEmails = 5;
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('addEmail - Current email count:', emailCount);

    if (emailCount >= maxEmails) {
        console.warn('addEmail - Maximum emails reached - Max:', maxEmails);
        toastr.error(`Maximum of ${maxEmails} email addresses allowed`);
        return;
    }

    emailCount++;
    console.log('addEmail - Incrementing email count to:', emailCount);
    localStorage.setItem(`${type}EmailCount`, emailCount);

    const container = document.getElementById('emailsContainer');
    console.log('addEmail - Emails container:', container);
    if (!container) {
        console.error('addEmail - Emails container not found');
        return;
    }

    const domain = document.getElementById('preferredDomain')?.value || (type === 'merchant' ? 'mystore.uk' : 'mycommunity.org');
    console.log('addEmail - Using domain:', domain);
    const emailDiv = document.createElement('div');
    emailDiv.className = 'email-section';
    emailDiv.dataset.email = emailCount;
    emailDiv.innerHTML = `
        <label for="email${emailCount}Name">Email Name:</label>
        <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" placeholder="e.g., contact">
        <span id="email${emailCount}Domain">@${domain}</span>
        <button type="button" class="remove-email-btn" data-email="${emailCount}">Remove Email</button>
    `;
    container.appendChild(emailDiv);
    console.log('addEmail - New email section added - Email number:', emailCount);

    updateDomainPreview(type);
    console.log('addEmail - Email addition completed');
}

// Removes an email from the site request form.
function removeEmail(emailNum, type = 'merchant') {
    console.log('removeEmail - Removing email - Email number:', emailNum, 'Type:', type);
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('removeEmail - Current email count:', emailCount);

    if (emailCount <= 1) {
        console.warn('removeEmail - Cannot remove the last email');
        toastr.error('Cannot remove the last email');
        return;
    }

    const emailSection = document.querySelector(`.email-section[data-email="${emailNum}"]`);
    console.log('removeEmail - Email section to remove:', emailSection);
    if (emailSection) {
        emailSection.remove();
        emailCount--;
        localStorage.setItem(`${type}EmailCount`, emailCount);
        console.log('removeEmail - Email removed, new email count:', emailCount);
        updateDomainPreview(type);
    } else {
        console.error('removeEmail - Email section not found - Email number:', emailNum);
    }
    console.log('removeEmail - Removal completed');
}

// Updates the domain preview and email domain spans for the site request.
function updateDomainPreview(type = 'merchant') {
    console.log('updateDomainPreview - Updating domain preview - Type:', type);
    const domain = document.getElementById('preferredDomain')?.value || (type === 'merchant' ? 'mystore.uk' : 'mycommunity.org');
    console.log('updateDomainPreview - Domain value:', domain);

    const previewElement = document.getElementById('domainPreview');
    if (previewElement) {
        previewElement.textContent = `@${domain}`;
        console.log('updateDomainPreview - Updated domain preview to:', `@${domain}`);
    }

    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('updateDomainPreview - Email count:', emailCount);
    for (let i = 1; i <= emailCount; i++) {
        const domainSpan = document.getElementById(`email${i}Domain`);
        console.log('updateDomainPreview - Checking domain span - ID:', `email${i}Domain`, 'Element:', domainSpan);
        if (domainSpan) {
            domainSpan.textContent = `@${domain}`;
            console.log('updateDomainPreview - Updated email domain - ID:', `email${i}Domain`, 'to:', `@${domain}`);
        }
    }
    console.log('updateDomainPreview - Update completed');
}

// Checks domain availability for the site request.
async function checkDomainAvailability() {
    console.log('checkDomainAvailability - Starting domain availability check');
    const domainInput = document.getElementById('preferredDomain');
    const domain = domainInput?.value;
    console.log('checkDomainAvailability - Domain to check:', domain);

    const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!domain) {
        console.warn('checkDomainAvailability - No domain provided');
        toastr.error('Please enter a preferred domain name');
        return false;
    }
    if (!domainRegex.test(domain)) {
        console.warn('checkDomainAvailability - Invalid domain format - Domain:', domain);
        toastr.error('Invalid domain name (e.g., mystore.uk)');
        return false;
    }

    console.log('checkDomainAvailability - Domain format valid, proceeding with check');
    toastr.info(`Checking availability for ${domain}...`);

    try {
        const startTime = Date.now();
        const response = await fetch(`https://clubmadeira.io/check-domain?domain=${encodeURIComponent(domain)}`, {
            method: 'GET',
            credentials: 'same-origin'
        });
        const duration = Date.now() - startTime;
        console.log('checkDomainAvailability - Fetch response received - Status:', response.status, 'Duration:', `${duration}ms`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('checkDomainAvailability - Fetch failed - Status:', response.status, 'Error text:', errorText);
            if (response.status === 403) {
                throw new Error('Permission denied - please log in');
            }
            throw new Error(`Server error: ${errorText}`);
        }

        const result = await response.json();
        console.log('checkDomainAvailability - Availability result:', JSON.stringify(result));
        if (result.available) {
            console.log('checkDomainAvailability - Domain available:', domain);
            toastr.success(`${result.domain} is available!`);
            return true;
        } else {
            console.warn('checkDomainAvailability - Domain not available:', domain);
            toastr.error(`${result.domain} is not available`);
            if (domainInput) domainInput.value = '';
            return false;
        }
    } catch (error) {
        console.error('checkDomainAvailability - Error checking domain - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to check domain availability: ${error.message}`);
        return false;
    }
}

// Loads TinyMCE editor for site request content editing.
async function loadTinyMCE() {
    console.log('loadTinyMCE - Starting TinyMCE load');
    if (typeof tinymce !== 'undefined' && tinymce.init) {
        console.log('loadTinyMCE - TinyMCE already loaded');
        initializeTinyMCE();
        return;
    }

    console.log('loadTinyMCE - Loading TinyMCE script');
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js';
        script.referrerpolicy = 'origin';
        document.head.appendChild(script);
        console.log('loadTinyMCE - Script element added to head:', script.src);

        script.onload = () => {
            console.log('loadTinyMCE - TinyMCE script loaded successfully');
            initializeTinyMCE();
            resolve();
        };
        script.onerror = () => {
            console.error('loadTinyMCE - Failed to load TinyMCE script');
            toastr.error('Failed to load rich text editor');
            reject(new Error('TinyMCE load failed'));
        };
    });
}

// Initializes TinyMCE editor for site request content editing with a specific selector.
function initializeTinyMCE(selector = 'textarea[name$="Content"], #aboutStore, #aboutCommunity') {
    console.log('initializeTinyMCE - Starting TinyMCE initialization - Selector:', selector);
    if (!window.tinymce) {
        console.error('initializeTinyMCE - TinyMCE not available');
        return;
    }

    tinymce.remove(selector);
    console.log('initializeTinyMCE - Removed existing TinyMCE instances for selector:', selector);

    tinymce.init({
        selector: selector,
        height: 200,
        menubar: false,
        plugins: 'lists',
        toolbar: 'bold italic | bullist numlist',
        setup: editor => {
            editor.on('init', () => {
                console.log('initializeTinyMCE - TinyMCE editor initialized for:', editor.id);
            });
        }
    });
    console.log('initializeTinyMCE - TinyMCE initialization completed');
}

// Generates a formatted timestamp for site request forms.
function getCurrentTimestamp() {
    console.log('getCurrentTimestamp - Generating current timestamp');
    const now = new Date();
    console.log('getCurrentTimestamp - Current date object:', now);
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    console.log('getCurrentTimestamp - Extracted components - Year:', year, 'Month:', month, 'Day:', day, 'Hours:', hours, 'Minutes:', minutes, 'Seconds:', seconds);
    const timestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    console.log('getCurrentTimestamp - Generated timestamp:', timestamp);
    return timestamp;
}

// Saves the site request form data for either a merchant store or community site.
async function saveSiteRequest(type = 'merchant') {
    console.log('saveSiteRequest - Starting site request save - Type:', type);
    const userId = document.getElementById('userId')?.value || localStorage.getItem('userId');
    console.log('saveSiteRequest - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveSiteRequest - User ID not found in session or DOM');
        toastr.error('User ID not found in session');
        return;
    }

    const nameField = type === 'merchant' ? 'storeName' : 'communityName';
    const aboutField = type === 'merchant' ? 'aboutStore' : 'aboutCommunity';
    const logoField = type === 'merchant' ? 'storeLogos' : 'communityLogos';
    const defaultDomain = type === 'merchant' ? 'mystore.uk' : 'mycommunity.org';

    const siteRequest = {
        userId: userId,
        type: type,
        [nameField]: document.getElementById(nameField)?.value.trim() || '',
        [aboutField]: tinymce.get(aboutField)?.getContent() || document.getElementById(aboutField)?.value || '',
        [logoField]: [],
        colorPrefs: document.getElementById('colorPrefs')?.value.trim() || '',
        stylingDetails: document.getElementById('stylingDetails')?.value.trim() || '',
        preferredDomain: document.getElementById('preferredDomain')?.value.trim() || defaultDomain,
        emails: [],
        pages: [],
        widgets: Array.from(document.querySelectorAll('input[name="widgets"]:checked')).map(cb => cb.value)
    };
    console.log('saveSiteRequest - Initial site request object:', JSON.stringify(siteRequest));

    // Validation
    if (!siteRequest[nameField]) {
        console.warn('saveSiteRequest - Name field is empty - Field:', nameField);
        toastr.error(`${type === 'merchant' ? 'Store' : 'Community'} name is required`);
        return;
    }

    const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!domainRegex.test(siteRequest.preferredDomain)) {
        console.warn('saveSiteRequest - Invalid domain format - Domain:', siteRequest.preferredDomain);
        toastr.error(`Invalid domain name (e.g., ${defaultDomain})`);
        return;
    }

    // Handle logos
    const logoFiles = document.getElementById(logoField)?.files || [];
    console.log('saveSiteRequest - Logo files count:', logoFiles.length);
    if (logoFiles.length > 5) {
        console.warn('saveSiteRequest - Too many logos - Count:', logoFiles.length);
        toastr.error('Maximum of 5 logos allowed');
        return;
    }
    for (let i = 0; i < logoFiles.length; i++) {
        const reader = new FileReader();
        await new Promise(resolve => {
            reader.onload = () => {
                siteRequest[logoField].push(reader.result);
                console.log('saveSiteRequest - Added logo - Index:', i, 'Result length:', reader.result.length);
                resolve();
            };
            reader.readAsDataURL(logoFiles[i]);
        });
    }

    // Collect emails
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('saveSiteRequest - Collecting emails - Email count:', emailCount);
    for (let i = 1; i <= emailCount; i++) {
        const emailInput = document.getElementById(`email${i}Name`);
        if (emailInput && emailInput.value.trim()) {
            siteRequest.emails.push(emailInput.value.trim());
            console.log('saveSiteRequest - Added email - Index:', i, 'Value:', emailInput.value.trim());
        }
    }

    // Collect pages
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('saveSiteRequest - Collecting pages - Page count:', pageCount);
    for (let i = 1; i <= pageCount; i++) {
        const nameInput = document.getElementById(`page${i}Name`);
        const contentEditor = tinymce.get(`page${i}Content`);
        const contentFallback = document.getElementById(`page${i}Content`);
        const imagesInput = document.getElementById(`page${i}Images`);
        if (nameInput && nameInput.value.trim()) {
            const page = {
                name: nameInput.value.trim(),
                content: contentEditor ? contentEditor.getContent() : (contentFallback?.value || ''),
                images: []
            };
            console.log('saveSiteRequest - Processing page - Index:', i, 'Name:', page.name);

            if (imagesInput && imagesInput.files.length > 0) {
                for (let j = 0; j < imagesInput.files.length; j++) {
                    const reader = new FileReader();
                    await new Promise(resolve => {
                        reader.onload = () => {
                            page.images.push(reader.result);
                            console.log('saveSiteRequest - Added image to page - Page:', i, 'Image index:', j, 'Result length:', reader.result.length);
                            resolve();
                        };
                        reader.readAsDataURL(imagesInput.files[j]);
                    });
                }
            }
            siteRequest.pages.push(page);
        }
    }

    const minPages = type === 'merchant' ? 2 : 1;
    if (siteRequest.pages.length < minPages || (type === 'merchant' && (!siteRequest.pages.some(p => p.name === 'Home') || !siteRequest.pages.some(p => p.name === 'Returns Policy')))) {
        console.warn('saveSiteRequest - Insufficient or missing required pages - Pages:', siteRequest.pages.length, 'Required:', minPages);
        toastr.error(type === 'merchant' ? 'Home and Returns Policy pages are required' : 'At least one page is required');
        return;
    }

    // Save to server
    try {
        console.log('saveSiteRequest - Sending site request to server - URL:', `${apiUrl}/${userId}/siterequest`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${apiUrl}/${userId}/siterequest`, {
            method: 'POST',
            body: JSON.stringify(siteRequest)
        });
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('saveSiteRequest - No response from fetch');
            toastr.error('Failed to save site request: No server response');
            return;
        }
        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveSiteRequest - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Failed to save site request: ${response.status} - ${errorText}`);
        }

        console.log('saveSiteRequest - Save successful - Duration:', `${duration}ms`);
        toastr.success(`${type === 'merchant' ? 'Store' : 'Site'} request saved successfully`);
    } catch (error) {
        console.error('saveSiteRequest - Error saving site request - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error saving ${type === 'merchant' ? 'store' : 'site'} request: ${error.message}`);
    }
    console.log('saveSiteRequest - Save process completed');
}// user-management.js
// Purpose: Manages user-specific settings and Wix client ID operations.

// Loads user settings into the DOM.
async function loadSettings() {
    console.log('loadSettings - Starting settings load');
    const userId = localStorage.getItem('userId');
    console.log('loadSettings - Retrieved userId:', userId);

    if (!userId) {
        console.error('loadSettings - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('loadSettings - Fetching settings via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/user`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/user`);
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadSettings - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to fetch settings: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadSettings - Settings fetched - Data:', JSON.stringify(data), 'Duration:', `${duration}ms`);

        // Update DOM with settings
        const referrerId = document.getElementById('referrerId');
        const contactName = document.getElementById('contactName');
        const websiteUrl = document.getElementById('websiteUrl');
        const emailAddress = document.getElementById('emailAddress');
        const phoneNumber = document.getElementById('phoneNumber');

        if (referrerId) referrerId.textContent = userId;
        if (contactName) contactName.value = data.contact_name || '';
        if (websiteUrl) websiteUrl.value = data.website_url || '';
        if (emailAddress) emailAddress.value = data.email_address || '';
        if (phoneNumber) phoneNumber.value = data.phone_number || '';

        console.log('loadSettings - DOM updated - Fields:', {
            referrerId: userId,
            contactName: data.contact_name || '',
            websiteUrl: data.website_url || '',
            emailAddress: data.email_address || '',
            phoneNumber: data.phone_number || ''
        });
    } catch (error) {
        console.error('loadSettings - Error loading settings - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading settings: ${error.message}`);
    }
    console.log('loadSettings - Settings load completed');
}

// Saves user settings from the DOM.
async function saveSettings(settings) {
    console.log('saveSettings - Starting settings save - Settings:', JSON.stringify(settings));
    const userId = localStorage.getItem('userId');
    console.log('saveSettings - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveSettings - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('saveSettings - Sending settings via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/user`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/user`, {
            method: 'PUT',
            body: JSON.stringify(settings)
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveSettings - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save settings: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveSettings - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Settings saved successfully');
    } catch (error) {
        console.error('saveSettings - Error saving settings - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save settings: ${error.message}`);
    }
    console.log('saveSettings - Save process completed');
}

// Loads Wix client ID into the DOM.
async function loadWixClientId() {
    console.log('loadWixClientId - Starting Wix client ID load');
    const userId = localStorage.getItem('userId');
    console.log('loadWixClientId - Retrieved userId:', userId);

    if (!userId) {
        console.error('loadWixClientId - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('loadWixClientId - Fetching Wix client ID via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/wix-client-id`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/wix-client-id`);
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadWixClientId - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to fetch Wix client ID: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadWixClientId - Wix client ID fetched - Data:', JSON.stringify(data), 'Duration:', `${duration}ms`);

        // Update DOM with Wix client ID
        const wixClientIdField = document.getElementById('wixClientId');
        if (wixClientIdField) {
            wixClientIdField.value = data.client_id || data.clientId || ''; // Flexible key name
            console.log('loadWixClientId - DOM updated - wixClientId:', data.client_id || data.clientId || '');
        } else {
            console.warn('loadWixClientId - Wix client ID field not found - ID: wixClientId');
        }
    } catch (error) {
        console.error('loadWixClientId - Error loading Wix client ID - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading Wix client ID: ${error.message}`);
    }
    console.log('loadWixClientId - Wix client ID load completed');
}

// Saves Wix client ID from the DOM.
async function saveWixClientId(clientId) {
    console.log('saveWixClientId - Starting Wix client ID save - Client ID:', clientId);
    const userId = localStorage.getItem('userId');
    console.log('saveWixClientId - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveWixClientId - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('saveWixClientId - Sending Wix client ID via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/wix-client-id`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/wix-client-id`, {
            method: 'POST',
            body: JSON.stringify({ clientId })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveWixClientId - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save Wix client ID: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveWixClientId - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Wix client ID saved successfully');
    } catch (error) {
        console.error('saveWixClientId - Error saving Wix client ID - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save Wix client ID: ${error.message}`);
    }
    console.log('saveWixClientId - Save process completed');
}
static/old/community copy.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Community</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <script src="https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            display: block; 
        }
        .header { 
            height: 150px; 
            width: 100%; 
            background-color: #f4f4f4; 
            margin-bottom: 25px; 
            overflow: hidden; 
            position: relative; 
            display: block; 
        }
        .header-content { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .main-container { 
            max-width: 1200px; 
            margin: 0 auto; 
            display: flex; 
            gap: 20px; 
        }
        .menu-container { 
            flex: 1; 
            max-width: 300px; 
        }
        .content-container { 
            flex: 2; 
        }
        .menu { 
            margin-bottom: 20px; 
            text-align: left; 
        }
        .menu button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 14px; 
            text-align: left; 
            width: 100%; 
            margin-bottom: 5px; 
            display: block; 
        }
        .menu button:hover { 
            background-color: #0056b3; 
        }
        .menu .btn-admin { 
            background-color: #dc3545; 
        }
        .menu .btn-admin:hover { 
            background-color: #c82333; 
        }
        .menu .btn-logoff { 
            background-color: #dc3545; 
        }
        .menu .btn-logoff:hover { 
            background-color: #c82333; 
        }
        .submenu { 
            display: none; 
            padding-left: 20px; 
        }
        .submenu.open { 
            display: block; 
        }
        .section { 
            display: none; 
        }
        .section.active { 
            display: block; 
        }
        .settings-form { 
            display: flex; 
            flex-direction: column; 
            gap: 15px; 
            max-width: 600px; 
        }
        .settings-form label { 
            font-weight: bold; 
            margin-bottom: 5px; 
        }
        .settings-form input, 
        .settings-form textarea { 
            padding: 8px; 
            width: 100%; 
            box-sizing: border-box; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
        }
        .settings-form button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            cursor: pointer; 
            border-radius: 4px; 
        }
        .settings-form button:hover { 
            background-color: #0056b3; 
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
        }
        th, td { 
            border: 1px solid #ddd; 
            padding: 8px; 
            text-align: left; 
        }
        .treeview { 
            max-height: 600px; 
            overflow-y: auto; 
            margin-bottom: 10px; 
        }
        .treeview, .treeview ul, .treeview li { 
            list-style-type: none; 
            padding: 0; 
            margin: 0; 
        }
        .treeview .node { 
            display: flex; 
            align-items: center; 
            gap: 8px; 
            padding: 5px 0; 
        }
        .treeview .toggle { 
            cursor: pointer; 
            width: 20px; 
            text-align: center; 
            font-weight: bold; 
            flex-shrink: 0; 
        }
        .treeview input[type="checkbox"] { 
            width: 16px !important; 
            height: 16px !important; 
            margin: 0; 
            flex-shrink: 0; 
        }
        .treeview .subcategories { 
            display: none; 
            padding-left: 20px; 
        }
        .treeview .subcategories.open { 
            display: block; 
        }
        #toast-container > .toast-error { 
            background-color: #dc3545; 
            border-color: #c82333; 
        }
        #toast-container > .toast-success { 
            background-color: #28a745; 
            border-color: #218838; 
        }
        .toggle-section { 
            cursor: pointer; 
            font-weight: bold; 
            margin: 10px 0; 
            background-color: #e9ecef; 
            padding: 5px; 
            border-radius: 4px; 
        }
        .toggle-content { 
            display: none; 
        }
        .toggle-content.open { 
            display: block; 
        }
        .page-section { 
            margin-top: 10px; 
            padding: 10px; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
        }
        .email-section { 
            margin-top: 10px; 
            padding: 10px; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
        }
        .widget-checkboxes div { 
            margin-bottom: 10px; 
        }
        .remove-page-btn, .remove-email-btn { 
            padding: 5px 10px; 
            background-color: #dc3545; 
            color: white; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            margin-top: 10px; 
        }
        .remove-page-btn:hover, .remove-email-btn:hover { 
            background-color: #c82333; 
        }
        .password-container { 
            position: relative; 
            display: flex; 
            flex-direction: column; 
            margin-bottom: 15px; 
        }
        .password-container input { 
            padding: 8px 30px 8px 8px; 
            width: 100%; 
            box-sizing: border-box; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
        }
        .password-toggle { 
            position: absolute; 
            right: 10px; 
            top: 65%; 
            transform: translateY(-50%); 
            cursor: pointer; 
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content" id="brandingContent">
            <!-- Branding content will be loaded here -->
        </div>
    </div>
    <div class="main-container">
        <div class="menu-container">
            <div class="menu" id="menu">
                <input type="text" id="userId" style="display: none;">
                <!-- Menu items will be dynamically generated -->
            </div>
        </div>
        <div class="content-container">
            <div id="welcome" class="section active">
                <h2>Welcome to Your Community Dashboard</h2>
                <p>Welcome! This dashboard is your hub for managing your community account and tracking referrals.</p>
                <p>Use the menu on the left to:</p>
                <ul>
                    <li>Learn how to add discounts to your website or request a site under "My Web Site"</li>
                    <li>Select product categories for your site in "My Categories"</li>
                    <li>View referral statistics under "My Referrals"</li>
                    <li>Update your account details in "My Account"</li>
                </ul>
            </div>
            <div id="settings" class="section">
                <h2>My Account</h2>
                <div class="settings-form">
                    <label><strong>Referrer ID: <span id="referrerId"></span></strong></label>
                    <label for="contactName">Contact Name:</label>
                    <input type="text" id="contactName" placeholder="Enter contact name">
                    <label for="websiteUrl">Website URL:</label>
                    <input type="url" id="websiteUrl" placeholder="Enter website URL">
                    <label for="emailAddress">Email Address:</label>
                    <input type="email" id="emailAddress" placeholder="Enter email address">
                    <label for="phoneNumber">Phone Number:</label>
                    <input type="tel" id="phoneNumber" placeholder="Enter phone number">
                    <button data-action="saveSettings">Save Settings</button>

                    <h3>Change Password</h3>
                    <div class="password-container">
                        <label for="currentPassword">Current Password:</label>
                        <input type="password" id="currentPassword" name="currentPassword" placeholder="Enter current password">
                        <i class="fas fa-eye password-toggle" data-target="currentPassword"></i>
                    </div>
                    <div class="password-container">
                        <label for="newPassword">New Password:</label>
                        <input type="password" id="newPassword" name="newPassword" placeholder="Enter new password">
                        <i class="fas fa-eye password-toggle" data-target="newPassword"></i>
                    </div>
                    <div class="password-container">
                        <label for="confirmPassword">Confirm New Password:</label>
                        <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password">
                        <i class="fas fa-eye password-toggle" data-target="confirmPassword"></i>
                    </div>
                    <button data-action="savePassword">Change Password</button>
                </div>
            </div>
            <div id="categories" class="section">
                <h2>My Categories</h2>
                <p>This section lets you choose which product categories will appear on your website's "Community Discounts" page.</p>
                <div class="treeview" id="categoryTree"></div>
            </div>
            <div id="referrals_intro" class="section">
                <h2>My Referrals</h2>
                <p>This section allows you to track your referral activity.</p>
                <p>Select from the submenu options:</p>
                <ul>
                    <li><strong>Visits:</strong> View pages visited through your referral links.</li>
                    <li><strong>Orders:</strong> See orders placed via your referrals.</li>
                </ul>
            </div>
            <div id="visits" class="section">
                <h2>Visits</h2>
                <div class="toggle-section" data-toggle="visits_this_month">This Month</div>
                <div id="visits_this_month" class="toggle-content open">
                    <table id="visitsTableThisMonth">
                        <thead><tr><th>Page</th><th>Timestamp</th></tr></thead>
                        <tbody id="visitsListThisMonth"></tbody>
                    </table>
                </div>
                <div class="toggle-section" data-toggle="visits_last_month">Last Month</div>
                <div id="visits_last_month" class="toggle-content">
                    <table id="visitsTableLastMonth">
                        <thead><tr><th>Page</th><th>Timestamp</th></tr></thead>
                        <tbody id="visitsListLastMonth"></tbody>
                    </table>
                </div>
                <div class="toggle-section" data-toggle="visits_earlier">Earlier</div>
                <div id="visits_earlier" class="toggle-content">
                    <table id="visitsTableEarlier">
                        <thead><tr><th>Page</th><th>Timestamp</th></tr></thead>
                        <tbody id="visitsListEarlier"></tbody>
                    </table>
                </div>
            </div>
            <div id="orders" class="section">
                <h2>Orders</h2>
                <div class="toggle-section" data-toggle="orders_this_month">This Month</div>
                <div id="orders_this_month" class="toggle-content open">
                    <table id="ordersTableThisMonth">
                        <thead><tr><th>Order ID</th><th>Buyer</th><th>Total</th><th>Timestamp</th></tr></thead>
                        <tbody id="ordersListThisMonth"></tbody>
                    </table>
                </div>
                <div class="toggle-section" data-toggle="orders_last_month">Last Month</div>
                <div id="orders_last_month" class="toggle-content">
                    <table id="ordersTableLastMonth">
                        <thead><tr><th>Order ID</th><th>Buyer</th><th>Total</th><th>Timestamp</th></tr></thead>
                        <tbody id="ordersListLastMonth"></tbody>
                    </table>
                </div>
                <div class="toggle-section" data-toggle="orders_earlier">Earlier</div>
                <div id="orders_earlier" class="toggle-content">
                    <table id="ordersTableEarlier">
                        <thead><tr><th>Order ID</th><th>Buyer</th><th>Total</th><th>Timestamp</th></tr></thead>
                        <tbody id="ordersListEarlier"></tbody>
                    </table>
                </div>
            </div>
            <div id="my_website_intro" class="section">
                <h2>My Web Site</h2>
                <p>Welcome to the "My Web Site" section! Here, you can learn how to integrate discounts into your community website.</p>
                <ul>
                    <li><strong>Wix:</strong> Easy drag-and-drop builder.</li>
                    <li><strong>WordPress:</strong> Flexible CMS.</li>
                    <li><strong>Squarespace:</strong> Stylish solution.</li>
                    <li><strong>Weebly:</strong> Simple builder.</li>
                    <li><strong>Joomla:</strong> Robust CMS.</li>
                    <li><strong>I Don’t Have a Website Yet:</strong> Request a site setup.</li>
                </ul>
            </div>
            <div id="wix" class="section">
                <h2>Wix Integration</h2>
                <p>Add discounts to your Wix site:</p>
                <ol>
                    <li>Log in to Wix and open the Editor.</li>
                    <li>Click "+" > "Embed" > "Embed a Widget".</li>
                    <li>Paste: <code id="wixCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                    <li>Publish.</li>
                </ol>
            </div>
            <div id="wordpress" class="section">
                <h2>WordPress Integration</h2>
                <p>Add discounts to WordPress:</p>
                <ol>
                    <li>Log in to WordPress admin.</li>
                    <li>Go to "Pages" > "Add New".</li>
                    <li>Add "Custom HTML" block: <code id="wordpressCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                    <li>Publish.</li>
                </ol>
            </div>
            <div id="squarespace" class="section">
                <h2>Squarespace Integration</h2>
                <p>Integrate discounts into Squarespace:</p>
                <ol>
                    <li>Log in to Squarespace editor.</li>
                    <li>Add a new page.</li>
                    <li>Add "Code" block: <code id="squarespaceCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                    <li>Update site.</li>
                </ol>
            </div>
            <div id="weebly" class="section">
                <h2>Weebly Integration</h2>
                <p>Add discounts to Weebly:</p>
                <ol>
                    <li>Log in to Weebly editor.</li>
                    <li>Drag "Embed Code" onto page.</li>
                    <li>Paste: <code id="weeblyCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                    <li>Publish.</li>
                </ol>
            </div>
            <div id="joomla" class="section">
                <h2>Joomla Integration</h2>
                <p>Integrate discounts into Joomla:</p>
                <ol>
                    <li>Log in to Joomla admin.</li>
                    <li>Go to "Content" > "Articles" > "Add New".</li>
                    <li>Paste in "Code" view: <code id="joomlaCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                    <li>Save.</li>
                </ol>
            </div>
            <div id="no_website" class="section">
                <h2>I Don’t Have a Website Yet</h2>
                <p>Request a custom Wix website for your community from our Wix Professionals. Fill out the form below to specify your needs:</p>
                <form id="siteRequestForm" class="settings-form">
                    <label for="communityName">Community Name:</label>
                    <input type="text" id="communityName" name="communityName" placeholder="Enter your community name" required>

                    <label for="aboutCommunity">About Our Community:</label>
                    <textarea id="aboutCommunity" name="aboutCommunity" placeholder="Tell us about your community"></textarea>

                    <label for="communityLogos">Community Logos:</label>
                    <input type="file" id="communityLogos" name="communityLogos" accept="image/*" multiple>
                    <small>Upload up to 5 logos (e.g., main logo, secondary logos).</small>

                    <label for="colorPrefs">Color Preferences:</label>
                    <input type="text" id="colorPrefs" name="colorPrefs" placeholder="e.g., #FF5733, Blue">

                    <label for="stylingDetails">Styling Details:</label>
                    <textarea id="stylingDetails" name="stylingDetails" rows="4" placeholder="e.g., modern layout, bold fonts"></textarea>

                    <label for="preferredDomain">Preferred Domain Name:</label>
                    <input type="text" id="preferredDomain" name="preferredDomain" placeholder="e.g., mycommunity.org" oninput="updateEmailDomains()">
                    <button type="button" data-action="checkDomainAvailability">Check Availability</button>

                    <label>Email Addresses to Set Up (up to 5):</label>
                    <div id="emailsContainer">
                        <div class="email-section" data-email="1">
                            <label for="email1Name">Email Name:</label>
                            <input type="text" id="email1Name" name="email1Name" placeholder="e.g., info">
                            <span id="email1Domain">@mycommunity.org</span>
                        </div>
                    </div>
                    <button type="button" data-action="addEmail">Add Another Email</button>

                    <label>Requested Pages (up to 5):</label>
                    <div id="pagesContainer">
                        <div class="page-section" data-page="1">
                            <label for="page1Name">Page Name:</label>
                            <input type="text" id="page1Name" name="page1Name" value="Home">
                            <br><br>
                            <label for="page1Content">Page Content:</label>
                            <textarea id="page1Content" name="page1Content" placeholder="Describe this page"></textarea>
                            <label for="page1Images">Additional Images:</label>
                            <input type="file" id="page1Images" name="page1Images" accept="image/*" multiple>
                        </div>
                    </div>
                    <button type="button" data-action="addPage">Add Another Page</button>

                    <label>Wix Widgets:</label>
                    <div class="widget-checkboxes">
                        <div><label><input type="checkbox" name="widgets" value="events"> Events</label> - Add an events calendar.</div>
                        <div><label><input type="checkbox" name="widgets" value="socialMediaFeeds"> Social Media Feeds</label> - Display live social media feeds.</div>
                        <div><label><input type="checkbox" name="widgets" value="gallery"> Gallery</label> - Showcase photos.</div>
                        <div><label><input type="checkbox" name="widgets" value="contactForm"> Contact Form</label> - Simple contact form.</div>
                        <div><label><input type="checkbox" name="widgets" value="blog"> Blog</label> - Share updates and stories.</div>
                        <div><label><input type="checkbox" name="widgets" value="weather"> Weather</label> - Show real-time weather.</div>
                        <div><label><input type="checkbox" name="widgets" value="socialMediaLinks"> Social Media Links</label> - Quick links to profiles.</div>
                    </div>

                    <button type="button" data-action="saveSiteRequest">Submit Request</button>
                </form>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        // Global variables
        const apiUrl = 'https://clubmadeira.io';
        let userPermissions = [];
        let pageCount = 1;
        let emailCount = 1;
        let currentUserId = null;
        let savedCategories = []; // Store user's saved categories

        // Decode JWT token
        function decodeJWT(token) {
            if (!token || typeof token !== 'string') {
                console.error('Invalid token');
                return null;
            }
            if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
                console.error('Invalid token format');
                return null;
            }
            const parts = token.split('.');
            try {
                const base64Url = parts[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                return JSON.parse(jsonPayload);
            } catch (error) {
                console.error('Error decoding JWT:', error.message);
                return null;
            }
        }

        // Initialize the community page
        function initializeCommunity() {
            console.log('Initializing community page');
            const token = localStorage.getItem('authToken');
            currentUserId = localStorage.getItem('userId');

            if (!token) {
                console.error('No token found, redirecting to /');
                window.location.href = '/';
                return;
            }

            const decoded = decodeJWT(token);
            if (!decoded) {
                console.error('Invalid token, redirecting to /');
                window.location.href = '/';
                return;
            }

            userPermissions = decoded.permissions || [];
            if (!userPermissions.includes('admin') && !userPermissions.includes('community')) {
                toastr.error('Permission denied: Community permission required');
                console.error('No community permission, redirecting to /');
                window.location.href = '/';
                return;
            }

            if (!currentUserId) {
                toastr.error('User ID not found in session, redirecting to login');
                console.error('No userId found in localStorage');
                window.location.href = '/';
                return;
            }

            document.getElementById('userId').value = currentUserId;
            updateMenu();
            loadBranding();
            showSection('welcome');
            waitForTinyMCE(initializeTinyMCE);
            attachEventListeners();
            console.log('Community page initialized successfully');
        }

        // Toastr configuration
        toastr.options = { 
            closeButton: true, 
            progressBar: true, 
            positionClass: 'toast-top-right', 
            timeOut: 5000,
            showMethod: 'slideDown',
            hideMethod: 'slideUp'
        };

        // Fetch protected page content
        async function fetchProtectedPage(url) {
            console.log('Fetching protected page:', url);
            const token = localStorage.getItem('authToken');
            if (!token || !currentUserId) {
                toastr.error('No authentication token or user ID found. Please log in.');
                window.location.href = '/';
                return;
            }
            const finalUrl = `${apiUrl}${url}`.replace('[YourUserID]', currentUserId);
            console.log('Final URL:', finalUrl);
            try {
                const response = await fetch(finalUrl, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'text/html'
                    }
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Server returned ${response.status}: ${errorText}`);
                }
                const html = await response.text();
                document.open();
                document.write(html);
                document.close();
                const event = new Event('DOMContentLoaded', { bubbles: true, cancelable: true });
                document.dispatchEvent(event);
                console.log('Protected page loaded:', url);
            } catch (error) {
                toastr.error(error.message || 'Failed to load protected page');
                console.error('Fetch error:', error);
            }
        }

        // Wait for TinyMCE to load
        function waitForTinyMCE(callback) {
            console.log('Checking if TinyMCE is loaded');
            if (typeof tinymce !== 'undefined' && tinymce.init) {
                console.log('TinyMCE is loaded, executing callback');
                callback();
            } else {
                console.log('Waiting for TinyMCE to load...');
                const script = document.querySelector('script[src*="tinymce.min.js"]');
                if (script) {
                    script.onload = () => {
                        console.log('TinyMCE script loaded');
                        callback();
                    };
                    script.onerror = () => console.error('TinyMCE failed to load');
                } else {
                    setTimeout(() => waitForTinyMCE(callback), 100);
                }
            }
        }

        // Initialize TinyMCE editors
        function initializeTinyMCE() {
            console.log('Initializing TinyMCE');
            tinymce.remove();
            tinymce.init({
                selector: '#aboutCommunity, textarea[name$="Content"]',
                height: 200,
                menubar: false,
                plugins: 'lists',
                toolbar: 'bold italic | bullist numlist',
                setup: editor => {
                    editor.on('init', () => console.log('TinyMCE editor initialized'));
                }
            });
        }

        // Attach event listeners with duplicate prevention
        function attachEventListeners() {
            console.log('Attaching event listeners');
            const existingListeners = document.__eventListeners || new Map();
            document.__eventListeners = existingListeners;

            document.querySelectorAll('.menu button[data-section]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const section = button.getAttribute('data-section');
                        const submenu = button.getAttribute('data-submenu');
                        console.log('Button clicked:', { section, submenu });
                        if (submenu) toggleSubmenu(submenu);
                        if (section) showSection(section);
                    });
                    existingListeners.set(button, true);
                }
            });

            document.querySelectorAll('.menu button[data-href]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', async () => {
                        const href = button.getAttribute('data-href');
                        console.log(`Fetching protected page: ${href}`);
                        await fetchProtectedPage(href);
                    });
                    existingListeners.set(button, true);
                }
            });

            document.querySelectorAll('.toggle-section').forEach(toggle => {
                if (!existingListeners.has(toggle)) {
                    toggle.addEventListener('click', () => {
                        const sectionId = toggle.getAttribute('data-toggle');
                        toggleSection(sectionId);
                    });
                    existingListeners.set(toggle, true);
                }
            });

            document.querySelectorAll('.password-toggle').forEach(toggle => {
                if (!existingListeners.has(toggle)) {
                    toggle.addEventListener('click', () => {
                        const fieldId = toggle.getAttribute('data-target');
                        togglePassword(fieldId);
                    });
                    existingListeners.set(toggle, true);
                }
            });

            document.querySelectorAll('button[data-action]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const action = button.getAttribute('data-action');
                        console.log('Action button clicked:', action);
                        if (action === 'saveSettings') saveSettings();
                        else if (action === 'savePassword') savePassword();
                        else if (action === 'addPage') addPage();
                        else if (action === 'addEmail') addEmail();
                        else if (action === 'checkDomainAvailability') checkDomainAvailability();
                        else if (action === 'saveSiteRequest') saveSiteRequest();
                    });
                    existingListeners.set(button, true);
                }
            });

            document.querySelectorAll('.treeview .toggle').forEach(toggle => {
                if (!existingListeners.has(toggle)) {
                    toggle.addEventListener('click', () => {
                        const parentId = toggle.getAttribute('data-id');
                        toggleSubcategories(parentId, toggle);
                    });
                    existingListeners.set(toggle, true);
                }
            });

            document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(checkbox => {
                if (!existingListeners.has(checkbox)) {
                    checkbox.addEventListener('change', saveCategories);
                    existingListeners.set(checkbox, true);
                }
            });

            const logOffBtn = document.getElementById('logOffBtn');
            if (logOffBtn && !existingListeners.has(logOffBtn)) {
                logOffBtn.addEventListener('click', logout);
                existingListeners.set(logOffBtn, true);
            }

            document.querySelectorAll('.remove-page-btn').forEach(btn => {
                if (!existingListeners.has(btn)) {
                    btn.addEventListener('click', () => {
                        const pageNum = btn.getAttribute('data-page');
                        removePage(pageNum);
                    });
                    existingListeners.set(btn, true);
                }
            });

            document.querySelectorAll('.remove-email-btn').forEach(btn => {
                if (!existingListeners.has(btn)) {
                    btn.addEventListener('click', () => {
                        const emailNum = btn.getAttribute('data-email');
                        removeEmail(emailNum);
                    });
                    existingListeners.set(btn, true);
                }
            });
            console.log('Event listeners attached');
        }

        // Update the menu dynamically
        function updateMenu() {
            console.log('Updating menu');
            const menu = document.getElementById('menu');
            menu.innerHTML = `<input type="text" id="userId" style="display: none;" value="${currentUserId || ''}">`;
            menu.innerHTML += `
                <button data-submenu="my_website" data-section="my_website_intro">My Web Site <i class="fas fa-caret-down"></i></button>
                <div id="my_website" class="submenu">
                    <button data-section="wix">Wix</button>
                    <button data-section="wordpress">WordPress</button>
                    <button data-section="squarespace">Squarespace</button>
                    <button data-section="weebly">Weebly</button>
                    <button data-section="joomla">Joomla</button>
                    <button data-section="no_website">I Don’t Have a Website Yet</button>
                </div>
                <button data-section="categories">My Categories</button>
                <button data-submenu="referrals" data-section="referrals_intro">My Referrals <i class="fas fa-caret-down"></i></button>
                <div id="referrals" class="submenu">
                    <button data-section="visits">Visits</button>
                    <button data-section="orders">Orders</button>
                </div>
                <button data-section="settings">My Account</button>
            `;
            if (userPermissions.includes('admin')) {
                menu.innerHTML += '<button data-href="/admin" class="btn-admin">Back to Admin</button>';
            }
            menu.innerHTML += '<button id="logOffBtn" class="btn-logoff">Log Off</button>';
            console.log('Menu updated');
        }

        // Load branding content
        async function loadBranding() {
            console.log('Loading branding');
            try {
                const response = await authenticatedFetch(`${apiUrl}/branding`);
                if (!response.ok) throw new Error(`Failed to fetch branding: ${response.status}`);
                const data = await response.json();
                document.getElementById('brandingContent').innerHTML = data.content || '<h1>Community Dashboard</h1>';
                console.log('Branding loaded');
            } catch (error) {
                toastr.error(`Error loading branding: ${error.message}`);
                document.getElementById('brandingContent').innerHTML = '<h1>Community Dashboard</h1>';
                console.error('Branding load error:', error);
            }
        }

        // Authenticated fetch with token
        async function authenticatedFetch(url, options = {}) {
            console.log('Making authenticated fetch to:', url);
            const token = localStorage.getItem('authToken');
            options.headers = { 
                ...options.headers, 
                'Authorization': `Bearer ${token}`, 
                'Content-Type': options.body instanceof FormData ? undefined : 'application/json' 
            };
            const response = await fetch(url, options);
            if (response.status === 401) {
                toastr.error('Session expired. Please log in again.');
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                currentUserId = null;
                window.location.href = '/';
            }
            console.log('Fetch completed:', response.status);
            return response;
        }

        // Show a specific section
        function showSection(section) {
            console.log('Showing section:', section);
            document.querySelectorAll('.section').forEach(s => {
                s.classList.remove('active');
                s.style.display = 'none';
            });
            const activeSection = document.getElementById(section);
            if (activeSection) {
                activeSection.classList.add('active');
                activeSection.style.display = 'block';
                console.log('Section activated:', section);
            } else {
                console.error('Section not found:', section);
            }
            if (section === 'settings') loadSettings();
            else if (section === 'categories') loadCategories();
            else if (section === 'visits') loadVisits();
            else if (section === 'orders') loadOrders();
            else if (section === 'no_website') loadSiteRequest();
            else if (['wix', 'wordpress', 'squarespace', 'weebly', 'joomla'].includes(section)) updateIntegrationCode(section);
        }

        // Toggle submenu visibility
        function toggleSubmenu(submenuId) {
            const submenu = document.getElementById(submenuId);
            submenu.classList.toggle('open');
            console.log('Toggled submenu:', submenuId, submenu.classList.contains('open') ? 'open' : 'closed');
        }

        // Toggle section content visibility
        function toggleSection(sectionId) {
            const content = document.getElementById(sectionId);
            content.classList.toggle('open');
            console.log('Toggled section:', sectionId, content.classList.contains('open') ? 'open' : 'closed');
        }

        // Logout function
        function logout() {
            console.log('Logging out');
            if (confirm('Are you sure you want to log off?')) {
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                currentUserId = null;
                toastr.success('Logged out successfully');
                setTimeout(() => window.location.href = '/', 1000);
                console.log('Logout completed');
            }
        }

        // Load user settings
        async function loadSettings() {
            console.log('Loading settings');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`);
                if (!response.ok) throw new Error(`Failed to fetch settings: ${response.status}`);
                const data = await response.json();
                document.getElementById('referrerId').textContent = currentUserId;
                document.getElementById('contactName').value = data.contact_name || '';
                document.getElementById('websiteUrl').value = data.website_url || '';
                document.getElementById('emailAddress').value = data.email_address || '';
                document.getElementById('phoneNumber').value = data.phone_number || '';
                console.log('Settings loaded for user:', currentUserId);
            } catch (error) {
                toastr.error(`Error loading settings: ${error.message}`);
                console.error('Settings load error:', error);
            }
        }

        // Save user settings
        async function saveSettings() {
            console.log('Saving settings');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            const settings = {
                contact_name: document.getElementById('contactName').value.trim(),
                website_url: document.getElementById('websiteUrl').value.trim(),
                email_address: document.getElementById('emailAddress').value.trim(),
                phone_number: document.getElementById('phoneNumber').value.trim()
            };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`, { 
                    method: 'PUT', 
                    body: JSON.stringify(settings) 
                });
                if (!response.ok) throw new Error(`Failed to save settings: ${response.status}`);
                toastr.success('Settings saved successfully');
                console.log('Settings saved for user:', currentUserId);
            } catch (error) {
                toastr.error(`Error saving settings: ${error.message}`);
                console.error('Settings save error:', error);
            }
        }

        // Toggle password visibility
        function togglePassword(fieldId) {
            const input = document.getElementById(fieldId);
            const icon = input.nextElementSibling;
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
            console.log('Toggled password visibility for:', fieldId);
        }

        // Save new password
        async function savePassword() {
            console.log('Saving password');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            const passwordRegex = /^(?=.*\d).{8,}$/;
            if (!passwordRegex.test(newPassword)) {
                toastr.error('New password must be at least 8 characters long and include numbers');
                return;
            }
            if (newPassword !== confirmPassword) {
                toastr.error('New password and confirmation do not match');
                return;
            }

            const passwordData = { currentPassword, newPassword };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/password`, {
                    method: 'POST',
                    body: JSON.stringify(passwordData)
                });
                if (!response.ok) throw new Error(`Failed to change password: ${response.status}`);
                document.getElementById('currentPassword').value = '';
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmPassword').value = '';
                toastr.success('Password changed successfully');
                console.log('Password changed for user:', currentUserId);
            } catch (error) {
                toastr.error(`Error changing password: ${error.message}`);
                console.error('Password change error:', error);
            }
        }

        // Update integration code for web platforms
        function updateIntegrationCode(section) {
            console.log('Updating integration code for:', section);
            const codeElements = {
                'wix': 'wixCode',
                'wordpress': 'wordpressCode',
                'squarespace': 'squarespaceCode',
                'weebly': 'weeblyCode',
                'joomla': 'joomlaCode'
            };
            const codeId = codeElements[section];
            if (codeId) {
                document.getElementById(codeId).textContent = `<iframe src="https://clubmadeira.io/discounts?referrer=${currentUserId || 'unknown'}" width="100%" height="600"></iframe>`;
                console.log('Updated integration code for:', section);
            }
        }

        // Load categories for treeview
        async function loadCategories() {
            console.log('Loading categories');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            try {
                // Load user's saved categories
                const userResponse = await authenticatedFetch(`${apiUrl}/${currentUserId}/mycategories`);
                if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
                const userData = await userResponse.json();
                savedCategories = userData.categories || [];
                console.log('Saved categories:', savedCategories);

                // Load top-level categories
                const response = await authenticatedFetch(`${apiUrl}/categories`);
                if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
                const data = await response.json();

                const treeElement = document.getElementById('categoryTree');
                treeElement.innerHTML = '';
                const ul = document.createElement('ul');
                const topLevelCategories = data.categories.filter(cat => !cat.parent_id);
                topLevelCategories.forEach(cat => {
                    ul.appendChild(createTreeNode(cat));
                });
                treeElement.appendChild(ul);

                attachEventListeners();
                console.log('Top-level categories loaded');
            } catch (error) {
                toastr.error(`Error loading categories: ${error.message}`);
                console.error('Categories load error:', error);
            }
        }

        // Create a tree node for categories
        function createTreeNode(category) {
            console.log('Creating tree node for category:', category.id);
            const li = document.createElement('li');
            const nodeDiv = document.createElement('div');
            nodeDiv.className = 'node';

            const toggle = document.createElement('span');
            toggle.className = 'toggle';
            toggle.setAttribute('data-id', category.id);
            toggle.textContent = '+'; // Always show '+' initially, assuming potential subcategories

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = category.id;
            checkbox.checked = savedCategories.includes(category.id.toString());

            const span = document.createElement('span');
            span.textContent = `${category.name} (${category.id})`;

            nodeDiv.appendChild(toggle);
            nodeDiv.appendChild(checkbox);
            nodeDiv.appendChild(span);
            li.appendChild(nodeDiv);

            const subUl = document.createElement('ul');
            subUl.className = 'subcategories';
            li.appendChild(subUl);

            return li;
        }

        // Toggle subcategories visibility and load dynamically
        async function toggleSubcategories(parentId, toggle) {
            console.log('Toggling subcategories for parentId:', parentId);
            const li = toggle.closest('li');
            const subUl = li.querySelector('.subcategories');

            if (subUl.classList.contains('open')) {
                subUl.classList.remove('open');
                toggle.textContent = '+';
                console.log('Subcategories closed');
            } else {
                if (subUl.children.length === 0) {
                    try {
                        const response = await authenticatedFetch(`${apiUrl}/categories?parent_id=${parentId}`);
                        if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                        const data = await response.json();
                        if (data.categories && data.categories.length > 0) {
                            data.categories.forEach(cat => {
                                subUl.appendChild(createTreeNode(cat));
                            });
                            attachEventListeners(); // Reattach listeners for new nodes
                            console.log('Subcategories loaded for:', parentId);
                        } else {
                            toggle.textContent = ' '; // No subcategories, remove toggle
                            console.log('No subcategories found for:', parentId);
                        }
                    } catch (error) {
                        toastr.error(`Error loading subcategories: ${error.message}`);
                        console.error('Subcategories load error:', error);
                        toggle.textContent = ' ';
                        return;
                    }
                }
                subUl.classList.add('open');
                toggle.textContent = '-';
                console.log('Subcategories opened');
            }
        }

        // Save selected categories
        async function saveCategories() {
            console.log('Saving categories');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            const checked = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/mycategories`, { 
                    method: 'PUT', 
                    body: JSON.stringify({ categories: checked }) 
                });
                if (!response.ok) throw new Error(`Failed to save categories: ${response.status}`);
                savedCategories = checked;
                toastr.success('Categories saved successfully');
                console.log('Categories saved:', checked);
            } catch (error) {
                toastr.error(`Error saving categories: ${error.message}`);
                console.error('Categories save error:', error);
            }
        }

        // Load referral visits
        async function loadVisits() {
            console.log('Loading visits');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/visits`);
                if (!response.ok) throw new Error(`Failed to fetch visits: ${response.status}`);
                const data = await response.json();
                if (data.status === 'success') {
                    const now = new Date();
                    const thisMonth = now.getMonth();
                    const thisYear = now.getFullYear();
                    const visitsThisMonth = [];
                    const visitsLastMonth = [];
                    const visitsEarlier = [];
                    data.visits.forEach(visit => {
                        const visitDate = new Date(visit.timestamp);
                        if (visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth) visitsThisMonth.push(visit);
                        else if ((visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth - 1) || 
                                 (visitDate.getFullYear() === thisYear - 1 && thisMonth === 0 && visitDate.getMonth() === 11)) visitsLastMonth.push(visit);
                        else visitsEarlier.push(visit);
                    });
                    updateVisitsTable('visitsListThisMonth', visitsThisMonth);
                    updateVisitsTable('visitsListLastMonth', visitsLastMonth);
                    updateVisitsTable('visitsListEarlier', visitsEarlier);
                    console.log('Visits loaded');
                }
            } catch (error) {
                toastr.error(`Error loading visits: ${error.message}`);
                console.error('Visits load error:', error);
            }
        }

        // Update visits table
        function updateVisitsTable(tableId, visits) {
            console.log('Updating visits table:', tableId);
            const tbody = document.getElementById(tableId);
            tbody.innerHTML = visits.length === 0 ? '<tr><td colspan="2">No visits found</td></tr>' : '';
            visits.forEach(visit => {
                const row = document.createElement('tr');
                row.innerHTML = `<td>${visit.page}</td><td>${visit.timestamp}</td>`;
                tbody.appendChild(row);
            });
            console.log('Visits table updated:', tableId);
        }

        // Load referral orders
        async function loadOrders() {
            console.log('Loading orders');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/orders`);
                if (!response.ok) throw new Error(`Failed to fetch orders: ${response.status}`);
                const data = await response.json();
                if (data.status === 'success') {
                    const now = new Date();
                    const thisMonth = now.getMonth();
                    const thisYear = now.getFullYear();
                    const ordersThisMonth = [];
                    const ordersLastMonth = [];
                    const ordersEarlier = [];
                    data.orders.forEach(order => {
                        const orderDate = new Date(order.timestamp);
                        if (orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth) ordersThisMonth.push(order);
                        else if ((orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth - 1) || 
                                 (orderDate.getFullYear() === thisYear - 1 && thisMonth === 0 && orderDate.getMonth() === 11)) ordersLastMonth.push(order);
                        else ordersEarlier.push(order);
                    });
                    updateOrdersTable('ordersListThisMonth', ordersThisMonth);
                    updateOrdersTable('ordersListLastMonth', ordersLastMonth);
                    updateOrdersTable('ordersListEarlier', ordersEarlier);
                    console.log('Orders loaded');
                }
            } catch (error) {
                toastr.error(`Error loading orders: ${error.message}`);
                console.error('Orders load error:', error);
            }
        }

        // Update orders table
        function updateOrdersTable(tableId, orders) {
            console.log('Updating orders table:', tableId);
            const tbody = document.getElementById(tableId);
            tbody.innerHTML = orders.length === 0 ? '<tr><td colspan="4">No orders found</td></tr>' : '';
            orders.forEach(order => {
                const row = document.createElement('tr');
                row.innerHTML = `<td>${order.orderId}</td><td>${order.buyer}</td><td>$${order.total}</td><td>${order.timestamp}</td>`;
                tbody.appendChild(row);
            });
            console.log('Orders table updated:', tableId);
        }

        // Load site request form data
        async function loadSiteRequest() {
            console.log('Loading site request');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/siterequest`);
                if (!response.ok) throw new Error(`Failed to fetch site request: ${response.status}`);
                const data = await response.json();
                const siteRequest = data.site_request || {};

                document.getElementById('communityName').value = siteRequest.communityName || '';
                tinymce.get('aboutCommunity')?.setContent(siteRequest.aboutCommunity || '');
                document.getElementById('colorPrefs').value = siteRequest.colorPrefs || '';
                document.getElementById('stylingDetails').value = siteRequest.stylingDetails || '';
                document.getElementById('preferredDomain').value = siteRequest.preferredDomain || 'mycommunity.org';

                const emails = siteRequest.emails || ['info'];
                emailCount = 0;
                const emailsContainer = document.getElementById('emailsContainer');
                emailsContainer.innerHTML = '';
                emails.forEach((email, index) => {
                    emailCount++;
                    const emailDiv = document.createElement('div');
                    emailDiv.className = 'email-section';
                    emailDiv.dataset.email = emailCount;
                    emailDiv.innerHTML = `
                        <label for="email${emailCount}Name">Email Name:</label>
                        <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" value="${email}">
                        <span id="email${emailCount}Domain">@${siteRequest.preferredDomain || 'mycommunity.org'}</span>
                        ${emailCount > 1 ? `<button type="button" class="remove-email-btn" data-email="${emailCount}">Remove Email</button>` : ''}
                    `;
                    emailsContainer.appendChild(emailDiv);
                });

                const pages = siteRequest.pages && siteRequest.pages.length > 0 ? siteRequest.pages : [{ name: 'Home', content: '' }];
                pageCount = 0;
                const pagesContainer = document.getElementById('pagesContainer');
                pagesContainer.innerHTML = '';
                pages.forEach((page, index) => {
                    pageCount++;
                    const pageDiv = document.createElement('div');
                    pageDiv.className = 'page-section';
                    pageDiv.dataset.page = pageCount;
                    pageDiv.innerHTML = `
                        <label for="page${pageCount}Name">Page Name:</label>
                        <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" value="${page.name || ''}">
                        <br><br>
                        <label for="page${pageCount}Content">Page Content:</label>
                        <textarea id="page${pageCount}Content" name="page${pageCount}Content">${page.content || ''}</textarea>
                        <label for="page${pageCount}Images">Additional Images:</label>
                        <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
                        ${pageCount > 1 ? `<button type="button" class="remove-page-btn" data-page="${pageCount}">Remove Page</button>` : ''}
                    `;
                    pagesContainer.appendChild(pageDiv);
                });

                const widgets = siteRequest.widgets || [];
                document.querySelectorAll('input[name="widgets"]').forEach(checkbox => {
                    checkbox.checked = widgets.includes(checkbox.value);
                });

                tinymce.remove();
                waitForTinyMCE(initializeTinyMCE);
                updateEmailDomains();
                console.log('Site request loaded');
            } catch (error) {
                toastr.error(`Error loading site request: ${error.message}`);
                console.error('Site request load error:', error);
            }
        }

        // Save site request form data
        async function saveSiteRequest() {
            console.log('Saving site request');
            if (!currentUserId) {
                toastr.error('User ID not found in SESSION');
                return;
            }

            const siteRequest = {
                userId: currentUserId,
                type: "community",
                communityName: document.getElementById('communityName').value.trim(),
                aboutCommunity: tinymce.get('aboutCommunity')?.getContent() || '',
                communityLogos: [],
                colorPrefs: document.getElementById('colorPrefs').value.trim(),
                stylingDetails: document.getElementById('stylingDetails').value.trim(),
                preferredDomain: document.getElementById('preferredDomain').value.trim() || 'mycommunity.org',
                emails: [],
                pages: [],
                widgets: Array.from(document.querySelectorAll('input[name="widgets"]:checked')).map(cb => cb.value)
            };

            if (!siteRequest.communityName) {
                toastr.error('Community name is required');
                return;
            }

            const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
            if (!domainRegex.test(siteRequest.preferredDomain)) {
                toastr.error('Invalid domain name (e.g., mycommunity.org)');
                return;
            }

            const logoFiles = document.getElementById('communityLogos').files;
            if (logoFiles.length > 5) {
                toastr.error('Maximum of 5 logos allowed');
                return;
            }
            for (let i = 0; i < logoFiles.length; i++) {
                const reader = new FileReader();
                await new Promise(resolve => {
                    reader.onload = () => {
                        siteRequest.communityLogos.push(reader.result);
                        resolve();
                    };
                    reader.readAsDataURL(logoFiles[i]);
                });
            }

            for (let i = 1; i <= emailCount; i++) {
                const emailInput = document.getElementById(`email${i}Name`);
                if (emailInput && emailInput.value.trim()) {
                    siteRequest.emails.push(emailInput.value.trim());
                }
            }

            for (let i = 1; i <= pageCount; i++) {
                const nameInput = document.getElementById(`page${i}Name`);
                const contentEditor = tinymce.get(`page${i}Content`);
                const imagesInput = document.getElementById(`page${i}Images`);
                if (nameInput && nameInput.value.trim()) {
                    const page = {
                        name: nameInput.value.trim(),
                        content: contentEditor ? contentEditor.getContent() : '',
                        images: []
                    };
                    if (imagesInput && imagesInput.files.length > 0) {
                        for (let j = 0; j < imagesInput.files.length; j++) {
                            const reader = new FileReader();
                            await new Promise(resolve => {
                                reader.onload = () => {
                                    page.images.push(reader.result);
                                    resolve();
                                };
                                reader.readAsDataURL(imagesInput.files[j]);
                            });
                        }
                    }
                    siteRequest.pages.push(page);
                }
            }

            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/siterequest`, {
                    method: 'POST',
                    body: JSON.stringify(siteRequest)
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Failed to save site request: ${response.status}`);
                }
                toastr.success('Site request saved successfully');
                console.log('Site request saved');
            } catch (error) {
                toastr.error(`Error saving site request: ${error.message}`);
                console.error('Site request save error:', error);
            }
        }

        // Add a new page to the site request form
        function addPage() {
            console.log('Adding new page');
            if (pageCount >= 5) {
                toastr.error('Maximum of 5 pages allowed');
                return;
            }
            pageCount++;
            const container = document.getElementById('pagesContainer');
            const newPage = document.createElement('div');
            newPage.className = 'page-section';
            newPage.dataset.page = pageCount;
            newPage.innerHTML = `
                <label for="page${pageCount}Name">Page Name:</label>
                <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" placeholder="e.g., Events">
                <br><br>
                <label for="page${pageCount}Content">Page Content:</label>
                <textarea id="page${pageCount}Content" name="page${pageCount}Content" placeholder="Describe this page"></textarea>
                <label for="page${pageCount}Images">Additional Images:</label>
                <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
                <button type="button" class="remove-page-btn" data-page="${pageCount}">Remove Page</button>
            `;
            container.appendChild(newPage);
            tinymce.remove();
            waitForTinyMCE(initializeTinyMCE);
            console.log('Added page:', pageCount);
        }

        // Remove a page from the site request form
        function removePage(pageNum) {
            console.log('Removing page:', pageNum);
            if (pageCount <= 1) {
                toastr.error('Cannot remove the last page');
                return;
            }
            const pageSection = document.querySelector(`.page-section[data-page="${pageNum}"]`);
            if (pageSection) {
                pageSection.remove();
                pageCount--;
                tinymce.remove();
                waitForTinyMCE(initializeTinyMCE);
                console.log('Removed page:', pageNum);
            }
        }

        // Add a new email to the site request form
        function addEmail() {
            console.log('Adding new email');
            if (emailCount >= 5) {
                toastr.error('Maximum of 5 email addresses allowed');
                return;
            }
            emailCount++;
            const container = document.getElementById('emailsContainer');
            const domain = document.getElementById('preferredDomain').value || 'mycommunity.org';
            const newEmail = document.createElement('div');
            newEmail.className = 'email-section';
            newEmail.dataset.email = emailCount;
            newEmail.innerHTML = `
                <label for="email${emailCount}Name">Email Name:</label>
                <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" placeholder="e.g., contact">
                <span id="email${emailCount}Domain">@${domain}</span>
                <button type="button" class="remove-email-btn" data-email="${emailCount}">Remove Email</button>
            `;
            container.appendChild(newEmail);
            updateEmailDomains();
            console.log('Added email:', emailCount);
        }

        // Remove an email from the site request form
        function removeEmail(emailNum) {
            console.log('Removing email:', emailNum);
            if (emailCount <= 1) {
                toastr.error('Cannot remove the last email');
                return;
            }
            const emailSection = document.querySelector(`.email-section[data-email="${emailNum}"]`);
            if (emailSection) {
                emailSection.remove();
                emailCount--;
                updateEmailDomains();
                console.log('Removed email:', emailNum);
            }
        }

        // Update email domains based on preferred domain
        function updateEmailDomains() {
            console.log('Updating email domains');
            const domain = document.getElementById('preferredDomain').value || 'mycommunity.org';
            for (let i = 1; i <= emailCount; i++) {
                const domainSpan = document.getElementById(`email${i}Domain`);
                if (domainSpan) domainSpan.textContent = `@${domain}`;
            }
            console.log('Updated email domains to:', domain);
        }

        // Check domain availability (placeholder)
        function checkDomainAvailability() {
            console.log('Checking domain availability');
            const domain = document.getElementById('preferredDomain').value;
            const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
            if (!domain) {
                toastr.error('Please enter a preferred domain name');
                return;
            }
            if (!domainRegex.test(domain)) {
                toastr.error('Invalid domain name (e.g., mycommunity.org)');
                return;
            }
            toastr.info(`Checking availability for ${domain}...`);
            setTimeout(() => toastr.success('This is a placeholder - domain check not implemented'), 1000);
            console.log('Checked domain availability for:', domain);
        }

        // Start the initialization
        initializeCommunity();
    </script>
</body>
</html>
static/old/madeira.py
from flask import Flask, jsonify, request, render_template, redirect, url_for, abort, render_template_string
from flask_cors import CORS
from amazon_paapi import AmazonApi 
import time
import json
import os
import requests
import jwt
from pseudo_categories import PSEUDO_CATEGORIES
import random
import string
import hashlib
import bcrypt
import datetime
import re
import logging
import markdown
import whois
from functools import wraps

app = Flask(__name__)
CONFIG_FILE = "config.json"
DEFAULT_CATEGORIES = ["283155", "172282"]
USERS_SETTINGS_FILE = "users_settings.json"
# Define the base directory for site requests
SITE_REQUEST_DIR = os.path.join(os.path.dirname(__file__), "siterequest")

# Set up logging
logging.basicConfig(
    filename='app.log',  # Logfile will be 'app.log' in the current working directory
    level=logging.DEBUG,
    format='%(asctime)s %(levelname)s %(message)s'
)
logger = logging.getLogger(__name__)

# Enable CORS with verbose logging
CORS(app, resources={
    r"/*": {  # Wildcard to match all routes
        "origins": "https://clubmadeira.io",
        "methods": ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
}, supports_credentials=False)

def load_config():
    default_config = {
        "amazon_uk": {"ACCESS_KEY": "", "SECRET_KEY": "", "ASSOCIATE_TAG": "", "COUNTRY": ""},
        "ebay_uk": {"APP_ID": ""},
        "awin": {"API_TOKEN": ""},
        "cj": {"API_KEY": "", "WEBSITE_ID": ""},
        "textmagic": {"USERNAME": "", "API_KEY": ""},
        "tiny": {"API_KEY": ""}
    }
    if not os.path.exists(CONFIG_FILE):
        return default_config
    try:
        with open(CONFIG_FILE, 'r') as f:
            loaded_config = json.load(f)
        if not isinstance(loaded_config, dict):
            print(f"Error: {CONFIG_FILE} does not contain a valid JSON object. Using default config.")
            return default_config
        result_config = default_config.copy()
        for affiliate in loaded_config:
            if affiliate in result_config:
                result_config[affiliate].update(loaded_config[affiliate])
            else:
                result_config[affiliate] = loaded_config[affiliate]
        return result_config
    except json.JSONDecodeError as e:
        print(f"Error decoding {CONFIG_FILE}: {str(e)}. Returning default config.")
        return default_config
    except Exception as e:
        print(f"Unexpected error loading {CONFIG_FILE}: {str(e)}. Returning default config.")
        return default_config

# Load the configuration from config.json
config = load_config()

# Check if the required 'jwt' section and 'SECRET_KEY' exist
if 'jwt' not in config or 'SECRET_KEY' not in config['jwt']:
    raise ValueError("JWT SECRET_KEY is missing in config.json")

# Set the JWT_SECRET_KEY in the app's configuration
app.config['JWT_SECRET_KEY'] = config['jwt']['SECRET_KEY']

# Ensure the siterequest directory exists
if not os.path.exists(SITE_REQUEST_DIR):
    os.makedirs(SITE_REQUEST_DIR)

# Custom decorator for permissions
def require_permissions(required_permissions, require_all=True):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            auth_header = request.headers.get("Authorization")
            if not auth_header or not auth_header.startswith("Bearer "):
                return jsonify({"status": "error", "message": "Authorization token required"}), 401
            
            token = auth_header.split(" ")[1]
            try:
                payload = jwt.decode(token, app.config['JWT_SECRET_KEY'] , algorithms=["HS256"])
                if datetime.datetime.utcnow().timestamp() > payload["exp"]:
                    return jsonify({"status": "error", "message": "Token has expired"}), 401
                user_permissions = payload.get("permissions", [])
                request.user_id = payload["userId"]
                request.permissions = user_permissions
            except jwt.InvalidTokenError:
                return jsonify({"status": "error", "message": "Invalid token"}), 401
            except Exception as e:
                return jsonify({"status": "error", "message": f"Token error: {str(e)}"}), 500

            # Handle shorthands
            effective_perms = []
            for perm in required_permissions:
                if perm == "allauth":
                    effective_perms.extend(["admin", "merchant", "community", "wixpro"])
                elif perm == "self":
                    user_id_in_route = next((v for v in kwargs.values() if isinstance(v, str)), None)
                    if user_id_in_route and request.user_id != user_id_in_route:
                        effective_perms.append(None)  # Fails unless other perms allow
                    elif not user_id_in_route:  # For endpoints like /update-password
                        effective_perms.append("self")  # Check in function
                else:
                    effective_perms.append(perm)

            # Permission check
            if require_all:
                if not all(perm in user_permissions for perm in effective_perms if perm is not None and perm != "self"):
                    return jsonify({"status": "error", "message": f"Insufficient permissions: {effective_perms}"}), 403
            else:
                if not any(perm in user_permissions for perm in effective_perms if perm is not None and perm != "self"):
                    return jsonify({"status": "error", "message": f"Insufficient permissions: {effective_perms}"}), 403

            return f(*args, **kwargs)
        return decorated_function
    return decorator

# region Helper Functions
def generate_code():
    charset = string.digits + string.ascii_uppercase
    code = ''.join(random.choice(charset) for _ in range(7))
    total = sum(charset.index(c) for c in code)
    checksum = charset[total % 36]
    return code + checksum

def load_users_categories():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"Error loading {USERS_FILE}: {str(e)}")
            return {}
    return {}

def save_users_categories(users_data):
    try:
        with open(USERS_FILE, 'w') as f:
            json.dump(users_data, f, indent=4)
    except Exception as e:
        print(f"Error saving {USERS_FILE}: {str(e)}")

def get_user_categories(user_id):
    users_data = load_users_categories()
    if user_id not in users_data:
        users_data[user_id] = DEFAULT_CATEGORIES
        save_users_categories(users_data)
    return users_data.get(user_id, [])

def load_users_products():
    users_settings = load_users_settings()
    users_products = {}
    
    for user_id, settings in users_settings.items():
        wix_client_id = settings.get("wixClientId")
        if not wix_client_id:
            print(f"No wixClientId found for user {user_id}")
            users_products[user_id] = []
            continue

        token_url = "https://www.wixapis.com/oauth2/token"
        payload = {"clientId": wix_client_id, "grantType": "anonymous"}
        headers = {"Content-Type": "application/json"}
        try:
            response = requests.post(token_url, json=payload, headers=headers)
            if response.status_code != 200:
                print(f"Error getting token for user {user_id}: {response.status_code} - {response.text}")
                users_products[user_id] = []
                continue
            token_data = response.json()
            access_token = token_data["access_token"]
            print(f"Access Token for user {user_id}: {access_token}")
        except Exception as e:
            print(f"Token fetch error for user {user_id}: {str(e)}")
            users_products[user_id] = []
            continue

        collections_url = "https://www.wixapis.com/stores-reader/v1/collections/query"
        headers = {"Content-Type": "application/json", "Authorization": f"Bearer {access_token}"}

        def fetch_collections(limit=10, offset=0):
            query_payload = {"query": {"paging": {"limit": limit, "offset": offset}}, "includeNumberOfProducts": True}
            response = requests.post(collections_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching collections for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        products_url = "https://www.wixapis.com/stores/v1/products/query"

        def fetch_products_for_collection(collection_id, limit=10, offset=0):
            filter_str = json.dumps({"collections.id": {"$hasSome": [collection_id]}})
            query_payload = {"query": {"filter": filter_str, "paging": {"limit": limit, "offset": offset}}}
            response = requests.post(products_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching products for collection {collection_id} for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        all_collections = []
        limit = 10
        offset = 0

        while True:
            result = fetch_collections(limit=limit, offset=offset)
            if not result or "collections" not in result or not result["collections"]:
                break

            collections = result["collections"]
            filtered_collections = [{"id": col["id"], "name": col["name"], "numberOfProducts": col["numberOfProducts"], "products": []} 
                                    for col in collections if not col["id"].startswith("00000000")]
            all_collections.extend(filtered_collections)
            print(f"Fetched {len(collections)} collections, kept {len(filtered_collections)} for user {user_id} (offset {offset} to {offset + limit - 1})")
            offset += limit
            if len(collections) < limit:
                break

        all_products = []
        for collection in all_collections:
            collection_id = collection["id"]
            collection_name = collection["name"]
            offset = 0

            while True:
                result = fetch_products_for_collection(collection_id, limit=limit, offset=offset)
                if not result or "products" not in result or not result["products"]:
                    break

                products = result["products"]
                for product in products:
                    current_price = float(product.get("price", {}).get("formatted", {}).get("price", "0").replace("$", "").replace("£", "").replace(",", "") or 0.0)
                    original_price = float(product.get("discountedPrice", {}).get("formatted", {}).get("price", str(current_price)).replace("$", "").replace("£", "").replace(",", "") or current_price)
                    discount = ((original_price - current_price) / original_price) * 100 if original_price > current_price else 0
                    base_url = product.get("productPageUrl", {}).get("base", "").rstrip("/") + "/" + product.get("productPageUrl", {}).get("path", "").lstrip("/")
                    product_url = f"{base_url}?referer={user_id}"
                    all_products.append({
                        "source": user_id,
                        "id": product.get("id", ""),
                        "title": product.get("name", ""),
                        "product_url": product_url,
                        "current_price": current_price,
                        "original_price": original_price,
                        "discount_percent": round(discount, 2),
                        "image_url": product.get("media", {}).get("mainMedia", {}).get("thumbnail", {}).get("url", ""),
                        "qty": int(product.get("stock", {}).get("quantity", 0)) if product.get("stock", {}).get("trackQuantity", False) else -1,
                        "category": collection_name,
                        "user_id": user_id
                    })
                print(f"Fetched {len(products)} products for collection {collection_name} for user {user_id} (offset {offset} to {offset + limit - 1})")
                offset += limit
                if len(products) < limit:
                    break

        users_products[user_id] = all_products
        print(f"Total products fetched for user {user_id}: {len(all_products)}")

    return users_products

def save_users_products(users_products):
    with open(USERS_PRODUCTS_FILE, 'w') as f:
        json.dump(users_products, f, indent=4)

def get_user_products(user_id):
    users_products = load_users_products()
    return users_products.get(user_id, [])

def save_config(config):
    try:
        if not isinstance(config, dict):
            raise ValueError("Config must be a dictionary")
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)
        print(f"Config saved successfully to {CONFIG_FILE}")
    except IOError as e:
        print(f"Error saving {CONFIG_FILE}: {str(e)}")
        raise
    except ValueError as e:
        print(f"Error: {str(e)}")
        raise
    except Exception as e:
        print(f"Unexpected error saving {CONFIG_FILE}: {str(e)}")
        raise

def get_amazon_category_title(browse_node_id):
    config = load_config()
    if all(config.get("amazon_uk", {}).values()):
        amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"],
                           config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"])
        try:
            browse_nodes = amazon.get_browse_nodes(browse_node_ids=[browse_node_id], resources=["BrowseNodes.DisplayName"])
            if browse_nodes and browse_nodes.browse_nodes:
                return browse_nodes.browse_nodes[0].display_name
        except Exception as e:
            print(f"Error fetching category title for {browse_node_id}: {str(e)}")
    def find_category_recursive(categories, target_id):
        for category in categories:
            if category.get("id") == target_id:
                return category.get("name")
            if "subcategories" in category:
                result = find_category_recursive(category["subcategories"], target_id)
                if result is not None:
                    return result
    return find_category_recursive(PSEUDO_CATEGORIES, browse_node_id)

def get_immediate_subcategories(parent_id):
    config = load_config()
    if not all(config.get("amazon_uk", {}).values()):
        return []
    amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"],
                       config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"])
    try:
        browse_nodes = amazon.get_browse_nodes(browse_node_ids=[parent_id], resources=["BrowseNodes.Children"])
        if browse_nodes and browse_nodes.browse_nodes:
            return [{"id": node.browse_node_id, "name": node.display_name} for node in browse_nodes.browse_nodes[0].children]
        return []
    except Exception as e:
        print(f"Error fetching subcategories for {parent_id}: {str(e)}")
        return []

def filter_categories_with_products(category_ids, min_discount_percent):
    config = load_config()
    all_discounted_items = []
    for cat_id in category_ids:
        if all(config.get("amazon_uk", {}).values()):
            all_discounted_items.extend(search_amazon_uk_discounted(cat_id, min_discount_percent))
        if all(config.get("ebay_uk", {}).values()):
            all_discounted_items.extend(search_ebay_uk_discounted(cat_id, min_discount_percent))
        if config.get("awin", {}).get("API_TOKEN"):
            all_discounted_items.extend(search_awin_uk_discounted(cat_id, min_discount_percent))
        if all(config.get("cj", {}).values()):
            all_discounted_items.extend(search_cj_uk_discounted(cat_id, min_discount_percent))
    filtered_categories = []
    for cat_id in category_ids:
        if any(item for item in all_discounted_items if "BrowseNodeId" in item and item["BrowseNodeId"] == cat_id):
            category_title = get_amazon_category_title(cat_id) or cat_id
            filtered_categories.append({"id": cat_id, "name": category_title})
    return filtered_categories

def find_node(categories, target_id):
    for category in categories:
        if category['id'] == target_id:
            return category
        if 'subcategories' in category:
            result = find_node(category['subcategories'], target_id)
            if result is not None:
                return result
    return None

def find_pseudo_subcategories(parent_id, categories):
    node = find_node(categories, parent_id)
    if node and 'subcategories' in node:
        return [{'id': subcat['id'], 'name': subcat['name']} for subcat in node['subcategories']]
    return []

def load_users_settings():
    if os.path.exists(USERS_SETTINGS_FILE):
        try:
            with open(USERS_SETTINGS_FILE, 'r') as f:
                return json.load(f)
        except json.JSONDecodeError as e:
            raise Exception(f"Invalid JSON in {USERS_SETTINGS_FILE}: {str(e)}")
        except Exception as e:
            raise Exception(f"Error loading {USERS_SETTINGS_FILE}: {str(e)}")
    return {}

def save_users_settings(users_settings):
    try:
        with open(USERS_SETTINGS_FILE, 'w') as f:
            json.dump(users_settings, f, indent=4)
    except IOError as e:
        raise Exception(f"Failed to write to {USERS_SETTINGS_FILE}: {str(e)}")
    except Exception as e:
        raise Exception(f"Unexpected error saving {USERS_SETTINGS_FILE}: {str(e)}")
    
def get_user_settings(user_id):
    users_settings = load_users_settings()
    return users_settings.get(user_id, {})

def load_site_request(user_id):
    file_path = os.path.join(SITE_REQUEST_DIR, user_id)
    logger.debug(f"Attempting to load site request for user {user_id} from {file_path}")
    if os.path.exists(file_path):
        logger.debug(f"File exists: {file_path}")
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
                logger.debug(f"Successfully loaded data for user {user_id}: {json.dumps(data, indent=2)}")
                return data
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error for user {user_id} at {file_path}: {str(e)}")
            return {}
        except IOError as e:
            logger.error(f"IO error loading file for user {user_id} at {file_path}: {str(e)}")
            return {}
    else:
        logger.debug(f"No file found for user {user_id} at {file_path}")
        return {}

def save_site_request(user_id, site_request_data):
    file_path = os.path.join(SITE_REQUEST_DIR, user_id)
    try:
        with open(file_path, 'w') as f:
            json.dump(site_request_data, f, indent=4)
    except IOError as e:
        raise Exception(f"Failed to save site request for user {user_id}: {str(e)}")
# endregion Helper Functions

# region Detailed Fetch
def get_amazon_uk_full_details(asins, category):
    config = load_config()
    if not all(config.get("amazon_uk", {}).values()):
        return []
    amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"],
                       config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"])
    full_item_data = []
    try:
        item_response = amazon.get_items(
            item_ids=asins,
            resources=["ItemInfo.ByLineInfo", "ItemInfo.ContentInfo", "ItemInfo.Features", 
                       "ItemInfo.ProductInfo", "ItemInfo.Title", "Images.Primary.Large", 
                       "Offers.Listings.Price", "DetailPageURL"]
        )
        for item in item_response.items:
            current_price = item.offers.listings[0].price.amount if item.offers and item.offers.listings else None
            if item.offers and item.offers.listings and item.offers.listings[0].price.savings:
                savings = item.offers.listings[0].price.savings.amount
                original_price = current_price + savings
                discount_percent = float(item.offers.listings[0].price.savings.percentage)
            else:
                original_price = current_price
                discount_percent = 0.0
            item_data = {
                "source": "amazon_uk",
                "id": item.asin,
                "title": item.item_info.title.display_value if item.item_info.title else None,
                "product_url": item.detail_page_url,
                "current_price": current_price,
                "original_price": original_price,
                "discount_percent": discount_percent,
                "image_url": item.images.primary.large.url if item.images and item.images.primary else None,
                "category": category,
                "manufacturer": item.item_info.by_line_info.manufacturer.display_value if item.item_info.by_line_info and item.item_info.by_line_info.manufacturer else None,
                "dimensions": item.item_info.product_info.item_dimensions.display_value if item.item_info.product_info and item.item_info.product_info.item_dimensions else None,
                "features": item.item_info.features.display_values if item.item_info.features else []
            }
            full_item_data.append(item_data)
        time.sleep(1)
    except Exception as e:
        print(f"Amazon UK Error: {str(e)}")
    return full_item_data

def get_ebay_uk_full_details(item_ids, category):
    config = load_config()
    if not all(config.get("ebay_uk", {}).values()):
        return []
    url = "https://api.ebay.com/buy/browse/v1/item"
    headers = {"Authorization": f"Bearer {config['ebay_uk']['APP_ID']}"}
    full_item_data = []
    for item_id in item_ids:
        try:
            params = {"item_id": item_id}
            response = requests.get(url, headers=headers, params=params)
            item = response.json()
            current_price = float(item["price"]["value"])
            original_price_value = item.get("originalPrice", {}).get("value", current_price)
            original_price = float(original_price_value)
            discount = ((original_price - current_price) / original_price) * 100 if original_price > current_price else 0.0
            item_data = {
                "source": "ebay_uk",
                "id": item["itemId"],
                "title": item["title"],
                "product_url": item["itemWebUrl"],
                "current_price": current_price,
                "original_price": original_price,
                "discount_percent": round(discount, 2),
                "image_url": item["image"]["imageUrl"] if "image" in item else None,
                "category": category,
                "manufacturer": item.get("brand", None),
                "features": item.get("shortDescription", "").split(". ") if item.get("shortDescription") else []
            }
            full_item_data.append(item_data)
            time.sleep(1)
        except Exception as e:
            print(f"eBay UK Error for {item_id}: {str(e)}")
    return full_item_data

def get_awin_uk_full_details(product_ids, category):
    config = load_config()
    if not config.get("awin", {}).get("API_TOKEN"):
        return []
    url = f"https://api.awin.com/publishers/{config['awin']['API_TOKEN']}/products"
    full_item_data = []
    for product_id in product_ids:
        try:
            params = {"productId": product_id, "region": "UK"}
            response = requests.get(url, params=params)
            product = response.json()["products"][0]
            current_price = float(product["price"]["amount"])
            original_price = float(product.get("originalPrice", current_price))
            discount = ((original_price - current_price) / original_price) * 100 if original_price > current_price else 0.0
            item_data = {
                "source": "awin_uk",
                "id": product["productId"],
                "title": product["name"],
                "product_url": product["url"],
                "current_price": current_price,
                "original_price": original_price,
                "discount_percent": round(discount, 2),
                "image_url": product.get("imageUrl", None),
                "category": category,
                "manufacturer": product.get("brand", None),
                "dimensions": product.get("dimensions", None),
                "features": product.get("description", "").split(". ") if product.get("description") else []
            }
            full_item_data.append(item_data)
            time.sleep(1)
        except Exception as e:
            print(f"Awin UK Error for {product_id}: {str(e)}")
    return full_item_data

def get_cj_uk_full_details(skus, category):
    config = load_config()
    if not all(config.get("cj", {}).values()):
        return []
    url = "https://product-search.api.cj.com/v2/product-search"
    headers = {"Authorization": f"Bearer {config['cj']['API_KEY']}"}
    full_item_data = []
    for sku in skus:
        try:
            params = {"website-id": config["cj"]["WEBSITE_ID"], "sku": sku, "country": "UK"}
            response = requests.get(url, headers=headers, params=params)
            product = response.json()["products"][0]
            current_price = float(product["price"])
            original_price = float(product.get("salePrice", current_price))
            discount = ((original_price - current_price) / original_price) * 100 if original_price > current_price else 0.0
            item_data = {
                "source": "cj_uk",
                "id": product["sku"],
                "title": product["name"],
                "product_url": product["buyUrl"],
                "current_price": current_price,
                "original_price": original_price,
                "discount_percent": round(discount, 2),
                "image_url": product.get("imageUrl", None),
                "category": category,
                "manufacturer": product.get("manufacturerName", None),
                "dimensions": product.get("dimensions", None),
                "features": product.get("description", "").split(". ") if product.get("description") else []
            }
            full_item_data.append(item_data)
            time.sleep(1)
        except Exception as e:
            print(f"CJ UK Error for {sku}: {str(e)}")
    return full_item_data
# endregion Detailed Fetch

# region Search
def search_amazon_uk_discounted(browse_node_id, min_discount_percent=20):
    config = load_config()
    if not all(config.get("amazon_uk", {}).values()):
        return []
    amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"],
                       config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"])
    asins = []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    try:
        search_params = {"BrowseNodeId": browse_node_id, "ItemCount": 10, "Resources": ["Offers.Listings.Price", "Offers.Summaries.HighestPrice"]}
        for page in range(1, 11):
            search_params["ItemPage"] = page
            search_result = amazon.search_items(**search_params)
            if not search_result or not search_result.items:
                break
            for item in search_result.items:
                if (item.offers and item.offers.listings and item.offers.listings[0].price and 
                    item.offers.listings[0].price.savings and 
                    item.offers.listings[0].price.savings.percentage >= min_discount_percent):
                    asins.append(item.asin)
            time.sleep(1)
        return get_amazon_uk_full_details(asins, category=category_title)
    except Exception as e:
        print(f"Amazon UK Search Error: {str(e)}")
        return []

def search_ebay_uk_discounted(browse_node_id, min_discount_percent=20):
    config = load_config()
    if not all(config.get("ebay_uk", {}).values()):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = "https://api.ebay.com/buy/browse/v1/item_summary/search"
    headers = {"Authorization": f"Bearer {config['ebay_uk']['APP_ID']}"}
    params = {"q": category_title, "filter": "condition:NEW,availability:UK", "limit": "10", "sort": "-price"}
    item_ids = []
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        for item in data.get("itemSummaries", []):
            current_price = float(item["price"]["value"])
            original_price = float(item.get("originalPrice", {}).get("value", current_price))
            if original_price > current_price:
                discount = ((original_price - current_price) / original_price) * 100
                if discount >= min_discount_percent:
                    item_ids.append(item["itemId"])
        return get_ebay_uk_full_details(item_ids, category=category_title)
    except Exception as e:
        print(f"eBay UK Search Error: {str(e)}")
        return []

def search_awin_uk_discounted(browse_node_id, min_discount_percent=20):
    config = load_config()
    if not config.get("awin", {}).get("API_TOKEN"):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = f"https://api.awin.com/publishers/{config['awin']['API_TOKEN']}/products"
    params = {"region": "UK", "search": category_title, "discount": "true"}
    product_ids = []
    try:
        response = requests.get(url, params=params)
        data = response.json()
        for product in data.get("products", []):
            current_price = float(product["price"]["amount"])
            original_price = float(product.get("originalPrice", current_price))
            if original_price > current_price:
                discount = ((original_price - current_price) / original_price) * 100
                if discount >= min_discount_percent:
                    product_ids.append(product["productId"])
        return get_awin_uk_full_details(product_ids, category=category_title)
    except Exception as e:
        print(f"Awin UK Search Error: {str(e)}")
        return []

def search_cj_uk_discounted(browse_node_id, min_discount_percent=20):
    config = load_config()
    if not all(config.get("cj", {}).values()):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = "https://product-search.api.cj.com/v2/product-search"
    headers = {"Authorization": f"Bearer {config['cj']['API_KEY']}"}
    params = {"website-id": config["cj"]["WEBSITE_ID"], "keywords": category_title, "country": "UK", "sale-price": "true"}
    skus = []
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        for product in data.get("products", []):
            current_price = float(product["price"])
            original_price = float(product.get("salePrice", current_price))
            if original_price > current_price:
                discount = ((original_price - current_price) / original_price) * 100
                if discount >= min_discount_percent:
                    skus.append(product["sku"])
        return get_cj_uk_full_details(skus, category=category_title)
    except Exception as e:
        print(f"CJ UK Search Error: {str(e)}")
        return []

def search_wix_discounted(browse_node_id, min_discount_percent=20):
    users_settings = load_users_settings()
    all_discounted_products = []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        print(f"No category title found for browse_node_id {browse_node_id}")
        return []

    for user_id, settings in users_settings.items():
        wix_client_id = settings.get("wixClientId")
        if not wix_client_id:
            print(f"No wixClientId found for user {user_id}")
            continue

        token_url = "https://www.wixapis.com/oauth2/token"
        payload = {"clientId": wix_client_id, "grantType": "anonymous"}
        headers = {"Content-Type": "application/json"}
        try:
            response = requests.post(token_url, json=payload, headers=headers)
            if response.status_code != 200:
                print(f"Error getting token for user {user_id}: {response.status_code} - {response.text}")
                continue
            token_data = response.json()
            access_token = token_data["access_token"]
            print(f"Access Token for user {user_id}: {access_token}")
        except Exception as e:
            print(f"Token fetch error for user {user_id}: {str(e)}")
            continue

        collections_url = "https://www.wixapis.com/stores-reader/v1/collections/query"
        headers = {"Content-Type": "application/json", "Authorization": f"Bearer {access_token}"}

        def fetch_collections(limit=10, offset=0):
            query_payload = {"query": {"paging": {"limit": limit, "offset": offset}}, "includeNumberOfProducts": True}
            response = requests.post(collections_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching collections for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        products_url = "https://www.wixapis.com/stores/v1/products/query"

        def fetch_products_for_collection(collection_id, limit=10, offset=0):
            filter_str = json.dumps({"collections.id": {"$hasSome": [collection_id]}})
            query_payload = {"query": {"filter": filter_str, "paging": {"limit": limit, "offset": offset}}}
            response = requests.post(products_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching products for collection {collection_id} for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        limit = 10
        offset = 0
        matching_collection = None

        while True:
            result = fetch_collections(limit=limit, offset=offset)
            if not result or "collections" not in result or not result["collections"]:
                break

            collections = result["collections"]
            for col in collections:
                if col["name"].lower() == category_title.lower() and not col["id"].startswith("00000000"):
                    matching_collection = col
                    break
            if matching_collection:
                break
            offset += limit
            if len(collections) < limit:
                break

        if not matching_collection:
            print(f"No matching collection found for category '{category_title}' for user {user_id}")
            continue

        collection_id = matching_collection["id"]
        offset = 0
        discounted_products = []

        while True:
            result = fetch_products_for_collection(collection_id, limit=limit, offset=offset)
            if not result or "products" not in result or not result["products"]:
                break

            products = result["products"]
            for product in products:
                current_price = float(product.get("price", {}).get("formatted", {}).get("price", "0").replace("$", "").replace("£", "").replace(",", "") or 0.0)
                original_price = float(product.get("discountedPrice", {}).get("formatted", {}).get("price", str(current_price)).replace("$", "").replace("£", "").replace(",", "") or current_price)
                if original_price > current_price:
                    discount = ((original_price - current_price) / original_price) * 100
                    if discount >= min_discount_percent:
                        base_url = product.get("productPageUrl", {}).get("base", "").rstrip("/") + "/" + product.get("productPageUrl", {}).get("path", "").lstrip("/")
                        product_url = f"{base_url}?referer={user_id}"
                        discounted_products.append({
                            "source": user_id,
                            "id": product.get("id", ""),
                            "title": product.get("name", ""),
                            "product_url": product_url,
                            "current_price": current_price,
                            "original_price": original_price,
                            "discount_percent": round(discount, 2),
                            "image_url": product.get("media", {}).get("mainMedia", {}).get("thumbnail", {}).get("url", ""),
                            "qty": int(product.get("stock", {}).get("quantity", 0)) if product.get("stock", {}).get("trackQuantity", False) else -1,
                            "category": matching_collection["name"],
                            "user_id": user_id
                        })
            offset += limit
            if len(products) < limit:
                break

        all_discounted_products.extend(discounted_products)
        print(f"Found {len(discounted_products)} discounted products for user {user_id} in category '{category_title}'")
    return all_discounted_products

def search_amazon_uk_all(browse_node_id):
    config = load_config()
    if not all(config.get("amazon_uk", {}).values()):
        return []
    amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"],
                       config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"])
    asins = []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    try:
        search_params = {"BrowseNodeId": browse_node_id, "ItemCount": 10, "Resources": ["ItemInfo.Title", "Offers.Listings.Price", "Images.Primary.Large", "DetailPageURL"]}
        for page in range(1, 11):
            search_params["ItemPage"] = page
            search_result = amazon.search_items(**search_params)
            if not search_result or not search_result.items:
                break
            for item in search_result.items:
                asins.append(item.asin)
            time.sleep(1)
        return get_amazon_uk_full_details(asins, category=category_title)
    except Exception as e:
        print(f"Amazon UK Search Error: {str(e)}")
        return []

def search_ebay_uk_all(browse_node_id):
    config = load_config()
    if not all(config.get("ebay_uk", {}).values()):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = "https://api.ebay.com/buy/browse/v1/item_summary/search"
    headers = {"Authorization": f"Bearer {config['ebay_uk']['APP_ID']}"}
    params = {"q": category_title, "filter": "condition:NEW,availability:UK", "limit": "10"}
    item_ids = []
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        for item in data.get("itemSummaries", []):
            item_ids.append(item["itemId"])
        return get_ebay_uk_full_details(item_ids, category=category_title)
    except Exception as e:
        print(f"eBay UK Search Error: {str(e)}")
        return []

def search_awin_uk_all(browse_node_id):
    config = load_config()
    if not config.get("awin", {}).get("API_TOKEN"):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = f"https://api.awin.com/publishers/{config['awin']['API_TOKEN']}/products"
    params = {"region": "UK", "search": category_title}
    product_ids = []
    try:
        response = requests.get(url, params=params)
        data = response.json()
        for product in data.get("products", []):
            product_ids.append(product["productId"])
        return get_awin_uk_full_details(product_ids, category=category_title)
    except Exception as e:
        print(f"Awin UK Search Error: {str(e)}")
        return []

def search_cj_uk_all(browse_node_id):
    config = load_config()
    if not all(config.get("cj", {}).values()):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = "https://product-search.api.cj.com/v2/product-search"
    headers = {"Authorization": f"Bearer {config['cj']['API_KEY']}"}
    params = {"website-id": config["cj"]["WEBSITE_ID"], "keywords": category_title, "country": "UK"}
    skus = []
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        for product in data.get("products", []):
            skus.append(product["sku"])
        return get_cj_uk_full_details(skus, category=category_title)
    except Exception as e:
        print(f"CJ UK Search Error: {str(e)}")
        return []

def search_wix_all(browse_node_id):
    users_settings = load_users_settings()
    all_products = []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        print(f"No category title found for browse_node_id {browse_node_id}")
        return []

    for user_id, settings in users_settings.items():
        wix_client_id = settings.get("wixClientId")
        if not wix_client_id:
            print(f"No wixClientId found for user {user_id}")
            continue

        token_url = "https://www.wixapis.com/oauth2/token"
        payload = {"clientId": wix_client_id, "grantType": "anonymous"}
        headers = {"Content-Type": "application/json"}
        try:
            response = requests.post(token_url, json=payload, headers=headers)
            if response.status_code != 200:
                print(f"Error getting token for user {user_id}: {response.status_code} - {response.text}")
                continue
            token_data = response.json()
            access_token = token_data["access_token"]
            print(f"Access Token for user {user_id}: {access_token}")
        except Exception as e:
            print(f"Token fetch error for user {user_id}: {str(e)}")
            continue

        collections_url = "https://www.wixapis.com/stores-reader/v1/collections/query"
        headers = {"Content-Type": "application/json", "Authorization": f"Bearer {access_token}"}

        def fetch_collections(limit=10, offset=0):
            query_payload = {"query": {"paging": {"limit": limit, "offset": offset}}, "includeNumberOfProducts": True}
            response = requests.post(collections_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching collections for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        products_url = "https://www.wixapis.com/stores/v1/products/query"

        def fetch_products_for_collection(collection_id, limit=10, offset=0):
            filter_str = json.dumps({"collections.id": {"$hasSome": [collection_id]}})
            query_payload = {"query": {"filter": filter_str, "paging": {"limit": limit, "offset": offset}}}
            response = requests.post(products_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching products for collection {collection_id} for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        limit = 10
        offset = 0
        matching_collection = None

        while True:
            result = fetch_collections(limit=limit, offset=offset)
            if not result or "collections" not in result or not result["collections"]:
                break

            collections = result["collections"]
            for col in collections:
                if col["name"].lower() == category_title.lower() and not col["id"].startswith("00000000"):
                    matching_collection = col
                    break
            if matching_collection:
                break
            offset += limit
            if len(collections) < limit:
                break

        if not matching_collection:
            print(f"No matching collection found for category '{category_title}' for user {user_id}")
            continue

        collection_id = matching_collection["id"]
        offset = 0
        category_products = []

        while True:
            result = fetch_products_for_collection(collection_id, limit=limit, offset=offset)
            if not result or "products" not in result or not result["products"]:
                break

            products = result["products"]
            for product in products:
                current_price = float(product.get("price", {}).get("formatted", {}).get("price", "0").replace("$", "").replace("£", "").replace(",", "") or 0.0)
                original_price = float(product.get("discountedPrice", {}).get("formatted", {}).get("price", str(current_price)).replace("$", "").replace("£", "").replace(",", "") or current_price)
                discount = ((original_price - current_price) / original_price) * 100 if original_price > current_price else 0.0
                base_url = product.get("productPageUrl", {}).get("base", "").rstrip("/") + "/" + product.get("productPageUrl", {}).get("path", "").lstrip("/")
                product_url = f"{base_url}?referer={user_id}"
                category_products.append({
                    "source": user_id,
                    "id": product.get("id", ""),
                    "title": product.get("name", ""),
                    "product_url": product_url,
                    "current_price": current_price,
                    "original_price": original_price,
                    "discount_percent": round(discount, 2),
                    "image_url": product.get("media", {}).get("mainMedia", {}).get("thumbnail", {}).get("url", ""),
                    "qty": int(product.get("stock", {}).get("quantity", 0)) if product.get("stock", {}).get("trackQuantity", False) else -1,
                    "category": matching_collection["name"],
                    "user_id": user_id
                })
            offset += limit
            if len(products) < limit:
                break

        all_products.extend(category_products)
        print(f"Found {len(category_products)} products for user {user_id} in category '{category_title}'")
    return all_products
# endregion Search

# region Management Endpoints
@app.route('/users', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_users():
    users_settings = load_users_settings()
    user_list = [{"USERid": user_id, "email_address": user["email_address"], "contact_name": user["contact_name"]} 
                 for user_id, user in users_settings.items()]
    return jsonify({"status": "success", "users": user_list}), 200

@app.route('/users/<user_id>', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_user(user_id):
    users_settings = load_users_settings()
    if user_id not in users_settings:
        return jsonify({"status": "error", "message": "User not found"}), 404
    user = users_settings[user_id]
    user_data = {
        "USERid": user_id,
        "email_address": user["email_address"],
        "contact_name": user["contact_name"],
        "permissions": user["permissions"],
        "website_url": user.get("website_url", ""),
        "wixClientId": user.get("wixClientId", ""),
        "referrals": user.get("referrals", {"visits": [], "orders": []})
    }
    return jsonify({"status": "success", "user": user_data}), 200

@app.route('/permissions/<user_id>', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_permissions(user_id):
    users_settings = load_users_settings()
    if user_id not in users_settings:
        return jsonify({"status": "error", "message": "User not found"}), 404
    permissions = users_settings[user_id]['permissions']
    return jsonify({"status": "success", "permissions": permissions}), 200

@app.route('/permissions/<user_id>', methods=['POST'])
@require_permissions(["admin"], require_all=True)
def add_permission(user_id):
    data = request.get_json()
    if 'permission' not in data:
        return jsonify({"status": "error", "message": "Permission field is required"}), 400
    permission = data['permission']
    users_settings = load_users_settings()
    if user_id not in users_settings:
        return jsonify({"status": "error", "message": "User not found"}), 404
    if permission in users_settings[user_id]['permissions']:
        return jsonify({"status": "error", "message": "Permission already exists"}), 400
    users_settings[user_id]['permissions'].append(permission)
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": "Permission added"}), 200

@app.route('/permissions/<user_id>', methods=['DELETE'])
@require_permissions(["admin"], require_all=True)
def remove_permission(user_id):
    data = request.get_json()
    if 'permission' not in data:
        return jsonify({"status": "error", "message": "Permission field is required"}), 400
    permission = data['permission']
    users_settings = load_users_settings()
    if user_id not in users_settings:
        return jsonify({"status": "error", "message": "User not found"}), 404
    if permission not in users_settings[user_id]['permissions']:
        return jsonify({"status": "error", "message": "Permission not found"}), 400
    users_settings[user_id]['permissions'].remove(permission)
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": "Permission removed"}), 200

@app.route('/config', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_config():
    config = load_config()
    return jsonify({"status": "success", "count": len(config), "config": config})

@app.route('/config/<affiliate>', methods=['PATCH'])
@require_permissions(["admin"], require_all=True)
def replace_config(affiliate):
    config = load_config()
    data = request.get_json()
    if not data or not isinstance(data, dict):
        return jsonify({"status": "error", "message": "Request body must contain a dictionary of credentials"}), 400
    config[affiliate] = data
    save_config(config)
    return jsonify({"status": "success", "message": f"Credentials for {affiliate} replaced", "credentials": config[affiliate]})

@app.route('/<USERid>/user', methods=['GET'])
@require_permissions(["self", "admin"], require_all=False)
def get_user_settings_endpoint(USERid):
    try:
        settings = get_user_settings(USERid)
        return jsonify({
            "status": "success",
            "contact_name": settings.get("contact_name", ""),
            "website_url": settings.get("website_url", ""),
            "email_address": settings.get("email_address", ""),
            "phone_number": settings.get("phone_number", ""),
            "wixClientId": settings.get("wixClientId", "")
        })
    except Exception as e:
        print(f"Error in /<USERid>/user GET: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/<USERid>/user', methods=['PUT'])
@require_permissions(["self", "admin"], require_all=False)
def put_user_settings(USERid):
    if not request.json:
        return jsonify({"status": "error", "message": "Request body must contain settings"}), 400
    settings = request.json
    required_fields = ["contact_name", "website_url", "email_address", "phone_number", "wixClientId"]
    if not all(field in settings for field in required_fields):
        return jsonify({"status": "error", "message": "Settings must include all required fields"}), 400
    users_settings = load_users_settings()
    users_settings[USERid] = settings
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": f"Settings for user {USERid} replaced", "settings": settings})

@app.route('/<USERid>/user', methods=['PATCH'])
@require_permissions(["self", "admin", "wixpro"], require_all=False)
def patch_user_settings(USERid):
    if not request.json:
        return jsonify({"status": "error", "message": "Request body must contain settings"}), 400
    new_settings = request.json
    users_settings = load_users_settings()
    current_settings = users_settings.get(USERid, {})
    valid_fields = ["contact_name", "website_url", "email_address", "phone_number", "wixClientId"]
    if "wixpro" in request.permissions and not ("admin" in request.permissions or request.user_id == USERid):
        if any(key not in ["wixClientId"] for key in new_settings.keys()):
            return jsonify({"status": "error", "message": "Wixpro can only update wixClientId"}), 403
    for key in new_settings:
        if key in valid_fields:
            current_settings[key] = new_settings[key]
    users_settings[USERid] = current_settings
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": f"Settings for user {USERid} updated", "settings": current_settings})

@app.route('/<USERid>/mycategories', methods=['GET'])
@require_permissions(["self"], require_all=True)
def get_user_categories_endpoint(USERid):
    try:
        categories = get_user_categories(USERid)
        return jsonify({"status": "success", "count": len(categories), "categories": categories})
    except Exception as e:
        print(f"Error in /<USERid>/mycategories for USERid {USERid}: {str(e)}")
        return jsonify({"status": "error", "message": f"Failed to retrieve categories: {str(e)}"}), 500

@app.route('/<USERid>/mycategories', methods=['PUT'])
@require_permissions(["self"], require_all=True)
def put_user_categories(USERid):
    if not request.json or 'categories' not in request.json:
        return jsonify({"status": "error", "message": "Request body must contain 'categories' list"}), 400
    new_categories = request.json['categories']
    if not isinstance(new_categories, list):
        return jsonify({"status": "error", "message": "'categories' must be a list"}), 400
    users_data = load_users_categories()
    users_data[USERid] = new_categories
    save_users_categories(users_data)
    return jsonify({"status": "success", "message": f"Categories for user {USERid} replaced", "categories": new_categories})

@app.route('/<USERid>/mycategories', methods=['PATCH'])
@require_permissions(["self"], require_all=True)
def patch_user_categories(USERid):
    if not request.json or 'categories' not in request.json:
        return jsonify({"status": "error", "message": "Request body must contain 'categories' list"}), 400
    new_categories = request.json['categories']
    if not isinstance(new_categories, list):
        return jsonify({"status": "error", "message": "'categories' must be a list"}), 400
    users_data = load_users_categories()
    current_categories = set(users_data.get(USERid, []))
    current_categories.update(new_categories)
    users_data[USERid] = list(current_categories)
    save_users_categories(users_data)
    return jsonify({"status": "success", "message": f"Categories for user {USERid} patched", "categories": users_data[USERid]})

@app.route('/<USERid>/mycategories', methods=['DELETE'])
@require_permissions(["self"], require_all=True)
def delete_user_category(USERid):
    category_id = request.args.get('category_id')
    if not category_id:
        return jsonify({"status": "error", "message": "Query parameter 'category_id' is required"}), 400
    users_data = load_users_categories()
    if USERid in users_data and category_id in users_data[USERid]:
        users_data[USERid].remove(category_id)
        save_users_categories(users_data)
        return jsonify({"status": "success", "message": f"Category {category_id} removed for user {USERid}", "categories": users_data[USERid]})
    return jsonify({"status": "error", "message": f"Category {category_id} not found for user {USERid}"}), 404

@app.route('/categories', methods=['GET'])
@require_permissions(["allauth"], require_all=False)
def get_all_categories():
    config = load_config()
    parent_id = request.args.get('parent_id')
    amazon_config = config.get("amazon_uk", {})
    has_valid_amazon_config = all(amazon_config.get(field, "") for field in ["ACCESS_KEY", "SECRET_KEY", "ASSOCIATE_TAG", "COUNTRY"])
    if has_valid_amazon_config and parent_id:
        categories = get_immediate_subcategories(parent_id)
    elif not parent_id:
        categories = [{"id": cat["id"], "name": cat["name"]} for cat in PSEUDO_CATEGORIES]
    else:
        categories = find_pseudo_subcategories(parent_id, PSEUDO_CATEGORIES)
    return jsonify({"status": "success", "count": len(categories), "categories": categories})

@app.route('/<USERid>/products', methods=['GET'])
@require_permissions(["self"], require_all=True)
def get_user_product_list(USERid):
    products = get_user_products(USERid)
    return jsonify({"status": "success", "count": len(products), "products": products})

@app.route('/<USERid>/products/<product_id>', methods=['GET'])
@require_permissions(["self"], require_all=True)
def reduce_product_quantity(USERid, product_id):
    qty = request.args.get('qty', type=int)
    if qty is None or qty >= 0:
        return jsonify({"status": "error", "message": "Query parameter 'qty' must be a negative integer"}), 400
    users_products = load_users_products()
    if USERid not in users_products:
        return jsonify({"status": "error", "message": f"User {USERid} not found"}), 404
    current_products = users_products[USERid]
    product_to_update = next((p for p in current_products if p["id"] == product_id), None)
    if not product_to_update:
        return jsonify({"status": "error", "message": f"Product {product_id} not found for user {USERid}"}), 404
    current_qty = product_to_update["qty"]
    if current_qty != -1:
        product_to_update["qty"] = max(0, current_qty + qty)
    users_products[USERid] = current_products
    save_users_products(users_products)
    return jsonify({"status": "success", "message": f"Quantity reduced for product {product_id}", "product": product_to_update})

@app.route('/discounted-products', methods=['GET'])
def get_all_discounted_products():
    category_id = request.args.get('category_id')
    if not category_id:
        return jsonify({"status": "error", "message": "Query parameter 'category_id' is required"}), 400
    all_items = []
    config = load_config()
    search_categories = [category_id]
    for cat_id in search_categories:
        if all(config.get("amazon_uk", {}).values()):
            all_items.extend(search_amazon_uk_all(cat_id))
        if all(config.get("ebay_uk", {}).values()):
            all_items.extend(search_ebay_uk_all(cat_id))
        if config.get("awin", {}).get("API_TOKEN"):
            all_items.extend(search_awin_uk_all(cat_id))
        if all(config.get("cj", {}).values()):
            all_items.extend(search_cj_uk_all(cat_id))
        all_items.extend(search_wix_all(cat_id))
    return jsonify({"status": "success", "count": len(all_items), "products": all_items})

@app.route('/referal', methods=['POST'])
def handle_referral():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
        users_settings = load_users_settings()
        referer = data.get("referer", "none")
        timestamp = data.get("timestamp")
        if not timestamp:
            return jsonify({"status": "error", "message": "Timestamp is required"}), 400
        if referer not in users_settings:
            users_settings[referer] = {
                "contact_name": "",
                "website_url": "",
                "email_address": "",
                "phone_number": "",
                "wixClientId": "",
                "referrals": {"visits": [], "orders": []}
            }
        elif "referrals" not in users_settings[referer]:
            users_settings[referer]["referrals"] = {"visits": [], "orders": []}
        if "page" in data:
            referral_data = {"page": data["page"], "timestamp": timestamp}
            users_settings[referer]["referrals"]["visits"].append(referral_data)
            print(f"Stored page visit for referer {referer}: {referral_data}")
        elif "orderId" in data:
            referral_data = {"orderId": data["orderId"], "buyer": data["buyer"], "total": data["total"], "timestamp": timestamp}
            users_settings[referer]["referrals"]["orders"].append(referral_data)
            print(f"Stored order for referer {referer}: {referral_data}")
        else:
            return jsonify({"status": "error", "message": "Invalid referral data format"}), 400
        save_users_settings(users_settings)
        return jsonify({"status": "success", "message": "Referral data recorded", "referer": referer, "timestamp": timestamp})
    except Exception as e:
        print(f"Error in referral endpoint: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@app.route('/update-password', methods=['POST'])
@require_permissions(["allauth"], require_all=False)
def update_password():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
        email = data.get("email", "").strip()
        new_password = data.get("password", "").strip()
        if not email or not new_password:
            return jsonify({"status": "error", "message": "Email and password are required"}), 400
        users_settings = load_users_settings()
        matching_user_id = None
        for user_id, settings in users_settings.items():
            stored_email = settings.get("email_address", "").strip()
            if stored_email and stored_email.lower() == email.lower():
                matching_user_id = user_id
                break
        if not matching_user_id or matching_user_id != request.user_id:
            return jsonify({"status": "error", "message": f"Unauthorized: Can only update own password"}), 403
        hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt())
        users_settings[matching_user_id]["password"] = hashed_password.decode('utf-8')
        save_users_settings(users_settings)
        return jsonify({"status": "success", "message": f"Password updated for user with email '{email}'", "user_id": matching_user_id}), 200
    except Exception as e:
        print(f"Error in update-password endpoint: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@app.route('/reset-password', methods=['POST'])
def reset_password():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
        email = data.get("email")
        if not email:
            return jsonify({"status": "error", "message": "Email is required"}), 400
        users_settings = load_users_settings()
        matching_user_id = None
        for user_id, settings in users_settings.items():
            if settings.get("email_address", "").lower() == email.lower():
                matching_user_id = user_id
                break
        if not matching_user_id:
            return jsonify({"status": "error", "message": "Email not found"}), 404
        user = users_settings[matching_user_id]
        phone_number = user.get("phone_number", "").strip()
        if not phone_number:
            return jsonify({"status": "error", "message": "No phone number associated with this account"}), 400
        otp = ''.join(random.choices(string.digits, k=6))
        reset_expiry = datetime.datetime.utcnow() + datetime.timedelta(minutes=15)
        if "reset_codes" not in app.config:
            app.config["reset_codes"] = {}
        app.config["reset_codes"][matching_user_id] = {"code": otp, "expires": reset_expiry.isoformat()}
        config = load_config()
        textmagic_config = config.get("textmagic", {})
        username = textmagic_config.get("USERNAME")
        api_key = textmagic_config.get("API_KEY")
        if not username or not api_key:
            return jsonify({"status": "error", "message": "TextMagic credentials not configured"}), 500
        url = "https://rest.textmagic.com/api/v2/messages"
        payload = {"text": f"clubmadiera.io sent you a one-time password: {otp}. It expires in 15mins.", "phones": phone_number}
        headers = {"X-TM-Username": username, "X-TM-Key": api_key, "Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(url, data=payload, headers=headers)
        if response.status_code == 201:
            return jsonify({"status": "success", "message": "A one-time password has been sent to your phone"}), 200
        else:
            return jsonify({"status": "error", "message": f"Failed to send SMS: {response.text}"}), 500
    except Exception as e:
        print(f"Error in reset-password endpoint: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@app.route('/verify-reset-code', methods=['POST'])
def verify_reset_code():
    try:
        data = request.get_json(silent=True)
        if not data or not isinstance(data, dict):
            return jsonify({"status": "error", "message": "Invalid or missing JSON data"}), 400
        email = data.get("email")
        code = data.get("code")
        new_password = data.get("new_password")
        if not all([email, code, new_password]):
            return jsonify({"status": "error", "message": "Email, code, and new password are required"}), 400
        users_settings = load_users_settings()
        matching_user_id = None
        for user_id, settings in users_settings.items():
            if settings.get("email_address", "").lower() == email.lower():
                matching_user_id = user_id
                break
        if not matching_user_id:
            return jsonify({"status": "error", "message": "Email not found"}), 404
        stored_reset = app.config.get("reset_codes", {}).get(matching_user_id, {})
        stored_code = stored_reset.get("code")
        if not stored_code:
            return jsonify({"status": "error", "message": "No reset code found for this user"}), 400
        try:
            expiry = datetime.datetime.fromisoformat(stored_reset.get("expires", "2000-01-01T00:00:00"))
        except (ValueError, TypeError) as e:
            print(f"Error parsing expiry: {str(e)}")
            return jsonify({"status": "error", "message": "Invalid reset code expiry format"}), 500
        if stored_code != code or datetime.datetime.utcnow() > expiry:
            return jsonify({"status": "error", "message": "Invalid or expired reset code"}), 400
        hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        users_settings[matching_user_id]["password"] = hashed_password
        save_users_settings(users_settings)
        if matching_user_id in app.config.get("reset_codes", {}):
            del app.config["reset_codes"][matching_user_id]
        return jsonify({"status": "success", "message": "Password updated successfully"}), 200
    except Exception as e:
        print(f"Unexpected error in verify-reset-code endpoint: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@app.route('/<USERid>/visits', methods=['GET'])
@require_permissions(["self", "admin"], require_all=False)
def get_user_visits(USERid):
    try:
        users_settings = load_users_settings()
        if USERid not in users_settings:
            return jsonify({"status": "error", "message": f"User {USERid} not found"}), 404
        referrals = users_settings[USERid].get("referrals", {})
        visits = referrals.get("visits", [])
        return jsonify({"status": "success", "count": len(visits), "visits": visits})
    except Exception as e:
        print(f"Error in /<USERid>/visits GET: {str(e)}")
        return jsonify({"status": "error", "message": f"Failed to retrieve visits: {str(e)}"}), 500

@app.route('/<USERid>/orders', methods=['GET'])
@require_permissions(["self", "admin"], require_all=False)
def get_user_orders(USERid):
    try:
        users_settings = load_users_settings()
        if USERid not in users_settings:
            return jsonify({"status": "error", "message": f"User {USERid} not found"}), 404
        referrals = users_settings[USERid].get("referrals", {})
        orders = referrals.get("orders", [])
        return jsonify({"status": "success", "count": len(orders), "orders": orders})
    except Exception as e:
        print(f"Error in /<USERid>/orders GET: {str(e)}")
        return jsonify({"status": "error", "message": f"Failed to retrieve orders: {str(e)}"}), 500
# endregion Management Endpoints

# region Logged in Endpoints
@app.route('/admin', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def admin():
    return render_template('admin.html')

@app.route('/community', methods=['GET'])
@require_permissions(["community", "admin"], require_all=False)
def community():
    return render_template('community.html')

@app.route('/merchant', methods=['GET'])
@require_permissions(["merchant", "admin"], require_all=False)
def merchant():
    return render_template('merchant.html')

@app.route('/partner', methods=['GET'])
@require_permissions(["wixpro", "admin"], require_all=False)
def wixpro():
    return render_template('partner.html')

@app.route('/<user_id>/siterequest', methods=['POST'])
@require_permissions(["admin", "merchant", "community"], require_all=False)
def save_site_request_endpoint(user_id):
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
        body_user_id = data.get("userId")
        if body_user_id and body_user_id != user_id:
            return jsonify({"status": "error", "message": "User ID in body does not match URL"}), 400
        if not user_id or request.user_id != user_id:
            return jsonify({"status": "error", "message": "Unauthorized: Must match user_id"}), 403
        request_type = data.get("type", "community")
        site_request = {
            "user_id": user_id,
            "type": request_type,
            "communityName": data.get("communityName") or data.get("storeName") or "",
            "aboutCommunity": data.get("aboutCommunity") or data.get("aboutStore") or "",
            "communityLogos": data.get("communityLogos") or data.get("storeLogos") or [],
            "colorPrefs": data.get("colorPrefs", ""),
            "stylingDetails": data.get("stylingDetails", ""),
            "preferredDomain": data.get("preferredDomain", "mycommunity.org"),
            "emails": data.get("emails", []),
            "pages": data.get("pages", []),
            "widgets": data.get("widgets", []),
            "submitted_at": datetime.datetime.utcnow().isoformat()
        }
        if not site_request["communityName"]:
            return jsonify({"status": "error", "message": "Community name or store name is required"}), 400
        domain_regex = r'^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$'
        if not re.match(domain_regex, site_request["preferredDomain"]):
            return jsonify({"status": "error", "message": "Invalid domain name"}), 400
        for page in site_request["pages"]:
            if "images" in page and page["images"]:
                page["images"] = [img if isinstance(img, str) else "placeholder" for img in page["images"]]
        save_site_request(user_id, site_request)
        return jsonify({"status": "success", "message": "Site request saved successfully"}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

# ... (Previous code remains unchanged up to the end of the last section) ...

@app.route('/siterequests', methods=['GET'])
@require_permissions(["admin", "wixpro"], require_all=False)
def list_site_requests():
    try:
        siterequest_dir = 'siterequest'
        logger.debug(f"Looking in directory: {os.path.abspath(siterequest_dir)}")
        if not os.path.exists(siterequest_dir):
            logger.debug("Directory does not exist")
            return jsonify({"status": "success", "siterequests": []}), 200
        users_settings = load_users_settings()
        siterequests = []
        files = os.listdir(siterequest_dir)
        logger.debug(f"Found files: {files}")
        for filename in files:
            user_id = filename.replace('.json', '')
            logger.debug(f"Processing user_id: {user_id}")
            site_request = load_site_request(user_id)
            if not site_request:
                logger.debug(f"No data loaded for {user_id}")
                continue
            contact_name = users_settings.get(user_id, {}).get('contact_name', '')
            email = users_settings.get(user_id, {}).get('email_address', '')
            request_type = site_request.get('type', '')
            store_name = site_request.get('storeName')
            community_name = site_request.get('communityName')
            organisation = store_name if store_name else community_name if community_name else ''
            received_at = site_request.get('submitted_at', '')
            siterequests.append({
                'user_id': user_id,
                'type': request_type,
                'received_at': received_at,
                'contact_name': contact_name,
                'email': email,
                'organisation': organisation
            })
            logger.debug(f"Added request for {user_id}")
        logger.debug(f"Total requests found: {len(siterequests)}")
        siterequests.sort(key=lambda x: x['received_at'] or '', reverse=True)
        return jsonify({"status": "success", "siterequests": siterequests}), 200
    except Exception as e:
        logger.error(f"Error in list_site_requests: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@app.route('/render-md/<path:full_path>', methods=['GET'])
@require_permissions(["allauth"], require_all=False)
def render_md(full_path):
    """
    Render Markdown files from the static folder or GitHub based on the URL path.
    Returns an HTML response using templates from static/error/<status_code>.md.
    """
    try:
        # Parse the full_path, removing trailing slashes
        segments = full_path.rstrip('/').split('/')
        if not segments or segments == ['']:
            raise ValueError("Invalid path provided")

        # Determine source: static folder or GitHub
        if segments[0] == 'static':
            # Handle static file
            if len(segments) < 2:
                raise ValueError("No file path provided after 'static'")
            file_path = '/'.join(segments[1:])
            if not file_path.endswith('.md'):
                raise ValueError("Only .md files are supported")
            static_file = os.path.join(app.static_folder, file_path)
            if not os.path.isfile(static_file):
                raise FileNotFoundError("File not found in static folder")
            with open(static_file, 'r', encoding='utf-8') as f:
                md_content = f.read()
        else:
            # Handle GitHub file
            if len(segments) < 4:
                raise ValueError("Invalid GitHub path: Must provide owner/repo/branch/path")
            owner, repo, branch, *path_segments = segments
            path = '/'.join(path_segments)
            if not path.endswith('.md'):
                raise ValueError("Only .md files are supported")
            url = f"https://raw.githubusercontent.com/{owner}/{repo}/{branch}/{path}"
            response = requests.get(url)
            if response.status_code != 200:
                raise FileNotFoundError("File not found on GitHub")
            md_content = response.text

        # Convert Markdown to HTML with table support
        html_content = markdown.markdown(md_content, extensions=['tables'])
        status_code = 200

    except ValueError as e:
        # Invalid paths or file types result in 404
        status_code = 404
        error_message = str(e)
    except FileNotFoundError as e:
        # File not found results in 404
        status_code = 404
        error_message = str(e)
    except requests.RequestException as e:
        # Network issues with GitHub result in 500
        status_code = 500
        error_message = "Failed to fetch from GitHub"
    except Exception as e:
        # Unexpected errors result in 500
        status_code = 500
        error_message = "An unexpected error occurred"
        logger.error(f"Error: {e}", exc_info=True)

    # Load the corresponding template
    template_path = os.path.join(app.static_folder, 'error', f'{status_code}.md')
    with open(template_path, 'r', encoding='utf-8') as f:
        template = f.read()

    # Replace the appropriate placeholder
    if status_code == 200:
        final_html = template.replace('{content}', html_content)
    else:
        final_html = template.replace('{error_message}', error_message)

    # Create and return the response
    response = make_response(final_html, status_code)
    response.headers['Content-Type'] = 'text/html'
    return response

@app.route('/check-domain', methods=['GET'])
@require_permissions(["allauth"], require_all=False)  # Custom decorator applied
def check_domain():
    # Get domain from query parameter
    domain = request.args.get('domain')
    
    # Basic validation (matches client-side regex: /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/)
    if not domain:
        return jsonify({"error": "Please provide a domain name"}), 400
    
    if not all(c.isalnum() or c in '-.' for c in domain) or \
       not '.' in domain or \
       len(domain.split('.')[-1]) < 2:
        return jsonify({"error": "Invalid domain name (e.g., mystore.uk)"}), 400
    
    # Query WHOIS data using python-whois
    try:
        w = whois.whois(domain)
        # If no registration data exists (e.g., creation_date is None), domain is available
        is_available = w.creation_date is None
        return jsonify({
            "domain": domain,
            "available": is_available
        }), 200
    except Exception as e:
        # Handle WHOIS query failures (e.g., timeouts, invalid TLDs)
        return jsonify({"error": f"Failed to check domain availability: {str(e)}"}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
    
# endregion Logged in Endpoints

# region Public Endpoints
@app.route('/', methods=['GET'])
def home():
    return render_template('login.html')

@app.route('/branding', methods=['GET'])
def branding():
    try:
        root_dir = os.path.dirname(os.path.abspath(__file__))
        json_path = os.path.join(root_dir, 'branding.json')
        with open(json_path, 'r') as f:
            branding_data = json.load(f)
        return jsonify(branding_data)
    except FileNotFoundError:
        return jsonify({'content': '<h1>Branding content not found</h1>'}), 500
    except Exception as e:
        return jsonify({'content': f'Internal Server Error: {str(e)}'}), 500

@app.route('/login', methods=['POST'])
def login():
    """
    Authenticate a user and return a JWT token with their permissions.
    Expects JSON payload with 'email' and 'password'.
    Returns user details, token, and redirect URL based on permissions.
    """
    try:
        # Parse incoming JSON data
        data = request.get_json(silent=True)
        if not data or not isinstance(data, dict):
            return jsonify({"status": "error", "message": "Invalid or missing JSON data"}), 400

        # Extract and validate required fields
        email = data.get("email", "").strip().lower()
        password = data.get("password", "").strip()
        if not email or not password:
            return jsonify({"status": "error", "message": "Email and password are required"}), 400

        # Load user settings
        users_settings = load_users_settings()
        if not users_settings:
            return jsonify({"status": "error", "message": "No users registered in the system"}), 500

        # Find user by email and verify password
        matching_user_id = None
        for user_id, settings in users_settings.items():
            stored_email = settings.get("email_address", "").strip().lower()
            stored_password = settings.get("password", "")
            if stored_email == email:
                # Ensure stored password is bytes for bcrypt
                if isinstance(stored_password, str):
                    stored_password = stored_password.encode('utf-8')
                if bcrypt.checkpw(password.encode('utf-8'), stored_password):
                    matching_user_id = user_id
                    break

        # Check if authentication succeeded
        if not matching_user_id:
            return jsonify({"status": "error", "message": "Invalid email or password"}), 401

        # Get user permissions and details
        user_data = users_settings[matching_user_id]
        permissions = user_data.get("permissions", [])
        contact_name = user_data.get("contact_name", "User")

        # Determine redirect URL based on highest-priority permission
        redirect_url = None
        if "admin" in permissions:
            redirect_url = url_for('admin')
        elif "merchant" in permissions:
            redirect_url = url_for('merchant')
        elif "community" in permissions:
            redirect_url = url_for('community')
        elif "wixpro" in permissions:
            redirect_url = url_for('wixpro')

        # Generate JWT token
        token_payload = {
            "userId": matching_user_id,
            "permissions": permissions,
            "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=1),  # Token expires in 1 hour
            "iat": datetime.datetime.utcnow()  # Issued at time
        }
        token = jwt.encode(token_payload, app.config['JWT_SECRET_KEY'], algorithm="HS256")

        # Prepare response
        response_data = {
            "status": "success",
            "message": "Login successful",
            "token": token,
            "userId": matching_user_id,
            "contact_name": contact_name
        }
        if redirect_url:
            response_data["redirect_url"] = redirect_url

        return jsonify(response_data), 200

    except Exception as e:
        # Log the error for debugging (assuming logging is set up)
        logger.error(f"Login error: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error during login: {str(e)}"}), 500

@app.route('/signup', methods=['GET'])
def signup_page():
    return render_template('signup.html')

@app.route('/signup', methods=['POST'])
def signup():
    data = request.get_json()
    required_fields = ['signup_type', 'contact_name', 'signup_email', 'signup_password']
    if not all(field in data for field in required_fields):
        return jsonify({"status": "error", "message": "All fields are required"}), 400
    users_settings = load_users_settings()
    if any(user['email_address'] == data['signup_email'] for user in users_settings.values()):
        return jsonify({"status": "error", "message": "Email already exists"}), 400
    while True:
        USERid = generate_code()
        if USERid not in users_settings:
            break
    hashed_password = bcrypt.hashpw(data['signup_password'].encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    users_settings[USERid] = {
        "email_address": data['signup_email'],
        "password": hashed_password,
        "contact_name": data['contact_name'],
        "permissions": [data['signup_type']],
        "user_categories": [data['signup_type']],
        "website_url": "",
        "wixClientId": "",
        "referrals": {"visits": [], "orders": []}
    }
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": "Signup successful"}), 201
# endregion Public Endpoints

# region Velocify Public Endpoints
@app.route('/<USERid>/discounted-products', methods=['GET'])
def get_user_discounted_products(USERid):
    category_id = request.args.get('category_id')
    min_discount = request.args.get('min_discount', default=20, type=int)
    root_category_ids = get_user_categories(USERid)
    all_discounted_items = []
    config = load_config()
    search_categories = [category_id] if category_id else root_category_ids
    for cat_id in search_categories:
        if all(config.get("amazon_uk", {}).values()):
            all_discounted_items.extend(search_amazon_uk_discounted(cat_id, min_discount))
        if all(config.get("ebay_uk", {}).values()):
            all_discounted_items.extend(search_ebay_uk_discounted(cat_id, min_discount))
        if config.get("awin", {}).get("API_TOKEN"):
            all_discounted_items.extend(search_awin_uk_discounted(cat_id, min_discount))
        if all(config.get("cj", {}).values()):
            all_discounted_items.extend(search_cj_uk_discounted(cat_id, min_discount))
        all_discounted_items.extend(search_wix_discounted(cat_id, min_discount))
    return jsonify({"status": "success", "count": len(all_discounted_items), "products": all_discounted_items, "min_discount": min_discount})

@app.route('/<USERid>/categories', methods=['GET'])
def get_categories(USERid):
    parent_id = request.args.get('parent_id')
    min_discount = request.args.get('min_discount', default=20, type=int)
    all_categories = []
    root_category_ids = get_user_categories(USERid)
    try:
        if parent_id:
            subcategories = get_immediate_subcategories(parent_id)
            if subcategories:
                subcategory_ids = [cat["id"] for cat in subcategories]
                all_categories = filter_categories_with_products(subcategory_ids, min_discount)
        else:
            all_categories = filter_categories_with_products(root_category_ids, min_discount)
        return jsonify({"status": "success", "count": len(all_categories), "categories": all_categories, "min_discount": min_discount}) if all_categories else \
               jsonify({"status": "success", "count": 0, "categories": [], "message": f"No categories with products at {min_discount}% discount found."})
    except Exception as e:
        return jsonify({"status": "error", "message": f"Error fetching categories: {str(e)}"}), 500
# endregion Velocify Public Endpoints

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
static/old/merchant copy.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Merchant</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <script src="https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 0; 
            display: flex; 
            flex-direction: column; /* Stack children vertically */
            min-height: 100vh; /* Ensure body takes full height */
        }
        .header { 
            height: 150px; 
            width: 100%; /* Full width */
            background-color: #f4f4f4; 
            margin-bottom: 25px; 
            overflow: hidden; 
            flex-shrink: 0; /* Prevent header from shrinking */
        }
        .header-content { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .main-container { 
            max-width: 1200px; 
            margin: 0 auto; 
            display: flex; 
            flex-direction: row; /* Menu and content side by side */
            gap: 20px; 
            padding: 20px; 
            flex-grow: 1; /* Allow main content to take remaining space */
        }
        .menu-container { 
            flex: 1; 
            max-width: 300px; 
        }
        .content-container { 
            flex: 2; 
        }
        .menu { 
            margin-bottom: 20px; 
            text-align: left; 
        }
        .menu button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 14px; 
            text-align: left; 
            width: 100%; 
            margin-bottom: 5px; 
            display: block; 
        }
        .menu button:hover { 
            background-color: #0056b3; 
        }
        .menu .btn-logoff { 
            background-color: #dc3545; 
        }
        .menu .btn-logoff:hover { 
            background-color: #c82333; 
        }
        .section { 
            display: none; 
        }
        .section.active { 
            display: block; 
        }
        .settings-form { 
            display: flex; 
            flex-direction: column; 
            gap: 10px; 
            max-width: 400px; 
        }
        .settings-form label { 
            font-weight: bold; 
        }
        .settings-form input, .settings-form textarea { 
            padding: 5px; 
            width: 100%; 
            box-sizing: border-box; 
        }
        .settings-form button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            cursor: pointer; 
        }
        .settings-form button:hover { 
            background-color: #0056b3; 
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
        }
        th, td { 
            border: 1px solid #ddd; 
            padding: 8px; 
            text-align: left; 
        }
        .hidden { 
            display: none; 
        }
        #toast-container > .toast-error { 
            background-color: #dc3545; 
            border-color: #c82333; 
        }
        #toast-container > .toast-success { 
            background-color: #28a745; 
            border-color: #218838; 
        }
        .password-container { 
            position: relative; 
            display: flex; 
            justify-content: flex-end; 
            align-items: center; 
            margin-bottom: 10px; 
        }
        .password-container input { 
            width: 50%; 
            padding-right: 30px; 
        }
        .password-toggle { 
            position: absolute; 
            right: 5px; 
            top: 50%; 
            transform: translateY(-50%); 
            cursor: pointer; 
        }
        #my-store .settings-form { 
            max-width: 600px; 
        }
        .page-section, .email-section { 
            margin-top: 10px; 
            padding: 10px; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
        }
        .remove-page-btn, .remove-email-btn { 
            padding: 5px 10px; 
            background-color: #dc3545; 
            color: white; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            margin-top: 10px; 
        }
        .remove-page-btn:hover, .remove-email-btn:hover { 
            background-color: #c82333; 
        }
        .widget-checkboxes div { 
            margin-bottom: 10px; 
        }
        #my-store .email-section input[type="text"] { 
            width: 50%; 
        }
        #my-store .widget-checkboxes input[type="checkbox"] { 
            width: 10px; 
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content" id="brandingContent">
            <!-- Branding content will be loaded here -->
        </div>
    </div>
    <div class="main-container">
        <div class="menu-container">
            <div class="menu" id="menu">
                <input type="text" id="userId" style="display: none;">
                <button data-section="my-products">My Products</button>
                <button data-section="my-store">My Store</button>
                <button data-section="wix-keys">Wix Keys</button>
                <button data-section="my-account">My Account</button>
                <button data-href="/admin" class="btn-logoff">Back to Admin</button>
                <button id="logOffBtn" class="btn-logoff">Log Off</button>
            </div>
        </div>
        <div class="content-container">
            <div id="info" class="section">
                <h2>Welcome to Your Merchant Dashboard</h2>
                <p>This dashboard allows you to link the parts on your Wix site to a network of community groups, who show relevant discounted products on their websites from clubmadeira.io.</p>
            </div>
            <div id="my-account" class="section">
                <h2>My Account</h2>
                <div class="settings-form">
                    <label for="contactName">Contact Name:</label>
                    <input type="text" id="contactName" placeholder="Enter contact name">
                    <label for="websiteUrl">Website URL:</label>
                    <input type="url" id="websiteUrl" placeholder="Enter website URL">
                    <label for="emailAddress">Email Address:</label>
                    <input type="email" id="emailAddress" placeholder="Enter email address">
                    <label for="phoneNumber">Phone Number:</label>
                    <input type="tel" id="phoneNumber" placeholder="Enter phone number">
                    <button data-action="saveSettings">Save Settings</button>
                    <h3>Change Password</h3>
                    <div class="password-container">
                        <label for="currentPassword">Current Password:</label>
                        <input type="password" id="currentPassword" placeholder="Enter current password">
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('currentPassword')"></i>
                    </div>
                    <div class="password-container">
                        <label for="newPassword">New Password:</label>
                        <input type="password" id="newPassword" placeholder="Enter new password">
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('newPassword')"></i>
                    </div>
                    <div class="password-container">
                        <label for="confirmPassword">Confirm New Password:</label>
                        <input type="password" id="confirmPassword" placeholder="Confirm new password">
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('confirmPassword')"></i>
                    </div>
                    <button data-action="savePassword">Change Password</button>
                </div>
            </div>
            <div id="my-products" class="section">
                <h2>My Products</h2>
                <p>These are the products from your parts feed.</p>
                <table id="productTable">
                    <thead>
                        <tr><th class="hidden">ID</th><th>Category</th><th>Title</th><th>URL</th><th>Price</th><th>Original</th><th>Image</th><th>QTY</th></tr>
                    </thead>
                    <tbody id="productList"></tbody>
                </table>
            </div>
            <div id="wix-keys" class="section">
                <h2>Wix Keys</h2>
                <p>Your Wix Client ID is used to integrate your merchant account with Wix services. Ensure it matches the key provided in your Wix developer dashboard.</p>
                <div class="settings-form">
                    <label for="wixClientId">Wix Client ID:</label>
                    <input type="text" id="wixClientId" placeholder="Enter Wix Client ID">
                    <button data-action="saveWixClientId">Save Wix Client ID</button>
                </div>
            </div>
            <div id="my-store" class="section">
                <h2>My Store</h2>
                <p>Request a custom Wix store to sell your products online. Provide details below to set up your store (minimum: Home and Returns Policy pages).</p>
                <form id="storeRequestForm" class="settings-form">
                    <label for="storeName">Store Name:</label>
                    <input type="text" id="storeName" name="storeName" placeholder="Enter your store name" required>

                    <label for="aboutStore">About Your Store:</label>
                    <textarea id="aboutStore" name="aboutStore" placeholder="Describe your store (e.g., product focus, target audience)"></textarea>

                    <label for="storeLogos">Store Logos:</label>
                    <input type="file" id="storeLogos" name="storeLogos" accept="image/*" multiple>
                    <small>Upload up to 5 logos (e.g., main logo, favicon).</small>

                    <label for="colorPrefs">Color Preferences:</label>
                    <input type="text" id="colorPrefs" name="colorPrefs" placeholder="e.g., #FF5733, Blue">

                    <label for="stylingDetails">Styling Details:</label>
                    <textarea id="stylingDetails" name="stylingDetails" rows="4" placeholder="e.g., sleek design, minimalistic"></textarea>

                    <label for="preferredDomain">Preferred Domain Name:</label>
                    <input type="text" id="preferredDomain" name="preferredDomain" placeholder="e.g., mystore.uk" oninput="updateDomainPreview()">
                    <button type="button" data-action="checkDomainAvailability">Check Availability</button>
                    <span id="domainPreview">@mystore.uk</span>

                    <label>Email Addresses to Set Up (up to 5):</label>
                    <div id="emailsContainer">
                        <div class="email-section" data-email="1">
                            <label for="email1Name">Email Name:</label>
                            <input type="text" id="email1Name" name="email1Name" placeholder="e.g., info">
                            <span id="email1Domain">@mystore.uk</span>
                        </div>
                    </div>
                    <button type="button" data-action="addEmail">Add Another Email</button>

                    <label>Required Pages:</label>
                    <div id="pagesContainer">
                        <div class="page-section" data-page="1">
                            <label for="page1Name">Page Name:</label>
                            <input type="text" id="page1Name" name="page1Name" value="Home" readonly>
                            <br><br>
                            <label for="page1Content">Home Page Content:</label>
                            <textarea id="page1Content" name="page1Content" placeholder="Describe your home page (e.g., welcome message, featured products)"></textarea>
                            <label for="page1Images">Additional Images:</label>
                            <input type="file" id="page1Images" name="page1Images" accept="image/*" multiple>
                        </div>
                        <div class="page-section" data-page="2">
                            <label for="page2Name">Page Name:</label>
                            <input type="text" id="page2Name" name="page2Name" value="Returns Policy" readonly>
                            <br><br>
                            <label for="page2Content">Returns Policy Content:</label>
                            <textarea id="page2Content" name="page2Content" placeholder="Outline your returns policy"></textarea>
                            <label for="page2Images">Additional Images:</label>
                            <input type="file" id="page2Images" name="page2Images" accept="image/*" multiple>
                        </div>
                    </div>
                    <button type="button" data-action="addPage">Add Another Page</button>

                    <label>Wix Store Widgets:</label>
                    <div class="widget-checkboxes">
                        <div><label><input type="checkbox" name="widgets" value="productCatalog"> Product Catalog</label> - Display your products.</div>
                        <div><label><input type="checkbox" name="widgets" value="checkout"> Checkout</label> - Enable direct purchases.</div>
                        <div><label><input type="checkbox" name="widgets" value="cart"> Shopping Cart</label> - Add a cart for customers.</div>
                        <div><label><input type="checkbox" name="widgets" value="promotions"> Promotions</label> - Highlight sales and discounts.</div>
                        <div><label><input type="checkbox" name="widgets" value="contactForm"> Contact Form</label> - Customer inquiries.</div>
                    </div>

                    <button type="button" data-action="saveStoreRequest">Submit Request</button>
                </form>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        const apiUrl = 'https://clubmadeira.io';
        let userPermissions = [];
        let pageCount = 2; // Start with Home and Returns Policy
        let emailCount = 1; // Start with one email

        function decodeJWT(token) {
            if (!token || typeof token !== 'string') {
                console.error('Invalid token');
                return null;
            }
            if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
                console.error('Invalid token format');
                return null;
            }
            const parts = token.split('.');
            try {
                const base64Url = parts[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                return JSON.parse(jsonPayload);
            } catch (error) {
                console.error('Error decoding JWT:', error.message);
                return null;
            }
        }

        function initializeMerchant() {
            console.log('Initializing merchant page');
            const token = localStorage.getItem('authToken');
            const userId = localStorage.getItem('userId');
            if (!token) {
                console.error('No token found, redirecting to /');
                window.location.href = '/';
                return;
            }
            const decoded = decodeJWT(token);
            if (!decoded) {
                console.error('Invalid token, redirecting to /');
                window.location.href = '/';
                return;
            }
            userPermissions = decoded.permissions || [];
            if (!userPermissions.includes('merchant') && !userPermissions.includes('admin')) {
                toastr.error('Permission denied: Merchant or Admin permission required');
                window.location.href = '/';
                return;
            }
            if (userId) document.getElementById('userId').value = userId;
            checkAdminPermission();
            loadBranding();
            showSection('info');
            attachEventListeners();
            waitForTinyMCE(initializeTinyMCE);
        }

        toastr.options = { closeButton: true, progressBar: true, positionClass: 'toast-top-right', timeOut: 5000, showMethod: 'slideDown', hideMethod: 'slideUp' };

        async function fetchProtectedPage(url) {
            const token = localStorage.getItem('authToken');
            if (!token) {
                toastr.error('No authentication token found. Please log in.');
                window.location.href = '/';
                return;
            }
            try {
                const response = await fetch(`${apiUrl}${url}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'text/html'
                    }
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Server returned ${response.status}: ${errorText}`);
                }
                const html = await response.text();
                document.body.innerHTML = html;

                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const scripts = doc.querySelectorAll('script[src]');
                const scriptPromises = [];

                for (const script of scripts) {
                    const newScript = document.createElement('script');
                    newScript.src = script.src;
                    newScript.async = false;
                    document.head.appendChild(newScript);
                    scriptPromises.push(new Promise(resolve => {
                        newScript.onload = resolve;
                        newScript.onerror = () => {
                            console.error(`Failed to load script: ${script.src}`);
                            resolve();
                        };
                    }));
                }

                await Promise.all(scriptPromises);

                doc.querySelectorAll('script:not([src])').forEach(script => {
                    if (script.innerHTML.trim()) {
                        try {
                            const scriptFn = new Function(script.innerHTML);
                            scriptFn();
                        } catch (e) {
                            console.error('Error executing inline script:', e);
                        }
                    }
                });

                attachEventListeners();
                waitForTinyMCE(initializeTinyMCE);
            } catch (error) {
                toastr.error(error.message || 'Failed to load protected page');
                window.location.href = '/';
            }
        }

        function waitForTinyMCE(callback) {
            if (typeof tinymce !== 'undefined' && tinymce.init) {
                console.log('TinyMCE is loaded, executing callback');
                callback();
            } else {
                console.log('Waiting for TinyMCE to load...');
                const script = document.querySelector('script[src*="tinymce.min.js"]');
                if (script) {
                    script.onload = () => {
                        console.log('TinyMCE script loaded');
                        callback();
                    };
                    script.onerror = () => console.error('TinyMCE failed to load');
                } else {
                    setTimeout(() => waitForTinyMCE(callback), 100);
                }
            }
        }

        function initializeTinyMCE() {
            console.log('Initializing TinyMCE');
            tinymce.remove();
            tinymce.init({
                selector: '#aboutStore, textarea[name$="Content"]',
                height: 200,
                menubar: false,
                plugins: 'lists',
                toolbar: 'bold italic | bullist numlist',
                setup: editor => {
                    editor.on('init', () => console.log('TinyMCE editor initialized'));
                }
            });
        }

        function attachEventListeners() {
            console.log('Attaching event listeners');
            const existingListeners = document.__eventListeners || new Map();
            document.__eventListeners = existingListeners;

            document.querySelectorAll('.menu button[data-section]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const section = button.getAttribute('data-section');
                        console.log(`Section button clicked: ${section}`);
                        showSection(section);
                    });
                    existingListeners.set(button, true);
                }
            });

            document.querySelectorAll('.menu button[data-href]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', async () => {
                        const href = button.getAttribute('data-href');
                        console.log(`Fetching protected page: ${href}`);
                        await fetchProtectedPage(href);
                    });
                    existingListeners.set(button, true);
                }
            });

            document.querySelectorAll('.settings-form button[data-action]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const action = button.getAttribute('data-action');
                        console.log(`Action button clicked: ${action}`);
                        if (action === 'saveSettings') saveSettings();
                        else if (action === 'savePassword') savePassword();
                        else if (action === 'saveWixClientId') saveWixClientId();
                        else if (action === 'saveStoreRequest') saveStoreRequest();
                        else if (action === 'addPage') addPage();
                        else if (action === 'addEmail') addEmail();
                        else if (action === 'checkDomainAvailability') checkDomainAvailability();
                    });
                    existingListeners.set(button, true);
                }
            });

            const logOffBtn = document.getElementById('logOffBtn');
            if (logOffBtn && !existingListeners.has(logOffBtn)) {
                logOffBtn.addEventListener('click', logOff);
                existingListeners.set(logOffBtn, true);
            }
        }

        function checkAdminPermission() {
            const backButton = document.querySelector('button[data-href="/admin"]');
            if (backButton) {
                backButton.style.display = userPermissions.includes('admin') ? 'block' : 'none';
            }
        }

        async function loadBranding() {
            try {
                const response = await authenticatedFetch(`${apiUrl}/branding`);
                if (!response.ok) throw new Error(`Failed to fetch branding: ${response.status}`);
                const data = await response.json();
                const brandingContent = document.getElementById('brandingContent');
                if (brandingContent) {
                    brandingContent.innerHTML = data.content || '<h1>Merchant Dashboard</h1>';
                }
            } catch (error) {
                toastr.error(`Error loading branding: ${error.message}`);
                const brandingContent = document.getElementById('brandingContent');
                if (brandingContent) {
                    brandingContent.innerHTML = '<h1>Merchant Dashboard</h1>';
                }
            }
        }

        async function authenticatedFetch(url, options = {}) {
            const token = localStorage.getItem('authToken');
            options.headers = { ...options.headers, 'Authorization': `Bearer ${token}`, 'Content-Type': options.body instanceof FormData ? undefined : 'application/json' };
            const response = await fetch(url, options);
            if (response.status === 401) {
                toastr.error('Session expired. Please log in again.');
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                window.location.href = '/';
            }
            return response;
        }

        function showSection(section) {
            console.log(`Showing section: ${section}`);
            document.querySelectorAll('.section').forEach(s => {
                s.classList.remove('active');
                s.style.display = 'none';
            });
            const activeSection = document.getElementById(section);
            if (activeSection) {
                activeSection.classList.add('active');
                activeSection.style.display = 'block';
            }
            if (section === 'my-account') loadSettings();
            else if (section === 'my-products') loadProducts();
            else if (section === 'wix-keys') loadWixClientId();
            else if (section === 'my-store') loadStoreRequest();
            else if (section === 'info') return;
        }

        function logOff() {
            if (confirm('Are you sure you want to log off?')) {
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                toastr.success('Logged off successfully');
                setTimeout(() => window.location.href = '/', 1000);
            }
        }

        async function loadSettings() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/user`);
                if (!response.ok) throw new Error(`Failed to fetch settings: ${response.status}`);
                const data = await response.json();
                document.getElementById('contactName').value = data.contact_name || '';
                document.getElementById('websiteUrl').value = data.website_url || '';
                document.getElementById('emailAddress').value = data.email_address || '';
                document.getElementById('phoneNumber').value = data.phone_number || '';
            } catch (error) {
                toastr.error(`Error loading settings: ${error.message}`);
            }
        }

        async function saveSettings() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            const settings = {
                contact_name: document.getElementById('contactName').value.trim(),
                website_url: document.getElementById('websiteUrl').value.trim(),
                email_address: document.getElementById('emailAddress').value.trim(),
                phone_number: document.getElementById('phoneNumber').value.trim()
            };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/user`, { method: 'PATCH', body: JSON.stringify(settings) });
                if (!response.ok) throw new Error(`Failed to save settings: ${response.status}`);
                toastr.success('Settings saved successfully');
            } catch (error) {
                toastr.error(`Error saving settings: ${error.message}`);
            }
        }

        function togglePassword(fieldId) {
            const input = document.getElementById(fieldId);
            const icon = input.nextElementSibling;
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        async function savePassword() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            const passwordRegex = /^(?=.*\d).{8,}$/;
            if (!passwordRegex.test(newPassword)) {
                toastr.error('New password must be at least 8 characters long and include numbers');
                return;
            }
            if (newPassword !== confirmPassword) {
                toastr.error('New password and confirmation do not match');
                return;
            }

            const passwordData = { currentPassword, newPassword };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/password`, {
                    method: 'POST',
                    body: JSON.stringify(passwordData)
                });
                if (!response.ok) throw new Error(`Failed to change password: ${response.status}`);
                toastr.success('Password changed successfully');
                document.getElementById('currentPassword').value = '';
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmPassword').value = '';
            } catch (error) {
                toastr.error(`Error changing password: ${error.message}`);
            }
        }

        async function loadProducts() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/products`);
                if (!response.ok) throw new Error(`Failed to fetch products: ${response.status}`);
                const data = await response.json();
                const tbody = document.getElementById('productList');
                if (tbody) {
                    tbody.innerHTML = '';
                    data.products.forEach(product => tbody.appendChild(createProductRow(product)));
                }
            } catch (error) {
                toastr.error(`Error loading products: ${error.message}`);
            }
        }

        function createProductRow(product) {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td class="hidden">${product.id}</td>
                <td>${product.category || 'N/A'}</td>
                <td>${product.title}</td>
                <td><a href="${product.product_url}" target="_blank">Link</a></td>
                <td>${product.current_price}</td>
                <td>${product.original_price}</td>
                <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                <td>${product.qty || 'N/A'}</td>
            `;
            return tr;
        }

        async function loadWixClientId() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/user`);
                if (!response.ok) throw new Error(`Failed to fetch Wix Client ID: ${response.status}`);
                const data = await response.json();
                document.getElementById('wixClientId').value = data.wixClientId || '';
            } catch (error) {
                toastr.error(`Error loading Wix Client ID: ${error.message}`);
            }
        }

        async function saveWixClientId() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            const wixClientId = document.getElementById('wixClientId').value.trim();
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/user`, {
                    method: 'PATCH',
                    body: JSON.stringify({ wixClientId })
                });
                if (!response.ok) throw new Error(`Failed to save Wix Client ID: ${response.status}`);
                toastr.success('Wix Client ID saved successfully');
            } catch (error) {
                toastr.error(`Error saving Wix Client ID: ${error.message}`);
            }
        }

        async function loadStoreRequest() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/siterequest`);
                if (!response.ok) throw new Error(`Failed to fetch store request: ${response.status}`);
                const data = await response.json();
                const storeRequest = data.site_request || {};

                document.getElementById('storeName').value = storeRequest.storeName || '';
                tinymce.get('aboutStore')?.setContent(storeRequest.aboutStore || '');
                document.getElementById('colorPrefs').value = storeRequest.colorPrefs || '';
                document.getElementById('stylingDetails').value = storeRequest.stylingDetails || '';
                document.getElementById('preferredDomain').value = storeRequest.preferredDomain || 'mystore.uk';

                const emails = storeRequest.emails || ['info'];
                emailCount = 0;
                const emailsContainer = document.getElementById('emailsContainer');
                emailsContainer.innerHTML = '';
                emails.forEach((email, index) => {
                    emailCount++;
                    const emailDiv = document.createElement('div');
                    emailDiv.className = 'email-section';
                    emailDiv.dataset.email = emailCount;
                    emailDiv.innerHTML = `
                        <label for="email${emailCount}Name">Email Name:</label>
                        <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" value="${email}">
                        <span id="email${emailCount}Domain">@${storeRequest.preferredDomain || 'mystore.uk'}</span>
                        ${emailCount > 1 ? `<button type="button" class="remove-email-btn" onclick="removeEmail(${emailCount})">Remove Email</button>` : ''}
                    `;
                    emailsContainer.appendChild(emailDiv);
                });

                const pages = storeRequest.pages && storeRequest.pages.length >= 2 ? storeRequest.pages : [
                    { name: 'Home', content: '' },
                    { name: 'Returns Policy', content: '' }
                ];
                pageCount = 0;
                const pagesContainer = document.getElementById('pagesContainer');
                pagesContainer.innerHTML = '';
                pages.forEach((page, index) => {
                    pageCount++;
                    const pageDiv = document.createElement('div');
                    pageDiv.className = 'page-section';
                    pageDiv.dataset.page = pageCount;
                    pageDiv.innerHTML = `
                        <label for="page${pageCount}Name">Page Name:</label>
                        <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" value="${page.name || ''}" ${pageCount <= 2 ? 'readonly' : ''}>
                        <br><br>
                        <label for="page${pageCount}Content">${pageCount === 1 ? 'Home Page' : pageCount === 2 ? 'Returns Policy' : 'Page'} Content:</label>
                        <textarea id="page${pageCount}Content" name="page${pageCount}Content">${page.content || ''}</textarea>
                        <label for="page${pageCount}Images">Additional Images:</label>
                        <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
                        ${pageCount > 2 ? `<button type="button" class="remove-page-btn" onclick="removePage(${pageCount})">Remove Page</button>` : ''}
                    `;
                    pagesContainer.appendChild(pageDiv);
                });

                const widgets = storeRequest.widgets || [];
                document.querySelectorAll('input[name="widgets"]').forEach(checkbox => {
                    checkbox.checked = widgets.includes(checkbox.value);
                });

                tinymce.remove();
                waitForTinyMCE(initializeTinyMCE);
                updateDomainPreview();
            } catch (error) {
                toastr.error(`Error loading store request: ${error.message}`);
            }
        }

        async function saveStoreRequest() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }

            const storeRequest = {
                userId: userId,
                type: "merchant",
                storeName: document.getElementById('storeName').value.trim(),
                aboutStore: tinymce.get('aboutStore')?.getContent() || '',
                storeLogos: [],
                colorPrefs: document.getElementById('colorPrefs').value.trim(),
                stylingDetails: document.getElementById('stylingDetails').value.trim(),
                preferredDomain: document.getElementById('preferredDomain').value.trim() || 'mystore.uk',
                emails: [],
                pages: [],
                widgets: Array.from(document.querySelectorAll('input[name="widgets"]:checked')).map(cb => cb.value)
            };

            if (!storeRequest.storeName) {
                toastr.error('Store name is required');
                return;
            }

            const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
            if (!domainRegex.test(storeRequest.preferredDomain)) {
                toastr.error('Invalid domain name (e.g., mystore.uk)');
                return;
            }

            const logoFiles = document.getElementById('storeLogos').files;
            if (logoFiles.length > 5) {
                toastr.error('Maximum of 5 logos allowed');
                return;
            }
            for (let i = 0; i < logoFiles.length; i++) {
                const reader = new FileReader();
                await new Promise(resolve => {
                    reader.onload = () => {
                        storeRequest.storeLogos.push(reader.result);
                        resolve();
                    };
                    reader.readAsDataURL(logoFiles[i]);
                });
            }

            for (let i = 1; i <= emailCount; i++) {
                const emailInput = document.getElementById(`email${i}Name`);
                if (emailInput && emailInput.value.trim()) {
                    storeRequest.emails.push(emailInput.value.trim());
                }
            }

            for (let i = 1; i <= pageCount; i++) {
                const nameInput = document.getElementById(`page${i}Name`);
                const contentEditor = tinymce.get(`page${i}Content`);
                const imagesInput = document.getElementById(`page${i}Images`);
                if (nameInput && nameInput.value.trim()) {
                    const page = {
                        name: nameInput.value.trim(),
                        content: contentEditor ? contentEditor.getContent() : '',
                        images: []
                    };
                    if (imagesInput && imagesInput.files.length > 0) {
                        for (let j = 0; j < imagesInput.files.length; j++) {
                            const reader = new FileReader();
                            await new Promise(resolve => {
                                reader.onload = () => {
                                    page.images.push(reader.result);
                                    resolve();
                                };
                                reader.readAsDataURL(imagesInput.files[j]);
                            });
                        }
                    }
                    storeRequest.pages.push(page);
                }
            }

            if (storeRequest.pages.length < 2 || !storeRequest.pages.some(p => p.name === 'Home') || !storeRequest.pages.some(p => p.name === 'Returns Policy')) {
                toastr.error('Home and Returns Policy pages are required');
                return;
            }

            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/siterequest`, {
                    method: 'POST',
                    body: JSON.stringify(storeRequest)
                });
                if (!response.ok) throw new Error(`Failed to save store request: ${response.status}`);
                toastr.success('Store request saved successfully');
            } catch (error) {
                toastr.error(`Error saving store request: ${error.message}`);
            }
        }

        function addPage() {
            if (pageCount >= 5) {
                toastr.error('Maximum of 5 pages allowed');
                return;
            }
            pageCount++;
            const container = document.getElementById('pagesContainer');
            const newPage = document.createElement('div');
            newPage.className = 'page-section';
            newPage.dataset.page = pageCount;
            newPage.innerHTML = `
                <label for="page${pageCount}Name">Page Name:</label>
                <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" placeholder="e.g., Products">
                <br><br>
                <label for="page${pageCount}Content">Page Content:</label>
                <textarea id="page${pageCount}Content" name="page${pageCount}Content" placeholder="Describe this page"></textarea>
                <label for="page${pageCount}Images">Additional Images:</label>
                <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
                <button type="button" class="remove-page-btn" onclick="removePage(${pageCount})">Remove Page</button>
            `;
            container.appendChild(newPage);
            tinymce.remove();
            waitForTinyMCE(initializeTinyMCE);
        }

        function removePage(pageNum) {
            if (pageCount <= 2) {
                toastr.error('Cannot remove Home or Returns Policy pages');
                return;
            }
            const pageSection = document.querySelector(`.page-section[data-page="${pageNum}"]`);
            if (pageSection) {
                pageSection.remove();
                pageCount--;
                tinymce.remove();
                waitForTinyMCE(initializeTinyMCE);
            }
        }

        function addEmail() {
            if (emailCount >= 5) {
                toastr.error('Maximum of 5 email addresses allowed');
                return;
            }
            emailCount++;
            const container = document.getElementById('emailsContainer');
            const domain = document.getElementById('preferredDomain').value || 'mystore.uk';
            const newEmail = document.createElement('div');
            newEmail.className = 'email-section';
            newEmail.dataset.email = emailCount;
            newEmail.innerHTML = `
                <label for="email${emailCount}Name">Email Name:</label>
                <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" placeholder="e.g., contact">
                <span id="email${emailCount}Domain">@${domain}</span>
                <button type="button" class="remove-email-btn" onclick="removeEmail(${emailCount})">Remove Email</button>
            `;
            container.appendChild(newEmail);
            updateDomainPreview();
        }

        function removeEmail(emailNum) {
            if (emailCount <= 1) {
                toastr.error('Cannot remove the last email');
                return;
            }
            const emailSection = document.querySelector(`.email-section[data-email="${emailNum}"]`);
            if (emailSection) {
                emailSection.remove();
                emailCount--;
                updateDomainPreview();
            }
        }

        function updateDomainPreview() {
            const domain = document.getElementById('preferredDomain').value || 'mystore.uk';
            document.getElementById('domainPreview').textContent = `@${domain}`;
            for (let i = 1; i <= emailCount; i++) {
                const domainSpan = document.getElementById(`email${i}Domain`);
                if (domainSpan) domainSpan.textContent = `@${domain}`;
            }
        }

        function checkDomainAvailability() {
            const domain = document.getElementById('preferredDomain').value;
            const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
            if (!domain) {
                toastr.error('Please enter a preferred domain name');
                return;
            }
            if (!domainRegex.test(domain)) {
                toastr.error('Invalid domain name (e.g., mystore.uk)');
                return;
            }
            toastr.info(`Checking availability for ${domain}...`);
            setTimeout(() => toastr.success('This is a placeholder - domain check not implemented'), 1000);
        }

        initializeMerchant();
    </script>
</body>
</html>
static/old/partner.old.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Partner</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <style>
        /* Existing styles remain unchanged */
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; display: flex; flex-direction: column; min-height: 100vh; }
        .header { width: 100%; background-color: #007BFF; margin-bottom: 25px; flex-shrink: 0; display: block; }
        .header-content { max-width: 1200px; margin: 0 auto; padding: 20px; color: white; display: flex; align-items: center; gap: 20px; }
        .header-content img { border-radius: 50%; width: 50px; height: 50px; }
        .header-content h1 { margin: 0; font-size: 24px; }
        .header-content p { margin: 5px 0 0; font-size: 16px; }
        .main-container { max-width: 1200px; width: 1200px; margin: 0 auto; display: flex; flex-direction: row; gap: 20px; flex-grow: 1; }
        .menu-container { width: 300px; display: flex; flex-direction: column; align-items: flex-start; }
        .content-container { width: calc(1200px - 320px); padding: 20px; }
        .menu { width: 100%; margin-bottom: 20px; text-align: left; display: flex; flex-direction: column; align-items: flex-start; }
        .menu button { padding: 12px; background-color: #007BFF; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; text-align: left; width: 100%; margin-bottom: 2px; display: block; }
        .menu button:hover { background-color: #0056b3; }
        .menu .btn-admin { background-color: #dc3545; }
        .menu .btn-admin:hover { background-color: #c82333; }
        .menu .btn-logoff { background-color: #dc3545; }
        .menu .btn-logoff:hover { background-color: #c82333; }
        .submenu { display: none; padding-left: 20px; width: 100%; }
        .submenu.open { display: block; }
        .submenu button { background-color: #17a2b8; }
        .submenu button:hover { background-color: #138496; }
        .section { display: none; min-height: 200px; visibility: visible; opacity: 1; }
        .section.active { display: block; }
        .settings-form { display: flex; flex-direction: column; gap: 20px; max-width: 600px; padding: 20px 0; }
        .settings-form label { font-weight: bold; margin-bottom: 5px; }
        .settings-form input, .settings-form textarea { padding: 10px; width: 100%; box-sizing: border-box; border: 1px solid #ddd; border-radius: 4px; }
        .settings-form button { padding: 12px; background-color: #007BFF; color: white; border: none; cursor: pointer; border-radius: 4px; width: auto; align-self: flex-start; }
        .settings-form button:hover { background-color: #0056b3; }
        #toast-container > .toast-success { background-color: #28a745; border-color: #218838; }
        #toast-container > .toast-error { background-color: #dc3545; border-color: #c82333; }
        .password-container { position: relative; display: flex; flex-direction: column; margin-bottom: 20px; }
        .password-container input { padding-right: 40px; }
        .password-toggle { position: absolute; right: 10px; top: 65%; transform: translateY(-50%); cursor: pointer; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
        #productTable th, #productTable td { min-width: 100px; }
        #productTable th:nth-child(1), #productTable td:nth-child(1) { width: 0; }
        #productTable th:nth-child(2), #productTable td:nth-child(2) { width: 15%; }
        #productTable th:nth-child(3), #productTable td:nth-child(3) { width: 25%; }
        #productTable th:nth-child(4), #productTable td:nth-child(4) { width: 20%; }
        #productTable th:nth-child(5), #productTable td:nth-child(5) { width: 10%; }
        #productTable th:nth-child(6), #productTable td:nth-child(6) { width: 10%; }
        #productTable th:nth-child(7), #productTable td:nth-child(7) { width: 10%; }
        #productTable th:nth-child(8), #productTable td:nth-child(8) { width: 10%; }
        .hidden { display: none; }
        tr.clickable:hover { background-color: #f5f5f5; cursor: pointer; }
        #siteRequestsTable button { padding: 6px 12px; background-color: #007BFF; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px; }
        #siteRequestsTable button:hover { background-color: #0056b3; }
        .site-request-detail { max-width: 600px; }
        .site-request-detail label { font-weight: bold; display: block; margin-top: 15px; }
        .site-request-detail p { margin: 5px 0; }
        .site-request-detail img { max-width: 100px; margin: 5px; vertical-align: middle; }
        .site-request-detail .page-section, .site-request-detail .email-section { margin-top: 15px; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }
        .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1000; }
        .modal-content { background-color: white; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); padding: 20px; border-radius: 4px; width: 80%; max-width: 400px; }
        .modal-content label { font-weight: bold; display: block; margin-bottom: 5px; }
        .modal-content input { width: 100%; padding: 8px; margin-bottom: 15px; }
        .modal-content button { width: 100%; padding: 10px; }
        .close { float: right; font-size: 20px; cursor: pointer; }
        #documentation-content { padding: 20px; visibility: visible; opacity: 1; }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content" id="brandingContent">
            <!-- Branding content will be loaded here -->
        </div>
    </div>
    <div class="main-container">
        <div class="menu-container">
            <div class="menu" id="menu">
                <input type="text" id="userId" style="display: none;">
                <!-- Menu items will be dynamically generated -->
            </div>
        </div>
        <div class="content-container">
            <div id="welcome" class="section active">
                <h2>Welcome to Your Partner Dashboard</h2>
                <p>This dashboard is designed for partners to manage merchant integrations with clubmadeira.io. Use the "My Account" section to update your contact details or change your password. If you have admin privileges, you can return to the admin panel using the "Back to Admin" button.</p>
            </div>
            <div id="my-account" class="section">
                <h2>My Account</h2>
                <div class="settings-form">
                    <label for="contactName">Contact Name:</label>
                    <input type="text" id="contactName" placeholder="Enter contact name">
                    <label for="websiteUrl">Website URL:</label>
                    <input type="url" id="websiteUrl" placeholder="Enter website URL">
                    <label for="emailAddress">Email Address:</label>
                    <input type="email" id="emailAddress" placeholder="Enter email address">
                    <label for="phoneNumber">Phone Number:</label>
                    <input type="tel" id="phoneNumber" placeholder="Enter phone number">
                    <button data-action="saveSettings">Save Settings</button>
                    <h3>Change Password</h3>
                    <div class="password-container">
                        <label for="currentPassword">Current Password:</label>
                        <input type="password" id="currentPassword" placeholder="Enter current password">
                        <i class="fas fa-eye password-toggle" data-field="currentPassword"></i>
                    </div>
                    <div class="password-container">
                        <label for="newPassword">New Password:</label>
                        <input type="password" id="newPassword" placeholder="Enter new password">
                        <i class="fas fa-eye password-toggle" data-field="newPassword"></i>
                    </div>
                    <div class="password-container">
                        <label for="confirmPassword">Confirm New Password:</label>
                        <input type="password" id="confirmPassword" placeholder="Confirm new password">
                        <i class="fas fa-eye password-toggle" data-field="confirmPassword"></i>
                    </div>
                    <button data-action="savePassword">Change Password</button>
                </div>
            </div>
            <div id="my-products" class="section">
                <h2>My Products</h2>
                <p>These are the products from your parts feed.</p>
                <table id="productTable">
                    <thead>
                        <tr><th class="hidden">ID</th><th>Category</th><th>Title</th><th>URL</th><th>Price</th><th>Original</th><th>Image</th><th>QTY</th></tr>
                    </thead>
                    <tbody id="productList"></tbody>
                </table>
            </div>
            <div id="wix-keys" class="section">
                <h2>Wix Keys</h2>
                <p>Your Wix Client ID is used to integrate your merchant account with Wix services. Ensure it matches the key provided in your Wix developer dashboard.</p>
                <div class="settings-form">
                    <label for="wixClientId">Wix Client ID:</label>
                    <input type="text" id="wixClientId" placeholder="Enter Wix Client ID">
                    <button data-action="saveWixClientId">Save Wix Client ID</button>
                </div>
            </div>
            <div id="site-requests" class="section">
                <h2>Site Requests</h2>
                <p>View and manage site requests from merchants and communities. Click a row to see details.</p>
                <table id="siteRequestsTable">
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Received At</th>
                            <th>Contact Name</th>
                            <th>Email</th>
                            <th>Organisation</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="siteRequestsList"></tbody>
                </table>
            </div>
            <div id="site-request-detail" class="section">
                <h2>Site Request Details</h2>
                <div class="settings-form">
                    <button data-section="site-requests">Back to Site Requests</button>
                    <div id="siteRequestContent"></div>
                </div>
            </div>
            <div id="documentation" class="section">
                <h2>Documentation</h2>
                <div id="documentation-content">
                    <p>This section provides documentation for integrating with clubmadeira.io. Select a specific topic from the submenu.</p>
                </div>
            </div>
            <div id="apiKeyModal" class="modal">
                <div class="modal-content">
                    <span class="close" data-action="closeApiKeyModal">×</span>
                    <h3>Enter API Key</h3>
                    <label for="merchantWixClientId">Wix Client ID:</label>
                    <input type="text" id="merchantWixClientId" placeholder="Enter Wix Client ID">
                    <button data-action="saveMerchantWixClientId">Save</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked@4.0.12/marked.min.js"></script>
    <script>
        const apiUrl = 'https://clubmadeira.io';
        let userPermissions = [];
        let currentUserId = '';

        function decodeJWT(token) {
            if (!token || typeof token !== 'string') {
                console.error('Invalid token');
                return null;
            }
            if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
                console.error('Invalid token format');
                return null;
            }
            const parts = token.split('.');
            try {
                const base64Url = parts[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                return JSON.parse(jsonPayload);
            } catch (error) {
                console.error('Error decoding JWT:', error.message);
                return null;
            }
        }

        function initializePartner() {
            console.log('Initializing partner page');
            const token = localStorage.getItem('authToken');
            currentUserId = localStorage.getItem('userId') || '';
            if (!token) {
                console.error('No token found, redirecting to /');
                window.location.href = '/';
                return;
            }
            if (!currentUserId) {
                console.error('No user ID found in session, redirecting to /');
                toastr.error('User ID not found in session. Please log in again.');
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                window.location.href = '/';
                return;
            }
            const decoded = decodeJWT(token);
            if (!decoded) {
                console.error('Invalid token, redirecting to /');
                window.location.href = '/';
                return;
            }
            userPermissions = decoded.permissions || [];
            if (!userPermissions.includes('admin') && !userPermissions.includes('wixpro')) {
                toastr.error('Permission denied: Partner permission required');
                window.location.href = '/';
                return;
            }
            document.getElementById('userId').value = currentUserId;
            updateMenu();
            loadBranding();
            showSection('welcome');
            attachEventListeners();
        }

        toastr.options = { closeButton: true, progressBar: true, positionClass: 'toast-top-right', timeOut: 5000, showMethod: 'slideDown', hideMethod: 'slideUp' };

        async function fetchProtectedPage(url) {
            const token = localStorage.getItem('authToken');
            if (!token) {
                toastr.error('No authentication token found. Please log in.');
                window.location.href = '/';
                return;
            }
            try {
                const response = await fetch(`${apiUrl}${url}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'text/html'
                    }
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Server returned ${response.status}: ${errorText}`);
                }
                const html = await response.text();

                // Clear the event listeners Map before replacing the DOM
                if (document.__eventListeners) {
                    console.log('Before DOM replacement - Clearing event listeners Map. Size before:', document.__eventListeners.size);
                    document.__eventListeners.clear();
                    console.log('Map cleared. Size after:', document.__eventListeners.size);
                } else {
                    console.log('No event listeners Map found. Will create one after DOM update.');
                }

                // Replace the DOM content
                document.body.innerHTML = html;

                // Reinitialize the page
                initializePartner();
            } catch (error) {
                toastr.error(error.message || 'Failed to load protected page');
                window.location.href = '/';
            }
        }

        function attachEventListeners() {
            console.log('Attaching event listeners');
            const existingListeners = document.__eventListeners || new Map();
            document.__eventListeners = existingListeners;
            console.log('Map size at start:', existingListeners.size);

            // Navigation buttons (e.g., "Back to Admin")
            document.querySelectorAll('.menu button[data-href]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', async (e) => {
                        e.preventDefault();
                        const href = button.getAttribute('data-href');
                        console.log(`Fetching protected page: ${href}`);
                        await fetchProtectedPage(href);
                    });
                    existingListeners.set(button, true);
                    console.log('Listener attached to navigation button');
                }
            });

            // Top-level menu buttons (e.g., "Site Requests", "My Products")
            document.querySelectorAll('.menu button[data-section]:not([data-type])').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', (e) => {
                        e.preventDefault();
                        const section = button.getAttribute('data-section');
                        const submenu = button.getAttribute('data-submenu');
                        console.log(`Top-level button clicked: ${section}${submenu ? ' (submenu)' : ''}`);
                        if (submenu) toggleSubmenu(submenu);
                        showSection(section);
                    });
                    existingListeners.set(button, true);
                    console.log('Listener attached to top-level menu button');
                }
            });

            // Submenu buttons (e.g., "Velo Docs", "Flask Docs")
            document.querySelectorAll('.submenu button[data-section][data-type]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', (e) => {
                        e.preventDefault();
                        const section = button.getAttribute('data-section');
                        const type = button.getAttribute('data-type');
                        console.log(`Submenu button clicked: ${section} (${type})`);
                        showSection(section, type);
                    });
                    existingListeners.set(button, true);
                    console.log('Listener attached to submenu button');
                }
            });

            // Action buttons in settings forms (e.g., "Save Settings", "Change Password")
            document.querySelectorAll('.settings-form button[data-action]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const action = button.getAttribute('data-action');
                        console.log(`Action button clicked: ${action}`);
                        if (action === 'saveSettings') saveSettings();
                        else if (action === 'savePassword') savePassword();
                        else if (action === 'saveWixClientId') saveWixClientId();
                        else if (action === 'saveMerchantWixClientId') saveMerchantWixClientId();
                    });
                    existingListeners.set(button, true);
                    console.log('Listener attached to settings action button');
                }
            });

            // Password toggle icons
            document.querySelectorAll('.password-toggle').forEach(toggle => {
                if (!existingListeners.has(toggle)) {
                    toggle.addEventListener('click', () => {
                        const fieldId = toggle.getAttribute('data-field');
                        togglePassword(fieldId);
                    });
                    existingListeners.set(toggle, true);
                    console.log('Listener attached to password toggle');
                }
            });

            // Site request table rows (click to view details)
            document.querySelectorAll('#siteRequestsList tr.clickable').forEach(row => {
                if (!existingListeners.has(row)) {
                    row.addEventListener('click', (e) => {
                        if (e.target.tagName !== 'BUTTON') {
                            const userId = row.dataset.userId;
                            loadSiteRequestDetail(userId);
                        }
                    });
                    existingListeners.set(row, true);
                    console.log('Listener attached to site request row');
                }
            });

            // Action buttons in site requests table (e.g., "Enter API Key")
            document.querySelectorAll('#siteRequestsTable button[data-user-id]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const userId = button.getAttribute('data-user-id');
                        openApiKeyModal(userId);
                    });
                    existingListeners.set(button, true);
                    console.log('Listener attached to site request action button');
                }
            });

            // Logoff button
            const logOffBtn = document.getElementById('logOffBtn');
            if (logOffBtn && !existingListeners.has(logOffBtn)) {
                logOffBtn.addEventListener('click', logOff);
                existingListeners.set(logOffBtn, true);
                console.log('Listener attached to logOffBtn');
            }

            // Modal close button
            const closeModalBtn = document.querySelector('.close[data-action="closeApiKeyModal"]');
            if (closeModalBtn && !existingListeners.has(closeModalBtn)) {
                closeModalBtn.addEventListener('click', closeApiKeyModal);
                existingListeners.set(closeModalBtn, true);
                console.log('Listener attached to modal close button');
            }

            console.log('Map size at end:', existingListeners.size);
        }

        function updateMenu() {
            const menu = document.getElementById('menu');
            menu.innerHTML = '<input type="text" id="userId" style="display: none;" value="' + currentUserId + '">';

            if (userPermissions.includes('wixpro') && userPermissions.includes('validated')) {
                menu.innerHTML += '<button data-section="site-requests">Site Requests</button>';
            }

            if (userPermissions.includes('merchant')) {
                menu.innerHTML += '<button data-section="my-products">My Products</button>';
                menu.innerHTML += '<button data-section="wix-keys">Wix Keys</button>';
            }

            menu.innerHTML += '<button data-section="my-account">My Account</button>';
            menu.innerHTML += '<button data-section="documentation" data-submenu="documentation">Documentation <i class="fas fa-caret-down"></i></button>';
            menu.innerHTML += `
                <div id="documentation" class="submenu">
                    <button data-section="documentation" data-type="velo">Velo Docs</button>
                    <button data-section="documentation" data-type="flask">Flask Docs</button>
                </div>
            `;

            if (userPermissions.includes('admin')) {
                menu.innerHTML += '<button data-href="/admin" class="btn-admin">Back to Admin</button>';
            }

            menu.innerHTML += '<button id="logOffBtn" class="btn-logoff">Log Off</button>';
        }

        async function loadBranding() {
            try {
                const response = await authenticatedFetch(`${apiUrl}/branding`);
                if (!response.ok) throw new Error(`Failed to fetch branding: ${response.status}`);
                const data = await response.json();
                document.getElementById('brandingContent').innerHTML = data.content || `
                    <img src="https://via.placeholder.com/50" alt="User Avatar">
                    <div>
                        <h1>Welcome to Your Admin Hub</h1>
                        <p>Manage affiliates, deals, and users with ease!</p>
                    </div>
                `;
            } catch (error) {
                toastr.error(`Error loading branding: ${error.message}`);
                document.getElementById('brandingContent').innerHTML = `
                    <img src="https://via.placeholder.com/50" alt="User Avatar">
                    <div>
                        <h1>Welcome to Your Admin Hub</h1>
                        <p>Manage affiliates, deals, and users with ease!</p>
                    </div>
                `;
            }
        }

        async function authenticatedFetch(url, options = {}) {
            const token = localStorage.getItem('authToken');
            options.headers = { ...options.headers, 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' };
            const response = await fetch(url, options);
            if (response.status === 401) {
                toastr.error('Session expired. Please log in again.');
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                window.location.href = '/';
            }
            return response;
        }

        function showSection(section, type = null) {
            console.log(`Showing section: ${section}${type ? ` (${type})` : ''}`);
            document.querySelectorAll('.section').forEach(s => {
                s.classList.remove('active');
                s.style.display = 'none';
            });
            const activeSection = document.getElementById(section);
            if (activeSection) {
                activeSection.classList.add('active');
                activeSection.style.display = 'block';
                activeSection.style.visibility = 'visible';
                activeSection.style.opacity = '1';
                console.log(`Section ${section} is now visible, display: ${activeSection.style.display}, visibility: ${activeSection.style.visibility}, opacity: ${activeSection.style.opacity}`);
            } else {
                console.error(`Section ${section} not found`);
            }
            if (section === 'my-account') loadSettings();
            else if (section === 'my-products') loadProducts();
            else if (section === 'wix-keys') loadWixClientId();
            else if (section === 'site-requests') loadSiteRequests();
            else if (section === 'documentation') loadDocumentation(type);
        }

        function toggleSubmenu(submenuId) {
            const submenu = document.getElementById(submenuId);
            if (submenu) {
                submenu.classList.toggle('open');
                console.log(`Toggled submenu: ${submenuId}, now ${submenu.classList.contains('open') ? 'open' : 'closed'}`);
            } else {
                console.error(`Submenu with ID ${submenuId} not found`);
            }
        }

        async function loadDocumentation(type) {
            const contentDiv = document.getElementById('documentation-content');
            if (!contentDiv) {
                console.error('Documentation content div not found');
                return;
            }
            console.log('Loading documentation, type:', type);
            contentDiv.innerHTML = `
                <p>This section provides documentation for integrating with clubmadeira.io. Select a specific topic from the submenu.</p>
            `;
            console.log('Set default documentation content');
            if (!type) {
                return;
            }
            let url;
            if (type === 'velo') {
                url = `https://raw.githubusercontent.com/SimonBarnett/Madeira/main/velo.md`;
            } else if (type === 'flask') {
                url = `https://raw.githubusercontent.com/SimonBarnett/Madeira/main/flask.md`;
            } else {
                console.error(`Invalid documentation type: ${type}`);
                return;
            }
            console.log(`Fetching documentation from: ${url}`);
            try {
                const response = await fetch(url);
                console.log(`Response status: ${response.status}`);
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Failed to load ${type} documentation: ${response.status} - ${errorText}`);
                }
                const markdown = await response.text();
                console.log(`Loaded ${type} markdown: ${markdown.substring(0, 100)}...`);
                try {
                    const html = marked.parse(markdown);
                    console.log(`Parsed HTML: ${html.substring(0, 100)}...`);
                    contentDiv.innerHTML = html;
                } catch (parseError) {
                    console.error(`Error parsing Markdown: ${parseError.message}`);
                    contentDiv.innerHTML = `<p>Error parsing ${type} documentation: ${parseError.message}</p>`;
                }
            } catch (error) {
                console.error(`Error loading ${type} documentation: ${error.message}`);
                toastr.error(`Error loading ${type} documentation: ${error.message}`);
                contentDiv.innerHTML = `<p>Failed to load ${type} documentation: ${error.message}</p>`;
            }
        }

        function logOff() {
            if (confirm('Are you sure you want to log off?')) {
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                toastr.success('Logged off successfully');
                setTimeout(() => window.location.href = '/', 1000);
            }
        }

        async function loadSettings() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`);
                if (!response.ok) throw new Error(`Failed to fetch settings: ${response.status}`);
                const data = await response.json();
                document.getElementById('contactName').value = data.contact_name || '';
                document.getElementById('websiteUrl').value = data.website_url || '';
                document.getElementById('emailAddress').value = data.email_address || '';
                document.getElementById('phoneNumber').value = data.phone_number || '';
            } catch (error) {
                toastr.error(`Error loading settings: ${error.message}`);
            }
        }

        async function saveSettings() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            const settings = {
                contact_name: document.getElementById('contactName').value.trim(),
                website_url: document.getElementById('websiteUrl').value.trim(),
                email_address: document.getElementById('emailAddress').value.trim(),
                phone_number: document.getElementById('phoneNumber').value.trim()
            };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`, { method: 'PATCH', body: JSON.stringify(settings) });
                if (!response.ok) throw new Error(`Failed to save settings: ${response.status}`);
                toastr.success('Settings saved successfully');
            } catch (error) {
                toastr.error(`Error saving settings: ${error.message}`);
            }
        }

        function togglePassword(fieldId) {
            const input = document.getElementById(fieldId);
            const icon = input.nextElementSibling;
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        async function savePassword() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            const passwordRegex = /^(?=.*\d).{8,}$/;
            if (!passwordRegex.test(newPassword)) {
                toastr.error('New password must be at least 8 characters long and include numbers');
                return;
            }
            if (newPassword !== confirmPassword) {
                toastr.error('New password and confirmation do not match');
                return;
            }

            const passwordData = { currentPassword, newPassword };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/password`, {
                    method: 'POST',
                    body: JSON.stringify(passwordData)
                });
                if (!response.ok) throw new Error(`Failed to change password: ${response.status}`);
                toastr.success('Password changed successfully');
                document.getElementById('currentPassword').value = '';
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmPassword').value = '';
            } catch (error) {
                toastr.error(`Error changing password: ${error.message}`);
            }
        }

        async function loadProducts() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/products`);
                if (!response.ok) throw new Error(`Failed to fetch products: ${response.status}`);
                const data = await response.json();
                const tbody = document.getElementById('productList');
                tbody.innerHTML = '';
                data.products.forEach(product => tbody.appendChild(createProductRow(product)));
            } catch (error) {
                toastr.error(`Error loading products: ${error.message}`);
            }
        }

        function createProductRow(product) {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td class="hidden">${product.id}</td>
                <td>${product.category || 'N/A'}</td>
                <td>${product.title}</td>
                <td><a href="${product.product_url}" target="_blank">Link</a></td>
                <td>${product.current_price}</td>
                <td>${product.original_price}</td>
                <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                <td>${product.qty || 'N/A'}</td>
            `;
            return tr;
        }

        async function loadWixClientId() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`);
                if (!response.ok) throw new Error(`Failed to fetch Wix Client ID: ${response.status}`);
                const data = await response.json();
                document.getElementById('wixClientId').value = data.wixClientId || '';
            } catch (error) {
                toastr.error(`Error loading Wix Client ID: ${error.message}`);
            }
        }

        async function saveWixClientId() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            const wixClientId = document.getElementById('wixClientId').value.trim();
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`, {
                    method: 'PATCH',
                    body: JSON.stringify({ wixClientId })
                });
                if (!response.ok) throw new Error(`Failed to save Wix Client ID: ${response.status}`);
                toastr.success('Wix Client ID saved successfully');
            } catch (error) {
                toastr.error(`Error saving Wix Client ID: ${error.message}`);
            }
        }

        async function loadSiteRequests() {
            try {
                const url = `${apiUrl}/siterequests`;
                const response = await authenticatedFetch(url);
                if (!response.ok) throw new Error(`Failed to fetch site requests: ${response.status}`);
                const data = await response.json();
                const tbody = document.getElementById('siteRequestsList');
                tbody.innerHTML = '';
                if (data.siterequests && data.siterequests.length > 0) {
                    data.siterequests.forEach(request => {
                        const row = createSiteRequestRow(request);
                        row.classList.add('clickable');
                        tbody.appendChild(row);
                    });
                } else {
                    tbody.innerHTML = '<tr><td colspan="6">No site requests found.</td></tr>';
                }
            } catch (error) {
                toastr.error(`Error loading site requests: ${error.message}`);
                const tbody = document.getElementById('siteRequestsList');
                tbody.innerHTML = `<tr><td colspan="6">Error loading site requests: ${error.message}</td></tr>`;
            }
        }

        function createSiteRequestRow(request) {
            const tr = document.createElement('tr');
            tr.dataset.userId = request.user_id;
            tr.innerHTML = `
                <td>${request.type || ''}</td>
                <td>${request.received_at || ''}</td>
                <td>${request.contact_name || ''}</td>
                <td>${request.email || ''}</td>
                <td>${request.organisation || ''}</td>
                <td>${
                    request.type === 'merchant'
                        ? `<button data-user-id="${request.user_id}">Enter API Key</button>`
                        : ''
                }</td>
            `;
            return tr;
        }

        async function loadSiteRequestDetail(userId) {
            try {
                const url = `${apiUrl}/${userId}/siterequest`;
                const response = await authenticatedFetch(url);
                if (!response.ok) throw new Error(`Failed to fetch site request details: ${response.status}`);
                const data = await response.json();
                const content = document.getElementById('siteRequestContent');
                if (data.status === 'success' && Object.keys(data.site_request).length > 0) {
                    const siteRequest = data.site_request;
                    content.innerHTML = `
                        <label>Community Name:</label>
                        <p>${siteRequest.communityName || siteRequest.storeName || ''}</p>
                        <label>About Our Community/Store:</label>
                        <p>${siteRequest.aboutCommunity || siteRequest.aboutStore || ''}</p>
                        <label>Logos:</label>
                        <div>${(siteRequest.communityLogos || siteRequest.storeLogos || []).map(logo => `<img src="${logo}" alt="Logo">`).join(' ')}</div>
                        <label>Color Preferences:</label>
                        <p>${siteRequest.colorPrefs || ''}</p>
                        <label>Styling Details:</label>
                        <p>${siteRequest.stylingDetails || ''}</p>
                        <label>Preferred Domain Name:</label>
                        <p>${siteRequest.preferredDomain || 'mycommunity.org'}</p>
                        <label>Email Addresses to Set Up:</label>
                        <div>${(siteRequest.emails || []).map(email => `<div class="email-section">${email}@${siteRequest.preferredDomain || 'mycommunity.org'}</div>`).join('')}</div>
                        <label>Requested Pages:</label>
                        <div>${(siteRequest.pages || []).map(page => `
                            <div class="page-section">
                                <label>Page Name:</label>
                                <p>${page.name || ''}</p>
                                <label>Page Content:</label>
                                <p>${page.content || ''}</p>
                                <label>Additional Images:</label>
                                <div>${(page.images || []).map(img => `<img src="${img}" alt="Page Image">`).join(' ')}</div>
                            </div>
                        `).join('')}</div>
                        <label>Wix Widgets:</label>
                        <div>${(siteRequest.widgets || []).map(widget => `<p>${widget}</p>`).join('')}</div>
                    `;
                    currentUserId = userId;
                } else {
                    content.innerHTML = '<p>No details available for this site request.</p>';
                }
                showSection('site-request-detail');
            } catch (error) {
                toastr.error(`Error loading site request details: ${error.message}`);
                document.getElementById('siteRequestContent').innerHTML = `<p>Error: ${error.message}</p>`;
                showSection('site-request-detail');
            }
        }

        function openApiKeyModal(userId) {
            currentUserId = userId;
            document.getElementById('merchantWixClientId').value = '';
            document.getElementById('apiKeyModal').style.display = 'block';
        }

        function closeApiKeyModal() {
            document.getElementById('apiKeyModal').style.display = 'none';
        }

        async function saveMerchantWixClientId() {
            const wixClientId = document.getElementById('merchantWixClientId').value.trim();
            if (!wixClientId) {
                toastr.error('Wix Client ID cannot be empty');
                return;
            }
            if (!currentUserId) {
                toastr.error('User ID is missing. Please try again.');
                return;
            }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`, {
                    method: 'PATCH',
                    body: JSON.stringify({ wixClientId })
                });
                if (!response.ok) throw new Error(`Failed to save Wix Client ID: ${response.status}`);
                toastr.success('Wix Client ID saved successfully');
                closeApiKeyModal();
            } catch (error) {
                toastr.error(`Error saving Wix Client ID: ${error.message}`);
            }
        }

        initializePartner();
    </script>
</body>
</html>
templates/admin.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Admin</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="/static/styles.css">
    <!-- Define window.apiUrl before loading scripts -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
</head>
<body>
    <!-- Loading Overlay -->
    <div id="loadingOverlay" style="display: flex;">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="layout-wrapper" style="display: none;">
        <div class="header">
            <div class="header-content" id="brandingContent" style="display: block;">
                <!-- Branding content will be loaded here -->
            </div>
        </div>
        <div class="main-container">
            <div class="menu-container">
                <div class="menu">
                    <button data-section="deal_listings">
                        <span class="button-content"><i class="fas fa-tags"></i> Deal Listings</span>
                    </button>
                    <button data-submenu="affiliatePrograms" data-section="affiliateProgramsIntro">
                        <span class="button-content"><i class="fas fa-handshake"></i> Affiliate Programs</span>
                        <i class="fas fa-caret-right caret"></i>
                    </button>
                    <div id="affiliatePrograms" class="submenu">
                        <button data-section="amazon_uk">
                            <span class="button-content">
                                <span class="svg-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M257.2 162.7c-48.7 1.8-169.5 15.5-169.5 117.5 0 109.5 138.3 114 183.5 43.2 6.5 10.2 35.4 37.5 45.3 46.8l56.8-56S341 288.9 341 261.4V114.3C341 89 316.5 32 228.7 32 140.7 32 94 87 94 136.3l73.5 6.8c16.3-49.5 54.2-49.5 54.2-49.5 40.7-.1 35.5 29.8 35.5 69.1zm0 86.8c0 80-84.2 68-84.2 17.2 0-47.2 50.5-56.7 84.2-57.8v40.6zm136 163.5c-7.7 10-70 67-174.5 67S34.2 408.5 9.7 379c-6.8-7.7 1-11.3 5.5-8.3C88.5 415.2 203 488.5 387.7 401c7.5-3.7 13.3 2 5.5 12zm39.8 2.2c-6.5 15.8-16 26.8-21.2 31-5.5 4.5-9.5 2.7-6.5-3.8s19.3-46.5 12.7-55c-6.5-8.3-37-4.3-48-3.2-10.8 1-13 2-14-.3-2.3-5.7 21.7-15.5 37.5-17.5 15.7-1.8 41-.8 46 5.7 3.7 5.1 0 27.1-6.5 43.1z"/></svg>
                                </span> Amazon UK
                            </span>
                        </button>
                        <button data-section="ebay_uk">
                            <span class="button-content">
                                <span class="svg-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M606 189.5l-54.8 109.9-54.9-109.9h-37.5l10.9 20.6c-11.5-19-35.9-26-63.3-26-31.8 0-67.9 8.7-71.5 43.1h33.7c1.4-13.8 15.7-21.8 35-21.8 26 0 41 9.6 41 33v3.4c-12.7 0-28 .1-41.7 .4-42.4 .9-69.6 10-76.7 34.4 1-5.2 1.5-10.6 1.5-16.2 0-52.1-39.7-76.2-75.4-76.2-21.3 0-43 5.5-58.7 24.2v-80.6h-32.1v169.5c0 10.3-.6 22.9-1.1 33.1h31.5c.7-6.3 1.1-12.9 1.1-19.5 13.6 16.6 35.4 24.9 58.7 24.9 36.9 0 64.9-21.9 73.3-54.2-.5 2.8-.7 5.8-.7 9 0 24.1 21.1 45 60.6 45 26.6 0 45.8-5.7 61.9-25.5 0 6.6 .3 13.3 1.1 20.2h29.8c-.7-8.2-1-17.5-1-26.8v-65.6c0-9.3-1.7-17.2-4.8-23.8l61.5 116.1-28.5 54.1h35.9L640 189.5zM243.7 313.8c-29.6 0-50.2-21.5-50.2-53.8 0-32.4 20.6-53.8 50.2-53.8 29.8 0 50.2 21.4 50.2 53.8 0 32.3-20.4 53.8-50.2 53.8zm200.9-47.3c0 30-17.9 48.4-51.6 48.4-25.1 0-35-13.4-35-25.8 0-19.1 18.1-24.4 47.2-25.3 13.1-.5 27.6-.6 39.4-.6zm-411.9 1.6h128.8v-8.5c0-51.7-33.1-75.4-78.4-75.4-56.8 0-83 30.8-83 77.6 0 42.5 25.3 74 82.5 74 31.4 0 68-11.7 74.4-46.1h-33.1c-12 35.8-87.7 36.7-91.2-21.6zm95-21.4H33.3c6.9-56.6 92.1-54.7 94.4 0z"/></svg>
                                </span> eBay UK
                            </span>
                        </button>
                        <button data-section="awin">
                            <span class="button-content"><i class="fas fa-network-wired"></i> Awin</span>
                        </button>
                        <button data-section="cj">
                            <span class="button-content"><i class="fas fa-link"></i> CJ</span>
                        </button>
                        <button data-section="textmagic">
                            <span class="button-content"><i class="fas fa-sms"></i> TextMagic</span>
                        </button>
                        <button data-section="tiny">
                            <span class="button-content"><i class="fas fa-pen"></i> tiny</span>
                        </button>
                    </div>
                    <button data-submenu="userManagement" data-section="userManagementIntro">
                        <span class="button-content"><i class="fas fa-users"></i> User Management</span>
                        <i class="fas fa-caret-right caret"></i>
                    </button>
                    <div id="userManagement" class="submenu">
                        <button data-section="partners">
                            <span class="button-content">
                                <span class="svg-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
                                        <path d="M512 256c0 .9 0 1.8 0 2.7c-.4 36.5-33.6 61.3-70.1 61.3L344 320c-26.5 0-48 21.5-48 48c0 3.4 .4 6.7 1 9.9c2.1 10.2 6.5 20 10.8 29.9c6.1 13.8 12.1 27.5 12.1 42c0 31.8-21.6 60.7-53.4 62c-3.5 .1-7 .2-10.6 .2C114.6 512 0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM128 288a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm0-96a32 32 0 1 0 0-64 32 32 0 1 0 0 64zM288 96a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm96 96a32 32 0 1 0 0-64 32 32 0 1 0 0 64z"/>
                                    </svg>
                                </span> Partners
                            </span>
                        </button>
                        <button data-section="communities">
                            <span class="button-content">
                                <span class="svg-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" preserveAspectRatio="xMidYMid meet">
                                        <path d="M72 88a56 56 0 1 1 112 0A56 56 0 1 1 72 88zM64 245.7C54 256.9 48 271.8 48 288s6 31.1 16 42.3l0-84.7zm144.4-49.3C178.7 222.7 160 261.2 160 304c0 34.3 12 65.8 32 90.5l0 21.5c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-26.8C26.2 371.2 0 332.7 0 288c0-61.9 50.1-112 112-112l32 0c24 0 46.2 7.5 64.4 20.3zM448 416l0-21.5c20-24.7 32-56.2 32-90.5c0-42.8-18.7-81.3-48.4-107.7C449.8 183.5 472 176 496 176l32 0c61.9 0 112 50.1 112 112c0 44.7-26.2 83.2-64 101.2l0 26.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32zm8-328a56 56 0 1 1 112 0A56 56 0 1 1 456 88zM576 245.7l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM320 32a64 64 0 1 1 0 128 64 64 0 1 1 0-128zM240 304c0 16.2 6 31 16 42.3l0-84.7c-10 11.3-16 26.1-16 42.3zm144-42.3l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM448 304c0 44.7-26.2 83.2-64 101.2l0 42.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-42.8c-37.8-18-64-56.5-64-101.2c0-61.9 50.1-112 112-112l32 0c61.9 0 112 50.1 112 112z"/>
                                    </svg>
                                </span> Communities
                            </span>
                        </button>
                        <button data-section="merchants">
                            <span class="button-content">
                                <span class="svg-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" preserveAspectRatio="xMidYMid meet">
                                        <path d="M96 128a128 128 0 1 0 256 0A128 128 0 1 0 96 128zm94.5 200.2l18.6 31L175.8 483.1l-36-146.9c-2-8.1-9.8-13.4-17.9-11.3C51.9 342.4 0 405.8 0 481.3c0 17 13.8 30.7 30.7 30.7l131.7 0c0 0 0 0 .1 0l5.5 0 112 0 5.5 0c0 0 0 0 .1 0l131.7 0c17 0 30.7-13.8 30.7-30.7c0-75.5-51.9-138.9-121.9-156.4c-8.1-2-15.9 3.3-17.9 11.3l-36 146.9L238.9 359.2l18.6-31c6.4-10.7-1.3-24.2-13.7-24.2L224 304l-19.7 0c-12.4 0-20.1 13.6-13.7 24.2z"/>
                                    </svg>
                                </span> Merchants
                            </span>
                        </button>
                    </div>
                    <button data-submenu="testScripts" data-section="testScriptsIntro">
                        <span class="button-content"><i class="fas fa-flask"></i> Test Scripts</span>
                        <i class="fas fa-caret-right caret"></i>
                    </button>
                    <div id="testScripts" class="submenu">
                        <button data-href="/partner">
                            <span class="button-content">
                                <span class="icon-group">
                                    <span class="svg-icon">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
                                            <path d="M512 256c0 .9 0 1.8 0 2.7c-.4 36.5-33.6 61.3-70.1 61.3L344 320c-26.5 0-48 21.5-48 48c0 3.4 .4 6.7 1 9.9c2.1 10.2 6.5 20 10.8 29.9c6.1 13.8 12.1 27.5 12.1 42c0 31.8-21.6 60.7-53.4 62c-3.5 .1-7 .2-10.6 .2C114.6 512 0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM128 288a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm0-96a32 32 0 1 0 0-64 32 32 0 1 0 0 64zM288 96a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm96 96a32 32 0 1 0 0-64 32 32 0 1 0 0 64z"/>
                                        </svg>
                                    </span>
                                    <i class="fas fa-flask small-icon"></i>
                                </span> Partner
                            </span>
                        </button>
                        <button data-href="/community">
                            <span class="button-content">
                                <span class="icon-group">
                                    <span class="svg-icon">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" preserveAspectRatio="xMidYMid meet">
                                            <path d="M72 88a56 56 0 1 1 112 0A56 56 0 1 1 72 88zM64 245.7C54 256.9 48 271.8 48 288s6 31.1 16 42.3l0-84.7zm144.4-49.3C178.7 222.7 160 261.2 160 304c0 34.3 12 65.8 32 90.5l0 21.5c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-26.8C26.2 371.2 0 332.7 0 288c0-61.9 50.1-112 112-112l32 0c24 0 46.2 7.5 64.4 20.3zM448 416l0-21.5c20-24.7 32-56.2 32-90.5c0-42.8-18.7-81.3-48.4-107.7C449.8 183.5 472 176 496 176l32 0c61.9 0 112 50.1 112 112c0 44.7-26.2 83.2-64 101.2l0 26.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32zm8-328a56 56 0 1 1 112 0A56 56 0 1 1 456 88zM576 245.7l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM320 32a64 64 0 1 1 0 128 64 64 0 1 1 0-128zM240 304c0 16.2 6 31 16 42.3l0-84.7c-10 11.3-16 26.1-16 42.3zm144-42.3l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM448 304c0 44.7-26.2 83.2-64 101.2l0 42.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-42.8c-37.8-18-64-56.5-64-101.2c0-61.9 50.1-112 112-112l32 0c61.9 0 112 50.1 112 112z"/>
                                        </svg>
                                    </span>
                                    <i class="fas fa-flask small-icon"></i>
                                </span> Community
                            </span>
                        </button>
                        <button data-href="/merchant">
                            <span class="button-content">
                                <span class="icon-group">
                                    <span class="svg-icon">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" preserveAspectRatio="xMidYMid meet">
                                            <path d="M96 128a128 128 0 1 0 256 0A128 128 0 1 0 96 128zm94.5 200.2l18.6 31L175.8 483.1l-36-146.9c-2-8.1-9.8-13.4-17.9-11.3C51.9 342.4 0 405.8 0 481.3c0 17 13.8 30.7 30.7 30.7l131.7 0c0 0 0 0 .1 0l5.5 0 112 0 5.5 0c0 0 0 0 .1 0l131.7 0c17 0 30.7-13.8 30.7-30.7c0-75.5-51.9-138.9-121.9-156.4c-8.1-2-15.9 3.3-17.9 11.3l-36 146.9L238.9 359.2l18.6-31c6.4-10.7-1.3-24.2-13.7-24.2L224 304l-19.7 0c-12.4 0-20.1 13.6-13.7 24.2z"/>
                                        </svg>
                                    </span>
                                    <i class="fas fa-flask small-icon"></i>
                                </span> Merchant
                            </span>
                        </button>
                        <button data-submenu="referralTests" data-section="referralTestsIntro">
                            <span class="button-content"><i class="fas fa-link"></i> Referral Tests</span>
                            <i class="fas fa-caret-right caret"></i>
                        </button>
                        <div id="referralTests" class="submenu">
                            <button data-section="page_visit_test">
                                <span class="button-content"><i class="fas fa-eye"></i> Page Visit Referral Test</span>
                            </button>
                            <button data-section="order_test">
                                <span class="button-content"><i class="fas fa-shopping-cart"></i> Order Referral Test</span>
                            </button>
                        </div>
                    </div>
                    <button data-submenu="myAccountSubmenu" data-section="myAccountIntro">
                        <span class="button-content"><i class="fas fa-user"></i> My Account</span>
                        <i class="fas fa-caret-right caret"></i>
                    </button>
                    <div id="myAccountSubmenu" class="submenu">
                        <button data-section="contactDetails">
                            <span class="button-content"><i class="fas fa-address-book"></i> Contact Details</span>
                        </button>
                        <button data-section="changePassword">
                            <span class="button-content"><i class="fas fa-key"></i> Change Password</span>
                        </button>
                    </div>
                    <button id="logOffBtn" style="background-color: #dc3545;">
                        <span class="button-content"><i class="fas fa-sign-out-alt"></i> Log Off</span>
                    </button>
                </div>
            </div>
            <div class="content-wrapper">
                <div id="welcome" class="section">
                    <h2>Welcome to Admin Dashboard</h2>
                    <p>This is the main administration tool for managing your affiliate programs and deal listings.</p>
                    <p>Use the menu on the left to:</p>
                    <ul>
                        <li>View and filter discounted deals in "Deal Listings"</li>
                        <li>Manage affiliate credentials under "Affiliate Programs"</li>
                        <li>Manage users under "User Management"</li>
                        <li>Test referral tracking with "Test Scripts"</li>
                        <li>Update your account details in "My Account"</li>
                    </ul>
                </div>

                <div id="deal_listings" class="section">
                    <h2>Discounted Deal Listings</h2>
                    <p>This section displays all currently active deal listings available across your affiliate programs.</p>
                    <div style="display: flex; gap: 20px;">
                        <div style="flex: 1; max-width: 300px;">
                            <h3>Categories</h3>
                            <div class="treeview" id="categoryTree"></div>
                        </div>
                        <div style="flex: 2;">
                            <table class="deals-table">
                                <thead>
                                    <tr>
                                        <th>Category</th>
                                        <th>Title</th>
                                        <th>URL</th>
                                        <th>Price</th>
                                        <th>Original</th>
                                        <th>Discount %</th>
                                        <th>Image</th>
                                        <th>QTY</th>
                                    </tr>
                                </thead>
                                <tbody id="dealList"></tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div id="affiliateProgramsIntro" class="section">
                    <h2>Affiliate Programs</h2>
                    <p>Use this section to manage your affiliate program credentials.</p>
                    <p>Select an affiliate program from the menu to enter or update your API keys, access tokens, or other necessary credentials.</p>
                </div>

                <div id="amazon_uk" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" width="32" height="32" style="fill: currentColor; margin-right: 10px;">
                            <path d="M257.2 162.7c-48.7 1.8-169.5 15.5-169.5 117.5 0 109.5 138.3 114 183.5 43.2 6.5 10.2 35.4 37.5 45.3 46.8l56.8-56S341 288.9 341 261.4V114.3C341 89 316.5 32 228.7 32 140.7 32 94 87 94 136.3l73.5 6.8c16.3-49.5 54.2-49.5 54.2-49.5 40.7-.1 35.5 29.8 35.5 69.1zm0 86.8c0 80-84.2 68-84.2 17.2 0-47.2 50.5-56.7 84.2-57.8v40.6zm136 163.5c-7.7 10-70 67-174.5 67S34.2 408.5 9.7 379c-6.8-7.7 1-11.3 5.5-8.3C88.5 415.2 203 488.5 387.7 401c7.5-3.7 13.3 2 5.5 12zm39.8 2.2c-6.5 15.8-16 26.8-21.2 31-5.5 4.5-9.5 2.7-6.5-3.8s19.3-46.5 12.7-55c-6.5-8.3-37-4.3-48-3.2-10.8 1-13 2-14-.3-2.3-5.7 21.7-15.5 37.5-17.5 15.7-1.8 41-.8 46 5.7 3.7 5.1 0 27.1-6.5 43.1z"/>
                        </svg>
                        <h2>Amazon UK Credentials</h2>
                    </div>
                    <div class="form" style="margin: 0; max-width: 400px;">
                        <label for="amazonAccessKey">Access Key:</label>
                        <input type="text" id="amazonAccessKey" placeholder="Enter Access Key">
                        <label for="amazonSecretKey">Secret Key:</label>
                        <input type="text" id="amazonSecretKey" placeholder="Enter Secret Key">
                        <label for="amazonAssociateTag">Associate Tag:</label>
                        <input type="text" id="amazonAssociateTag" placeholder="Enter Associate Tag">
                        <label for="amazonCountry">Country:</label>
                        <input type="text" id="amazonCountry" placeholder="Enter Country (e.g., UK)">
                        <button data-affiliate="amazon_uk">Update Credentials</button>
                    </div>
                    <div class="signup-instructions">
                        <strong>Sign Up:</strong> Visit <a href="https://affiliate-program.amazon.com/" target="_blank">Amazon Associates</a>.
                    </div>
                </div>

                <div id="ebay_uk" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" width="32" height="32" style="fill: currentColor; margin-right: 10px;">
                            <path d="M606 189.5l-54.8 109.9-54.9-109.9h-37.5l10.9 20.6c-11.5-19-35.9-26-63.3-26-31.8 0-67.9 8.7-71.5 43.1h33.7c1.4-13.8 15.7-21.8 35-21.8 26 0 41 9.6 41 33v3.4c-12.7 0-28 .1-41.7 .4-42.4 .9-69.6 10-76.7 34.4 1-5.2 1.5-10.6 1.5-16.2 0-52.1-39.7-76.2-75.4-76.2-21.3 0-43 5.5-58.7 24.2v-80.6h-32.1v169.5c0 10.3-.6 22.9-1.1 33.1h31.5c.7-6.3 1.1-12.9 1.1-19.5 13.6 16.6 35.4 24.9 58.7 24.9 36.9 0 64.9-21.9 73.3-54.2-.5 2.8-.7 5.8-.7 9 0 24.1 21.1 45 60.6 45 26.6 0 45.8-5.7 61.9-25.5 0 6.6 .3 13.3 1.1 20.2h29.8c-.7-8.2-1-17.5-1-26.8v-65.6c0-9.3-1.7-17.2-4.8-23.8l61.5 116.1-28.5 54.1h35.9L640 189.5zM243.7 313.8c-29.6 0-50.2-21.5-50.2-53.8 0-32.4 20.6-53.8 50.2-53.8 29.8 0 50.2 21.4 50.2 53.8 0 32.3-20.4 53.8-50.2 53.8zm200.9-47.3c0 30-17.9 48.4-51.6 48.4-25.1 0-35-13.4-35-25.8 0-19.1 18.1-24.4 47.2-25.3 13.1-.5 27.6-.6 39.4-.6zm-411.9 1.6h128.8v-8.5c0-51.7-33.1-75.4-78.4-75.4-56.8 0-83 30.8-83 77.6 0 42.5 25.3 74 82.5 74 31.4 0 68-11.7 74.4-46.1h-33.1c-12 35.8-87.7 36.7-91.2-21.6zm95-21.4H33.3c6.9-56.6 92.1-54.7 94.4 0z"/>
                        </svg>
                        <h2>eBay UK Credentials</h2>
                    </div>
                    <div class="form" style="margin: 0; max-width: 400px;">
                        <label for="ebayAppId">App ID:</label>
                        <input type="text" id="ebayAppId" placeholder="Enter App ID">
                        <button data-affiliate="ebay_uk">Update Credentials</button>
                    </div>
                    <div class="signup-instructions">
                        <strong>Sign Up:</strong> Go to <a href="https://partnernetwork.ebay.com/" target="_blank">eBay Partner Network</a>.
                    </div>
                </div>

                <div id="awin" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fas fa-network-wired" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>Awin Credentials</h2>
                    </div>
                    <div class="form" style="margin: 0; max-width: 400px;">
                        <label for="awinApiToken">API Token:</label>
                        <input type="text" id="awinApiToken" placeholder="Enter API Token">
                        <button data-affiliate="awin">Update Credentials</button>
                    </div>
                    <div class="signup-instructions">
                        <strong>Sign Up:</strong> Visit <a href="https://www.awin.com/" target="_blank">Awin</a>.
                    </div>
                </div>

                <div id="cj" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fas fa-link" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>CJ Credentials</h2>
                    </div>
                    <div class="form" style="margin: 0; max-width: 400px;">
                        <label for="cjApiKey">API Key:</label>
                        <input type="text" id="cjApiKey" placeholder="Enter API Key">
                        <label for="cjWebsiteId">Website ID:</label>
                        <input type="text" id="cjWebsiteId" placeholder="Enter Website ID">
                        <button data-affiliate="cj">Update Credentials</button>
                    </div>
                    <div class="signup-instructions">
                        <strong>Sign Up:</strong> Go to <a href="https://www.cj.com/" target="_blank">CJ Affiliate</a>.
                    </div>
                </div>

                <div id="textmagic" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fas fa-sms" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>TextMagic Credentials</h2>
                    </div>
                    <div class="form" style="margin: 0; max-width: 400px;">
                        <label for="textmagicUsername">Username:</label>
                        <input type="text" id="textmagicUsername" placeholder="Enter Username">
                        <label for="textmagicApiKey">API Key:</label>
                        <input type="text" id="textmagicApiKey" placeholder="Enter API Key">
                        <button data-affiliate="textmagic">Update Credentials</button>
                    </div>
                    <div class="signup-instructions">
                        <strong>Sign Up:</strong> Visit <a href="https://www.textmagic.com/" target="_blank">TextMagic</a>.
                    </div>
                </div>

                <div id="tiny" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fas fa-pen" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>tiny Credentials</h2>
                    </div>
                    <div class="form" style="margin: 0; max-width: 400px;">
                        <label for="tinyApiKey">API Key:</label>
                        <input type="text" id="tinyApiKey" placeholder="Enter API Key">
                        <button data-affiliate="tiny">Update Credentials</button>
                    </div>
                    <div class="signup-instructions">
                        <strong>Sign Up:</strong> Visit <a href="https://www.tiny.cloud/" target="_blank">tiny</a>.
                    </div>
                </div>

                <div id="userManagementIntro" class="section">
                    <h2>User Management</h2>
                    <p>This section allows you to manage different types of users in your system.</p>
                    <p>Select a user type from the menu to view their details or modify their permissions:</p>
                    <ul>
                        <li><strong>Partners:</strong> Manage users with Partner permissions.</li>
                        <li><strong>Communities:</strong> Manage community users.</li>
                        <li><strong>Merchants:</strong> Manage merchant users.</li>
                    </ul>
                </div>

                <div id="merchants" class="section">
                    <h2>Merchant Management</h2>
                    <table>
                        <thead>
                            <tr>
                                <th>USERid</th>
                                <th>Contact Name</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="merchantsList">
                            <!-- Dynamically populated by updateUserTable -->
                        </tbody>
                    </table>
                </div>

                <div id="communities" class="section">
                    <h2>Communities Management</h2>
                    <table>
                        <thead>
                            <tr>
                                <th>USERid</th>
                                <th>Contact Name</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="communitiesList">
                            <!-- Dynamically populated by updateUserTable -->
                        </tbody>
                    </table>
                </div>

                <div id="partners" class="section">
                    <h2>Partner Management</h2>
                    <table>
                        <thead>
                            <tr>
                                <th>USERid</th>
                                <th>Contact Name</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="partnersList">
                            <!-- Dynamically populated by updateUserTable -->
                        </tbody>
                    </table>
                </div>

                <div id="testScriptsIntro" class="section">
                    <h2>Test Scripts</h2>
                    <p>Use this section to test referral tracking and other scripts.</p>
                    <p>Select an option from the menu to visit endpoints or run referral tests under "Referral Tests."</p>
                </div>

                <div id="referralTestsIntro" class="section">
                    <h2>Referral Tests</h2>
                    <p>This section contains tools to test referral tracking functionality.</p>
                    <p>Choose "Page Visit Referral Test" or "Order Referral Test" to submit test data and verify tracking behavior.</p>
                </div>

                <div id="page_visit_test" class="section">
                    <h2>Page Visit Referral Test</h2>
                    <div class="form">
                        <form id="pageVisitForm">
                            <table>
                                <tr><td><label for="pageReferer">Referer:</label></td><td><select id="pageReferer" name="referer"></select></td></tr>
                                <tr><td><label for="page">Page:</label></td><td><input type="text" id="page" name="page" value="/home"></td></tr>
                                <tr><td><label for="pageTimestamp">Timestamp:</label></td><td><input type="text" id="pageTimestamp" name="timestamp"></td></tr>
                                <tr><td colspan="2"><button type="submit">Submit Page Visit</button></td></tr>
                            </table>
                        </form>
                    </div>
                </div>

                <div id="order_test" class="section">
                    <h2>Order Referral Test</h2>
                    <div class="form">
                        <form id="orderForm">
                            <table>
                                <tr><td><label for="orderReferer">Referer:</label></td><td><select id="orderReferer" name="referer"></select></td></tr>
                                <tr><td><label for="orderId">Order ID:</label></td><td><input type="text" id="orderId" name="orderId" value="ORD12345"></td></tr>
                                <tr><td><label for="buyer">Buyer Name:</label></td><td><input type="text" id="buyer" name="buyer" value="John Doe"></td></tr>
                                <tr><td><label for="total">Total Amount (£):</label></td><td><input type="number" id="total" name="total" value="99.99" step="0.01"></td></tr>
                                <tr><td><label for="orderTimestamp">Timestamp:</label></td><td><input type="text" id="orderTimestamp" name="timestamp"></td></tr>
                                <tr><td colspan="2"><button type="submit">Submit Order</button></td></tr>
                            </table>
                        </form>
                    </div>
                </div>

                <div id="myAccountIntro" class="section">
                    <h2>My Account</h2>
                    <p>Welcome to your account settings. Here, you can manage your personal information and update your password for security.</p>
                    <p>Use the options below to navigate to the desired section:</p>
                </div>

                <div id="contactDetails" class="section">
                    <h2>Contact Details</h2>
                    <div class="settings-form">
                        <label><strong>User ID:</strong></label>
                        <input type="text" id="userId" readonly>
                        <label for="contactName">Contact Name:</label>
                        <input type="text" id="contactName" placeholder="Enter contact name">
                        <label for="websiteUrl">Website URL:</label>
                        <input type="url" id="websiteUrl" placeholder="Enter website URL">
                        <label for="emailAddress">Email Address:</label>
                        <input type="email" id="emailAddress" placeholder="Enter email address">
                        <label><strong>Phone Number:</strong></label>
                        <span>{{ user.phone_number | default('N/A') }}</span>
                        <button data-action="saveSettings"><i class="fas fa-save"></i> Save Settings</button>
                    </div>
                </div>

                <div id="changePassword" class="section">
                    <h2>Change Password</h2>
                    <div class="settings-form">
                        <div class="password-container">
                            <label for="currentPassword">Current Password:</label>
                            <input type="password" id="currentPassword" name="currentPassword" placeholder="Enter current password">
                            <i class="fas fa-eye password-toggle" data-target="currentPassword"></i>
                        </div>
                        <div class="password-container">
                            <label for="newPassword">New Password:</label>
                            <input type="password" id="newPassword" name="newPassword" placeholder="Enter new password">
                            <i class="fas fa-eye password-toggle" data-target="newPassword"></i>
                        </div>
                        <div class="password-container">
                            <label for="confirmPassword">Confirm New Password:</label>
                            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password">
                            <i class="fas fa-eye password-toggle" data-target="confirmPassword"></i>
                        </div>
                        <button data-action="savePassword"><i class="fas fa-key"></i> Change Password</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/static/js/site-auth.js"></script>
    <script src="/static/js/site-navigation.js"></script>
    <script src="/static/js/category-management.js"></script>
    <script src="/static/js/site-request.js"></script>
    <script src="/static/js/page-load.js"></script>
    <script src="/static/js/admin-page.js"></script>
    <script>
        // Wait for the initialize function to become available
        function waitForInitialize(attempts = 50, delay = 100) {
            if (typeof window.initialize === 'function') {
                console.log('Initialize function found, calling initialize("admin")');
                window.initialize('admin');
            } else if (attempts > 0) {
                console.log(`Initialize function not found, retrying (${attempts} attempts left)...`);
                setTimeout(() => waitForInitialize(attempts - 1, delay), delay);
            } else {
                console.error('Initialize function not found after maximum retries');
            }
        }
        waitForInitialize();
    </script>
</body>
</html>
templates/community.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Community</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="/static/styles.css">
    <script src="https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <div class="header-content" id="brandingContent"></div>
        </div>
        <div class="main-container">
            <div class="menu-container">
                <div class="menu">
                    <button data-section="welcome">
                        <span class="button-content"><i class="fas fa-home"></i> Dashboard</span>
                    </button>
                    <button data-submenu="my_website_intro" data-section="my_website_intro">
                        <span class="button-content"><i class="fas fa-globe"></i> My Web Site</span>
                        <i class="fas fa-caret-right caret"></i>
                    </button>
                    <div id="my_website_intro" class="submenu">
                        <button data-section="wix">
                            <span class="button-content"><i class="fab fa-wix-simple"></i> Wix</span>
                        </button>
                        <button data-section="wordpress">
                            <span class="button-content"><i class="fab fa-wordpress"></i> WordPress</span>
                        </button>
                        <button data-section="squarespace">
                            <span class="button-content"><i class="fab fa-squarespace"></i> Squarespace</span>
                        </button>
                        <button data-section="weebly">
                            <span class="button-content"><i class="fab fa-weebly"></i> Weebly</span>
                        </button>
                        <button data-section="joomla">
                            <span class="button-content"><i class="fab fa-joomla"></i> Joomla</span>
                        </button>
                        <button data-section="no_website">
                            <span class="button-content"><i class="fas fa-question-circle"></i> I Don’t Have a Website Yet</span>
                        </button>
                    </div>
                    <button data-section="categories">
                        <span class="button-content"><i class="fas fa-list"></i> My Categories</span>
                    </button>
                    <button data-submenu="referrals_intro" data-section="referrals_intro">
                        <span class="button-content">
                            <span class="svg-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" preserveAspectRatio="xMidYMid meet">
                                    <path d="M72 88a56 56 0 1 1 112 0A56 56 0 1 1 72 88zM64 245.7C54 256.9 48 271.8 48 288s6 31.1 16 42.3l0-84.7zm144.4-49.3C178.7 222.7 160 261.2 160 304c0 34.3 12 65.8 32 90.5l0 21.5c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-26.8C26.2 371.2 0 332.7 0 288c0-61.9 50.1-112 112-112l32 0c24 0 46.2 7.5 64.4 20.3zM448 416l0-21.5c20-24.7 32-56.2 32-90.5c0-42.8-18.7-81.3-48.4-107.7C449.8 183.5 472 176 496 176l32 0c61.9 0 112 50.1 112 112c0 44.7-26.2 83.2-64 101.2l0 26.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32zm8-328a56 56 0 1 1 112 0A56 56 0 1 1 456 88zM576 245.7l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM320 32a64 64 0 1 1 0 128 64 64 0 1 1 0-128zM240 304c0 16.2 6 31 16 42.3l0-84.7c-10 11.3-16 26.1-16 42.3zm144-42.3l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM448 304c0 44.7-26.2 83.2-64 101.2l0 42.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-42.8c-37.8-18-64-56.5-64-101.2c0-61.9 50.1-112 112-112l32 0c61.9 0 112 50.1 112 112z"/>
                                </svg>
                            </span> My Referrals
                        </span>
                        <i class="fas fa-caret-right caret"></i>
                    </button>
                    <div id="referrals_intro" class="submenu">
                        <button data-section="visits">
                            <span class="button-content"><i class="fas fa-eye"></i> Visits</span>
                        </button>
                        <button data-section="orders">
                            <span class="button-content"><i class="fas fa-shopping-cart"></i> Orders</span>
                        </button>
                    </div>
                    <button data-section="settings">
                        <span class="button-content"><i class="fas fa-cog"></i> My Account</span>
                    </button>
                    <button id="logOffBtn" style="background-color: #dc3545;">
                        <span class="button-content"><i class="fas fa-sign-out-alt"></i> Log Off</span>
                    </button>
                </div>
            </div>
            <div class="content-wrapper">
                <div id="welcome" class="section active">
                    <h2>Welcome to Your Community Dashboard</h2>
                    <p>Welcome! This dashboard is your hub for managing your community account and tracking referrals.</p>
                    <p>Use the menu on the left to:</p>
                    <ul>
                        <li>Learn how to add discounts to your website or request a site under "My Web Site"</li>
                        <li>Select product categories for your site in "My Categories"</li>
                        <li>View referral statistics under "My Referrals"</li>
                        <li>Update your account details in "My Account"</li>
                    </ul>
                </div>
                {% include 'my_account.html' with user_type='community' %}
                <div id="categories" class="section">
                    <h2>My Categories</h2>
                    <p>This section lets you choose which product categories will appear on your website's "Community Discounts" page.</p>
                    <div class="treeview" id="categoryTree"></div>
                </div>
                <div id="referrals_intro" class="section">
                    <h2>My Referrals</h2>
                    <p>This section allows you to track your referral activity.</p>
                    <p>Select from the submenu options:</p>
                    <ul>
                        <li><strong>Visits:</strong> View pages visited through your referral links.</li>
                        <li><strong>Orders:</strong> See orders placed via your referrals.</li>
                    </ul>
                </div>
                <div id="visits" class="section">
                    <h2>Visits</h2>
                    <div class="toggle-section" data-toggle="visits_this_month"><i class="fas fa-calendar-day"></i> This Month</div>
                    <div id="visits_this_month" class="toggle-content open">
                        <table id="visitsTableThisMonth">
                            <thead><tr><th>Page</th><th>Timestamp</th></tr></thead>
                            <tbody id="visitsListThisMonth"></tbody>
                        </table>
                    </div>
                    <div class="toggle-section" data-toggle="visits_last_month"><i class="fas fa-calendar-alt"></i> Last Month</div>
                    <div id="visits_last_month" class="toggle-content">
                        <table id="visitsTableLastMonth">
                            <thead><tr><th>Page</th><th>Timestamp</th></tr></thead>
                            <tbody id="visitsListLastMonth"></tbody>
                        </table>
                    </div>
                    <div class="toggle-section" data-toggle="visits_earlier"><i class="fas fa-history"></i> Earlier</div>
                    <div id="visits_earlier" class="toggle-content">
                        <table id="visitsTableEarlier">
                            <thead><tr><th>Page</th><th>Timestamp</th></tr></thead>
                            <tbody id="visitsListEarlier"></tbody>
                        </table>
                    </div>
                </div>
                <div id="orders" class="section">
                    <h2>Orders</h2>
                    <div class="toggle-section" data-toggle="orders_this_month"><i class="fas fa-calendar-day"></i> This Month</div>
                    <div id="orders_this_month" class="toggle-content open">
                        <table id="ordersTableThisMonth">
                            <thead><tr><th>Order ID</th><th>Buyer</th><th>Total</th><th>Timestamp</th></tr></thead>
                            <tbody id="ordersListThisMonth"></tbody>
                        </table>
                    </div>
                    <div class="toggle-section" data-toggle="orders_last_month"><i class="fas fa-calendar-alt"></i> Last Month</div>
                    <div id="orders_last_month" class="toggle-content">
                        <table id="ordersTableLastMonth">
                            <thead><tr><th>Order ID</th><th>Buyer</th><th>Total</th><th>Timestamp</th></tr></thead>
                            <tbody id="ordersListLastMonth"></tbody>
                        </table>
                    </div>
                    <div class="toggle-section" data-toggle="orders_earlier"><i class="fas fa-history"></i> Earlier</div>
                    <div id="orders_earlier" class="toggle-content">
                        <table id="ordersTableEarlier">
                            <thead><tr><th>Order ID</th><th>Buyer</th><th>Total</th><th>Timestamp</th></tr></thead>
                            <tbody id="ordersListEarlier"></tbody>
                        </table>
                    </div>
                </div>
                <div id="my_website_intro" class="section">
                    <h2>My Web Site</h2>
                    <p>Welcome to the "My Web Site" section! Here, you can learn how to integrate discounts into your community website.</p>
                    <ul>
                        <li><strong>Wix:</strong> Easy drag-and-drop builder.</li>
                        <li><strong>WordPress:</strong> Flexible CMS.</li>
                        <li><strong>Squarespace:</strong> Stylish solution.</li>
                        <li><strong>Weebly:</strong> Simple builder.</li>
                        <li><strong>Joomla:</strong> Robust CMS.</li>
                        <li><strong>I Don’t Have a Website Yet:</strong> Request a site setup.</li>
                    </ul>
                </div>
                <div id="wix" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" style="height: 32px; width: auto; margin-right: 10px;">
                            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
                            <path d="M393.4 131.7c0 13 2.1 32.7-28.7 43.8-9.5 3.5-16 9.7-16 9.7 0-31 4.7-42.2 17.4-48.9 9.8-5.1 27.2-4.6 27.2-4.6zm-115.8 35.5l-34.2 132.7-28.5-108.6c-7.7-32-20.8-48.5-48.4-48.5-27.4 0-40.7 16.2-48.4 48.5L89.5 299.9 55.3 167.2C49.7 140.5 23.9 129 0 132l65.6 247.9s21.6 1.6 32.5-4c14.2-7.3 21-12.8 29.6-46.6 7.7-30.1 29.1-118.4 31.1-124.7 4.8-14.9 11.1-13.8 15.4 0 2 6.3 23.5 94.6 31.1 124.7 8.6 33.7 15.4 39.3 29.6 46.6 10.8 5.5 32.5 4 32.5 4l65.6-247.9c-24.4-3.1-49.8 8.9-55.3 35.3zm115.8 5.2s-4.1 6.3-13.5 11.6c-6 3.4-11.8 5.6-18 8.6-15.1 7.3-13.2 14-13.2 35.2v152.1s16.6 2.1 27.4-3.4c13.9-7.1 17.1-14 17.3-44.8V181.4l0 0v-9zm163.4 84.1L640 132.8s-35.1-6-52.5 9.9c-13.3 12.1-24.4 29.6-54.2 72.5-.5 .7-6.3 10.5-13.1 0-29.3-42.2-40.8-60.3-54.2-72.5-17.4-15.8-52.5-9.9-52.5-9.9l83.2 123.7-83 123.4s36.6 4.6 54-11.2c11.5-10.5 17.6-20.4 52.5-70.7 6.8-10.5 12.6-.8 13.1 0 29.4 42.4 39.2 58.1 53.1 70.7 17.4 15.8 53.3 11.2 53.3 11.2L556.8 256.5z"/>
                        </svg>
                        <h2>Wix Integration</h2>
                    </div>
                    <p>Add discounts to your Wix site:</p>
                    <ol>
                        <li>Log in to Wix and open the Editor.</li>
                        <li>Click "+" > "Embed" > "Embed a Widget".</li>
                        <li>Paste: <code id="wixCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                        <li>Publish.</li>
                    </ol>
                </div>
                <div id="wordpress" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fab fa-wordpress" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>WordPress Integration</h2>
                    </div>
                    <p>Add discounts to WordPress:</p>
                    <ol>
                        <li>Log in to WordPress admin.</li>
                        <li>Go to "Pages" > "Add New".</li>
                        <li>Add "Custom HTML" block: <code id="wordpressCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                        <li>Publish.</li>
                    </ol>
                </div>
                <div id="squarespace" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fab fa-squarespace" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>Squarespace Integration</h2>
                    </div>
                    <p>Integrate discounts into Squarespace:</p>
                    <ol>
                        <li>Log in to Squarespace editor.</li>
                        <li>Add a new page.</li>
                        <li>Add "Code" block: <code id="squarespaceCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                        <li>Update site.</li>
                    </ol>
                </div>
                <div id="weebly" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fab fa-weebly" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>Weebly Integration</h2>
                    </div>
                    <p>Add discounts to Weebly:</p>
                    <ol>
                        <li>Log in to Weebly editor.</li>
                        <li>Drag "Embed Code" onto page.</li>
                        <li>Paste: <code id="weeblyCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                        <li>Publish.</li>
                    </ol>
                </div>
                <div id="joomla" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fab fa-joomla" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>Joomla Integration</h2>
                    </div>
                    <p>Integrate discounts into Joomla:</p>
                    <ol>
                        <li>Log in to Joomla admin.</li>
                        <li>Go to "Content" > "Articles" > "Add New".</li>
                        <li>Paste in "Code" view: <code id="joomlaCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                        <li>Save.</li>
                    </ol>
                </div>
                <div id="no_website" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fas fa-question-circle" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>I Don’t Have a Website Yet</h2>
                    </div>
                    <p>Request a custom Wix website for your community from our Wix Professionals. Fill out the form below to specify your needs:</p>
                    <form id="siteRequestForm" class="settings-form">
                        <label for="communityName">Community Name:</label>
                        <input type="text" id="communityName" name="communityName" placeholder="Enter your community name" required>
                        <label for="aboutCommunity">About Our Community:</label>
                        <textarea id="aboutCommunity" name="aboutCommunity" placeholder="Tell us about your community"></textarea>
                        <label for="communityLogos">Community Logos:</label>
                        <input type="file" id="communityLogos" name="communityLogos" accept="image/*" multiple>
                        <small>Upload up to 5 logos (e.g., main logo, secondary logos).</small>
                        <label for="colorPrefs">Color Preferences:</label>
                        <input type="text" id="colorPrefs" name="colorPrefs" placeholder="e.g., #FF5733, Blue">
                        <label for="stylingDetails">Styling Details:</label>
                        <textarea id="stylingDetails" name="stylingDetails" rows="4" placeholder="e.g., modern layout, bold fonts"></textarea>
                        <label for="preferredDomain">Preferred Domain Name:</label>
                        <input type="text" id="preferredDomain" name="preferredDomain" placeholder="e.g., mycommunity.org" oninput="updateEmailDomains()">
                        <button type="button" data-action="checkDomainAvailability"><i class="fas fa-search"></i> Check Availability</button>
                        <label>Email Addresses to Set Up (up to 5):</label>
                        <div id="emailsContainer">
                            <div class="email-section" data-email="1">
                                <label for="email1Name">Email Name:</label>
                                <input type="text" id="email1Name" name="email1Name" placeholder="e.g., info">
                                <span id="email1Domain">@mycommunity.org</span>
                            </div>
                        </div>
                        <button type="button" data-action="addEmail"><i class="fas fa-plus"></i> Add Another Email</button>
                        <label>Requested Pages (up to 5):</label>
                        <div id="pagesContainer">
                            <div class="page-section" data-page="1">
                                <label for="page1Name">Page Name:</label>
                                <input type="text" id="page1Name" name="page1Name" value="Home">
                                <br><br>
                                <label for="page1Content">Page Content:</label>
                                <textarea id="page1Content" name="page1Content" placeholder="Describe this page"></textarea>
                                <label for="page1Images">Additional Images:</label>
                                <input type="file" id="page1Images" name="page1Images" accept="image/*" multiple>
                            </div>
                        </div>
                        <button type="button" data-action="addPage"><i class="fas fa-plus"></i> Add Another Page</button>
                        <label>Wix Widgets:</label>
                        <div class="widget-checkboxes">
                            <div><label><input type="checkbox" name="widgets" value="events"> Events</label> - Add an events calendar.</div>
                            <div><label><input type="checkbox" name="widgets" value="socialMediaFeeds"> Social Media Feeds</label> - Display live social media feeds.</div>
                            <div><label><input type="checkbox" name="widgets" value="gallery"> Gallery</label> - Showcase photos.</div>
                            <div><label><input type="checkbox" name="widgets" value="contactForm"> Contact Form</label> - Simple contact form.</div>
                            <div><label><input type="checkbox" name="widgets" value="blog"> Blog</label> - Share updates and stories.</div>
                            <div><label><input type="checkbox" name="widgets" value="weather"> Weather</label> - Show real-time weather.</div>
                            <div><label><input type="checkbox" name="widgets" value="socialMediaLinks"> Social Media Links</label> - Quick links to profiles.</div>
                        </div>
                        <button type="button" data-action="saveSiteRequest"><i class="fas fa-paper-plane"></i> Submit Request</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="/static/js/site-auth.js"></script>
    <script src="/static/js/site-navigation.js"></script>
    <script src="/static/js/category-management.js"></script>
    <script src="/static/js/site-request.js"></script>
    <script src="/static/js/page-load.js"></script>
    <script src="/static/js/community-page.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            tinymce.init({
                selector: '#aboutCommunity, #stylingDetails, #page1Content',
                inline: true,
                menubar: false,
                toolbar: 'bold italic | bullist numlist | link',
                plugins: 'lists link',
                setup: (editor) => {
                    editor.on('init', () => {
                        console.log('TinyMCE initialized for:', editor.id);
                    });
                }
            });
        });

        function waitForInitialize(attempts = 50, delay = 100) {
            if (typeof window.initialize === 'function') {
                console.log('Initialize function found, calling initialize("community")');
                window.initialize('community');
            } else if (attempts > 0) {
                console.log(`Initialize function not found, retrying (${attempts} attempts left)...`);
                setTimeout(() => waitForInitialize(attempts - 1, delay), delay);
            } else {
                console.error('Initialize function not found after maximum retries');
            }
        }
        waitForInitialize();
    </script>
</body>
</html>
templates/login.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Login</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body class="login-page">
    <div id="loadingOverlay" style="display: none;">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <div class="button-container">
                <button type="submit">Login</button>
            </div>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container" id="forgotPasswordContainer" style="display: none;">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container" id="verifyOtpContainer" style="display: none;">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="/static/js/site-auth.js"></script>
    <script>
        const apiUrl = window.location.origin;

        toastr.options = {
            closeButton: true,
            progressBar: true,
            positionClass: 'toast-top-right',
            timeOut: 5000,
            showMethod: 'slideDown',
            hideMethod: 'slideUp'
        };

        function showLoadingOverlay() {
            let overlay = document.getElementById('loadingOverlay');
            if (!overlay) {
                overlay = document.createElement('div');
                overlay.id = 'loadingOverlay';
                overlay.innerHTML = `
                    <div class="multicircle-loader">
                        <div class="circle circle1"></div>
                        <div class="circle circle2"></div>
                        <div class="circle circle3"></div>
                        <div class="circle circle4"></div>
                    </div>
                `;
                document.body.appendChild(overlay);
            }
            overlay.style.display = 'flex';
            return overlay;
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.style.display = 'none';
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            if (loginContainer) {
                loginContainer.style.display = 'block';
                document.getElementById('forgotPasswordContainer').style.display = 'none';
                document.getElementById('verifyOtpContainer').style.display = 'none';
                hideLoadingOverlay();
            }
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').style.display = 'none';
            document.getElementById('forgotPasswordContainer').style.display = 'block';
            document.getElementById('verifyOtpContainer').style.display = 'none';
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').style.display = 'none';
            document.getElementById('forgotPasswordContainer').style.display = 'none';
            document.getElementById('verifyOtpContainer').style.display = 'block';
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                if (input.type === 'password') {
                    input.type = 'text';
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                } else {
                    input.type = 'password';
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                }
            });
        });

        async function fetchProtectedPage(url) {
            const token = localStorage.getItem('authToken');
            if (!token) {
                toastr.error('No authentication token found. Please log in.');
                showLogin();
                return;
            }

            const overlay = showLoadingOverlay();
            try {
                const response = await fetch(`${apiUrl}${url}`, {
                    method: 'GET',
                    headers: { 'Authorization': `Bearer ${token}`, 'Accept': 'text/html' }
                });
                if (!response.ok) throw new Error(`Server returned ${response.status}: ${await response.text()}`);
                const html = await response.text();
                document.documentElement.innerHTML = html;

                if (!document.getElementById('loadingOverlay')) {
                    const newOverlay = document.createElement('div');
                    newOverlay.id = 'loadingOverlay';
                    newOverlay.innerHTML = overlay.innerHTML;
                    newOverlay.style.display = 'flex';
                    document.body.prepend(newOverlay);
                }

                const head = document.head;
                const requiredStyles = [
                    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css',
                    'https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css',
                    '/static/styles.css'
                ];
                requiredStyles.forEach(href => {
                    if (!head.querySelector(`link[href="${href}"]`)) {
                        const link = document.createElement('link');
                        link.rel = 'stylesheet';
                        link.href = href;
                        head.appendChild(link);
                    }
                });

                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const scripts = doc.querySelectorAll('script');
                const scriptPromises = [];
                scripts.forEach(script => {
                    if (script.src) {
                        const newScript = document.createElement('script');
                        newScript.src = script.src;
                        newScript.async = false;
                        scriptPromises.push(new Promise(resolve => {
                            newScript.onload = resolve;
                            newScript.onerror = () => console.error(`Failed to load script: ${script.src}`);
                            document.head.appendChild(newScript);
                        }));
                    } else if (script.innerHTML.trim()) {
                        try { (new Function(script.innerHTML))(); } catch (e) { console.error('Error executing inline script:', e); }
                    }
                });

                await Promise.all(scriptPromises);
                setTimeout(() => {
                    const layoutWrapper = document.querySelector('.layout-wrapper');
                    if (layoutWrapper) layoutWrapper.style.display = 'block';
                    else toastr.error('Failed to load page content');
                    hideLoadingOverlay();
                }, 1000);
            } catch (error) {
                toastr.error(error.message || 'Failed to load protected page');
                showLogin();
                hideLoadingOverlay();
            }
        }

        function redirectBasedOnPermissions() {
            const token = localStorage.getItem('authToken');
            if (!token) return false;

            let decoded;
            try { decoded = decodeJWT(token); } catch (e) {
                toastr.error('Invalid token format. Please log in again.');
                localStorage.removeItem('authToken');
                return false;
            }

            if (!decoded || !decoded.permissions) {
                localStorage.removeItem('authToken');
                return false;
            }

            const permissions = decoded.permissions;
            let redirectPath;
            if (permissions.includes('admin')) redirectPath = '/admin';
            else if (permissions.includes('wixpro')) redirectPath = '/partner';
            else if (permissions.includes('merchant')) redirectPath = '/merchant';
            else if (permissions.includes('community')) redirectPath = '/community';
            else redirectPath = '/';

            if (window.location.pathname !== redirectPath) {
                fetchProtectedPage(redirectPath);
                return true;
            }
            return false;
        }

        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value.trim();
            const password = document.getElementById('loginPassword').value;

            showLoadingOverlay();
            try {
                const response = await fetch(`${apiUrl}/login`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                    body: JSON.stringify({ email, password })
                });
                if (!response.ok) throw new Error((await response.json()).message || `Login failed with status ${response.status}`);

                const data = await response.json();
                if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                localStorage.setItem('authToken', data.token);
                if (data.userId) localStorage.setItem('userId', data.userId);

                const decoded = decodeJWT(data.token);
                const permissions = decoded.permissions || [];
                const needsVerification = (permissions.includes('merchant') || permissions.includes('community')) && !permissions.includes('verified');

                if (needsVerification) {
                    const otpResponse = await fetch(`${apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const otpData = await otpResponse.json();
                    if (!otpResponse.ok) throw new Error(otpData.message || 'Failed to send OTP');

                    toastr.success('OTP sent to your phone. Please enter it below.');
                    const loginContainer = document.getElementById('loginContainer');
                    loginContainer.innerHTML = `
                        <h2>Verify OTP</h2>
                        <form id="loginOtpForm">
                            <div class="form-group">
                                <label for="loginOtp">One-Time Password:</label>
                                <input type="text" id="loginOtp" name="otp" placeholder="Enter OTP" required>
                            </div>
                            <button type="submit">Verify OTP</button>
                        </form>
                    `;
                    hideLoadingOverlay();

                    document.getElementById('loginOtpForm').addEventListener('submit', async (e) => {
                        e.preventDefault();
                        const otp = document.getElementById('loginOtp').value.trim();
                        if (!otp) {
                            toastr.error('Please enter the OTP.');
                            return;
                        }

                        showLoadingOverlay();
                        const verifyResponse = await fetch(`${apiUrl}/verify-reset-code`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ email, code: otp, new_password: password })
                        });
                        const verifyData = await verifyResponse.json();
                        if (!verifyResponse.ok) throw new Error(verifyData.message || 'OTP verification failed');

                        localStorage.setItem('authToken', verifyData.token);
                        toastr.success('Verification successful! Redirecting...');
                        redirectBasedOnPermissions();
                    });
                } else {
                    toastr.success(`Welcome back, ${data.contact_name || 'User'}!`);
                    redirectBasedOnPermissions();
                }
            } catch (error) {
                toastr.error(error.message || 'Unable to connect to server.');
                hideLoadingOverlay();
            }
        });

        document.getElementById('forgotPasswordForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const email = document.getElementById('forgotEmail').value.trim();

            showLoadingOverlay();
            try {
                const response = await fetch(`${apiUrl}/reset-password`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email })
                });
                const data = await response.json();
                if (!response.ok) throw new Error(data.message || 'Reset request failed');

                toastr.success('A one-time password has been sent to your phone.');
                showVerifyOtp(email);
            } catch (error) {
                toastr.error(error.message || 'Error sending OTP');
                hideLoadingOverlay();
            }
        });

        document.getElementById('verifyOtpForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const email = document.getElementById('verifyEmail').value.trim();
            const code = document.getElementById('otpCode').value.trim();
            const newPassword = document.getElementById('newPassword').value;
            const confirmNewPassword = document.getElementById('confirmNewPassword').value;

            const passwordRegex = /^(?=.*\d).{8,}$/;
            if (!passwordRegex.test(newPassword)) {
                toastr.error('New password must be at least 8 characters long and include numbers');
                return;
            }
            if (newPassword !== confirmNewPassword) {
                toastr.error('New password and confirmation do not match');
                return;
            }

            showLoadingOverlay();
            try {
                const response = await fetch(`${apiUrl}/verify-reset-code`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email, code, new_password: newPassword })
                });
                const data = await response.json();
                if (!response.ok) throw new Error(data.message || 'Verification failed');

                toastr.success('Password updated successfully!');
                showLogin();
            } catch (error) {
                toastr.error(error.message || 'Error verifying OTP');
                hideLoadingOverlay();
            }
        });
    </script>
</body>
</html>
templates/merchant.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Merchant</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="/static/styles.css">
    <script src="https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <!-- Define window.apiUrl before loading scripts -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <div class="header-content" id="brandingContent">
                <!-- Branding content will be loaded here -->
            </div>
        </div>
        <div class="main-container">
            <div class="menu-container">
                <div class="menu">
                    <button data-section="my-products">
                        <span class="button-content"><i class="fas fa-box-open"></i> My Products</span>
                    </button>
                    <button data-section="my-store">
                        <span class="button-content"><i class="fas fa-store"></i> My Store</span>
                    </button>
                    <button data-section="wix-keys">
                        <span class="button-content"><i class="fab fa-wix-simple"></i> Wix Keys</span>
                    </button>
                    <button data-section="my-account">
                        <span class="button-content"><i class="fas fa-cog"></i> My Account</span>
                    </button>
                    <button data-href="/admin">
                        <span class="button-content"><i class="fas fa-arrow-left"></i> Back to Admin</span>
                    </button>
                    <button id="logOffBtn" style="background-color: #dc3545;">
                        <span class="button-content"><i class="fas fa-sign-out-alt"></i> Log Off</span>
                    </button>
                </div>
            </div>
            <div class="content-wrapper">
                <div id="welcome" class="section">
                    <h2>Welcome to Your Merchant Dashboard</h2>
                    <p>This dashboard allows you to link the parts on your Wix site to a network of community groups, who show relevant discounted products on their websites from clubmadeira.io.</p>
                </div>
                <div id="info" class="section">
                    <h2>Merchant Info</h2>
                    <p>Welcome to your merchant dashboard overview. Use the menu to manage products, your store, Wix integration, and account settings.</p>
                </div>
                {% include 'my_account.html' with user_type='merchant' %}
                <div id="my-products" class="section">
                    <h2>My Products</h2>
                    <p>These are the products from your parts feed.</p>
                    <table id="productTable">
                        <thead>
                            <tr><th class="hidden">ID</th><th>Category</th><th>Title</th><th>URL</th><th>Price</th><th>Original</th><th>Image</th><th>QTY</th></tr>
                        </thead>
                        <tbody id="productList"></tbody>
                    </table>
                </div>
                <div id="wix-keys" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" style="height: 32px; width: auto; margin-right: 10px;">
                            <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
                            <path d="M393.4 131.7c0 13 2.1 32.7-28.7 43.8-9.5 3.5-16 9.7-16 9.7 0-31 4.7-42.2 17.4-48.9 9.8-5.1 27.2-4.6 27.2-4.6zm-115.8 35.5l-34.2 132.7-28.5-108.6c-7.7-32-20.8-48.5-48.4-48.5-27.4 0-40.7 16.2-48.4 48.5L89.5 299.9 55.3 167.2C49.7 140.5 23.9 129 0 132l65.6 247.9s21.6 1.6 32.5-4c14.2-7.3 21-12.8 29.6-46.6 7.7-30.1 29.1-118.4 31.1-124.7 4.8-14.9 11.1-13.8 15.4 0 2 6.3 23.5 94.6 31.1 124.7 8.6 33.7 15.4 39.3 29.6 46.6 10.8 5.5 32.5 4 32.5 4l65.6-247.9c-24.4-3.1-49.8 8.9-55.3 35.3zm115.8 5.2s-4.1 6.3-13.5 11.6c-6 3.4-11.8 5.6-18 8.6-15.1 7.3-13.2 14-13.2 35.2v152.1s16.6 2.1 27.4-3.4c13.9-7.1 17.1-14 17.3-44.8V181.4l0 0v-9zm163.4 84.1L640 132.8s-35.1-6-52.5 9.9c-13.3 12.1-24.4 29.6-54.2 72.5-.5 .7-6.3 10.5-13.1 0-29.3-42.2-40.8-60.3-54.2-72.5-17.4-15.8-52.5-9.9-52.5-9.9l83.2 123.7-83 123.4s36.6 4.6 54-11.2c11.5-10.5 17.6-20.4 52.5-70.7 6.8-10.5 12.6-.8 13.1 0 29.4 42.4 39.2 58.1 53.1 70.7 17.4 15.8 53.3 11.2 53.3 11.2L556.8 256.5z"/>
                        </svg>
                        <h2>Wix Keys</h2>
                    </div>
                    <p>Your Wix Client ID is used to integrate your merchant account with Wix services. Ensure it matches the key provided in your Wix developer dashboard.</p>
                    <div class="settings-form">
                        <label for="wixClientId">Wix Client ID:</label>
                        <input type="text" id="wixClientId" placeholder="Enter Wix Client ID">
                        <button data-action="saveWixClientId"><i class="fas fa-save"></i> Save Wix Client ID</button>
                    </div>
                </div>
                <div id="my-store" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fas fa-store" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>My Store</h2>
                    </div>
                    <p>Request a custom Wix store to sell your products online. Provide details below to set up your store (minimum: Home and Returns Policy pages).</p>
                    <form id="storeRequestForm" class="settings-form">
                        <label for="storeName">Store Name:</label>
                        <input type="text" id="storeName" name="storeName" placeholder="Enter your store name" required>

                        <label for="aboutStore">About Your Store:</label>
                        <textarea id="aboutStore" name="aboutStore" placeholder="Describe your store (e.g., product focus, target audience)"></textarea>

                        <label for="storeLogos">Store Logos:</label>
                        <input type="file" id="storeLogos" name="storeLogos" accept="image/*" multiple>
                        <small>Upload up to 5 logos (e.g., main logo, favicon).</small>

                        <label for="colorPrefs">Color Preferences:</label>
                        <input type="text" id="colorPrefs" name="colorPrefs" placeholder="e.g., #FF5733, Blue">

                        <label for="stylingDetails">Styling Details:</label>
                        <textarea id="stylingDetails" name="stylingDetails" rows="4" placeholder="e.g., sleek design, minimalistic"></textarea>

                        <label for="preferredDomain">Preferred Domain Name:</label>
                        <input type="text" id="preferredDOMAIN" name="preferredDomain" placeholder="e.g., mystore.uk" oninput="updateDomainPreview()">
                        <button type="button" data-action="checkDomainAvailability"><i class="fas fa-search"></i> Check Availability</button>
                        <span id="domainPreview">@mystore.uk</span>

                        <label>Email Addresses to Set Up (up to 5):</label>
                        <div id="emailsContainer">
                            <div class="email-section" data-email="1">
                                <label for="email1Name">Email Name:</label>
                                <input type="text" id="email1Name" name="email1Name" placeholder="e.g., info">
                                <span id="email1Domain">@mystore.uk</span>
                            </div>
                        </div>
                        <button type="button" data-action="addEmail"><i class="fas fa-plus"></i> Add Another Email</button>

                        <label>Required Pages:</label>
                        <div id="pagesContainer">
                            <div class="page-section" data-page="1">
                                <label for="page1Name">Page Name:</label>
                                <input type="text" id="page1Name" name="page1Name" value="Home" readonly>
                                <br><br>
                                <label for="page1Content">Home Page Content:</label>
                                <textarea id="page1Content" name="page1Content" placeholder="Describe your home page (e.g., welcome message, featured products)"></textarea>
                                <label for="page1Images">Additional Images:</label>
                                <input type="file" id="page1Images" name="page1Images" accept="image/*" multiple>
                            </div>
                            <div class="page-section" data-page="2">
                                <label for="page2Name">Page Name:</label>
                                <input type="text" id="page2Name" name="page2Name" value="Returns Policy" readonly>
                                <br><br>
                                <label for="page2Content">Returns Policy Content:</label>
                                <textarea id="page2Content" name="page2Content" placeholder="Outline your returns policy"></textarea>
                                <label for="page2Images">Additional Images:</label>
                                <input type="file" id="page2Images" name="page2Images" accept="image/*" multiple>
                            </div>
                        </div>
                        <button type="button" data-action="addPage"><i class="fas fa-plus"></i> Add Another Page</button>

                        <label>Wix Store Widgets:</label>
                        <div class="widget-checkboxes">
                            <div><label><input type="checkbox" name="widgets" value="productCatalog"> Product Catalog</label> - Display your products.</div>
                            <div><label><input type="checkbox" name="widgets" value="checkout"> Checkout</label> - Enable direct purchases.</div>
                            <div><label><input type="checkbox" name="widgets" value="cart"> Shopping Cart</label> - Add a cart for customers.</div>
                            <div><label><input type="checkbox" name="widgets" value="promotions"> Promotions</label> - Highlight sales and discounts.</div>
                            <div><label><input type="checkbox" name="widgets" value="contactForm"> Contact Form</label> - Customer inquiries.</div>
                        </div>

                        <button type="button" data-action="saveStoreRequest"><i class="fas fa-paper-plane"></i> Submit Request</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="/static/js/site-auth.js"></script>
    <script src="/static/js/site-navigation.js"></script>
    <script src="/static/js/site-request.js"></script>
    <script src="/static/js/page-load.js"></script>
    <script src="/static/js/user-management.js"></script>
    <script src="/static/js/merchant-page.js"></script>
    <script>
        // Initialize TinyMCE with minimal configuration for specific textareas
        document.addEventListener('DOMContentLoaded', () => {
            tinymce.init({
                selector: '#aboutStore, #stylingDetails, #page1Content, #page2Content',
                inline: true, // Use inline mode to reduce resource usage
                menubar: false, // Disable menubar for simplicity
                toolbar: 'bold italic | bullist numlist | link', // Minimal toolbar
                plugins: 'lists link', // Only load necessary plugins
                setup: (editor) => {
                    editor.on('init', () => {
                        console.log('TinyMCE initialized for:', editor.id);
                    });
                }
            });
        });

        // Wait for the initialize function to become available
        function waitForInitialize(attempts = 50, delay = 100) {
            if (typeof window.initialize === 'function') {
                console.log('Initialize function found, calling initialize("merchant")');
                window.initialize('merchant');
            } else if (attempts > 0) {
                console.log(`Initialize function not found, retrying (${attempts} attempts left)...`);
                setTimeout(() => waitForInitialize(attempts - 1, delay), delay);
            } else {
                console.error('Initialize function not found after maximum retries');
            }
        }
        waitForInitialize();
    </script>
</body>
</html>
templates/my_account.html
<div id="settings" class="section">
    <h2>My Account</h2>
    <div class="settings-form">
        <!-- Contact Details Subsection -->
        <div style="display: flex; align-items: center; margin-bottom: 10px;">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" style="height: 24px; width: auto; margin-right: 10px;">
                <!-- Font Awesome Free 6.5.2: fa-address-card -->
                <path d="M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm80 256h64c44.2 0 80 35.8 80 80c0 8.8-7.2 16-16 16H112c-8.8 0-16-7.2-16-16c0-44.2 35.8-80 80-80zm-32-96a64 64 0 1 1 128 0 64 64 0 1 1 -128 0zm256-32H304c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16V176c0-8.8-7.2-16-16-16zm-64 0c0-26.5 21.5-48 48-48s48 21.5 48 48v64c0 26.5-21.5 48-48 48s-48-21.5-48-48V176z"/>
            </svg>
            <h3>Contact Details</h3>
        </div>
        {% if user_type == "community" %}
        <label><strong>User ID:</strong></label>
        <input type="text" id="userId" readonly>
        <label><strong>Referrer ID:</strong> <span id="referrerId"></span></label>
        {% else %}
        {% if user_type == "merchant" %}
        <label><strong>User ID:</strong></label>
        <input type="text" id="userId" readonly>
        {% endif %}
        {% endif %}
        <label for="contactName">Contact Name:</label>
        <input type="text" id="contactName" placeholder="Enter contact name">
        <label for="websiteUrl">Website URL:</label>
        <input type="url" id="websiteUrl" placeholder="Enter website URL">
        <label for="emailAddress">Email Address:</label>
        <input type="email" id="emailAddress" placeholder="Enter email address">
        <label><strong>Phone Number:</strong></label>
        <span>{{ user.phone_number | default('N/A') }}</span>
        <button data-action="saveSettings"><i class="fas fa-save"></i> Save Settings</button>

        <!-- Change Password Subsection -->
        <div style="display: flex; align-items: center; margin-top: 20px; margin-bottom: 10px;">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" style="height: 24px; width: auto; margin-right: 10px;">
                <!-- Font Awesome Free 6.5.2: fa-lock -->
                <path d="M336 352c97.2 0 176-78.8 176-176S433.2 0 336 0S160 78.8 160 176c0 18.7 2.9 36.8 8.3 53.7L7 391c-4.5 4.5-7 10.6-7 17v80c0 13.3 10.7 24 24 24h80c13.3 0 24-10.7 24-24V448h40c13.3 0 24-10.7 24-24V384h40c6.4 0 12.5-2.5 17-7l33.3-33.3c16.9 5.4 35 8.3 53.7 8.3zM376 96a40 40 0 1 1 0 80 40 40 0 1 1 0-80z"/>
            </svg>
            <h3>Change Password</h3>
        </div>
        <div class="password-container">
            <label for="currentPassword">Current Password:</label>
            <input type="password" id="currentPassword" name="currentPassword" placeholder="Enter current password">
            <i class="fas fa-eye password-toggle" {% if user_type == "partner" %}data-field="currentPassword Ascending"{% else %}data-target="currentPassword"{% endif %}></i>
        </div>
        <div class="password-container">
            <label for="newPassword">New Password:</label>
            <input type="password" id="newPassword" name="newPassword" placeholder="Enter new password">
            <i class="fas fa-eye password-toggle" {% if user_type == "partner" %}data-field="newPassword"{% else %}data-target="newPassword"{% endif %}></i>
        </div>
        <div class="password-container">
            <label for="confirmPassword">Confirm New Password:</label>
            <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password">
            <i class="fas fa-eye password-toggle" {% if user_type == "partner" %}data-field="confirmPassword"{% else %}data-target="confirmPassword"{% endif %}></i>
        </div>
        <button data-action="savePassword"><i class="fas fa-key"></i> Change Password</button>
    </div>
</div>
templates/partner.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Partner</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="/static/styles.css">
    <!-- Define window.apiUrl before loading scripts -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <div class="header-content" id="brandingContent">
                <!-- Branding content will be loaded here -->
            </div>
        </div>
        <div class="main-container">
            <div class="menu-container">
                <div class="menu">
                    <button data-section="welcome">
                        <span class="button-content"><i class="fas fa-home"></i> Dashboard</span>
                    </button>
                    <button data-section="my-account">
                        <span class="button-content"><i class="fas fa-cog"></i> My Account</span>
                    </button>
                    <button data-section="my-products">
                        <span class="button-content"><i class="fas fa-box-open"></i> My Products</span>
                    </button>
                    <button data-section="wix-keys">
                        <span class="button-content"><i class="fab fa-wix-simple"></i> Wix Keys</span>
                    </button>
                    <button data-section="site-requests">
                        <span class="button-content"><i class="fas fa-file-alt"></i> Site Requests</span>
                    </button>
                    <button data-section="documentation">
                        <span class="button-content"><i class="fas fa-book"></i> Documentation</span>
                    </button>
                    <button data-href="/admin">
                        <span class="button-content"><i class="fas fa-arrow-left"></i> Back to Admin</span>
                    </button>
                    <button id="logOffBtn" style="background-color: #dc3545;">
                        <span class="button-content"><i class="fas fa-sign-out-alt"></i> Log Off</span>
                    </button>
                </div>
            </div>
            <div class="content-wrapper">
                <div id="welcome" class="section active">
                    <h2>Welcome to Your Partner Dashboard</h2>
                    <p>This dashboard is designed for partners to manage merchant integrations with clubmadeira.io. Use the "My Account" section to update your contact details or change your password. If you have admin privileges, you can return to the admin panel using the "Back to Admin" button.</p>
                </div>
                {% include 'my_account.html' with user_type='partner' %}
                <div id="my-products" class="section">
                    <h2>My Products</h2>
                    <p>These are the products from your parts feed.</p>
                    <table id="productTable">
                        <thead>
                            <tr><th class="hidden">ID</th><th>Category</th><th>Title</th><th>URL</th><th>Price</th><th>Original</th><th>Image</th><th>QTY</th></tr>
                        </thead>
                        <tbody id="productList"></tbody>
                    </table>
                </div>
                <div id="wix-keys" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fab fa-wix-simple" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>Wix Keys</h2>
                    </div>
                    <p>Your Wix Client ID is used to integrate your merchant account with Wix services. Ensure it matches the key provided in your Wix developer dashboard.</p>
                    <div class="settings-form">
                        <label for="wixClientId">Wix Client ID:</label>
                        <input type="text" id="wixClientId" placeholder="Enter Wix Client ID">
                        <button data-action="saveWixClientId"><i class="fas fa-save"></i> Save Wix Client ID</button>
                    </div>
                </div>
                <div id="site-requests" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fas fa-file-alt" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>Site Requests</h2>
                    </div>
                    <p>View and manage site requests from merchants and communities. Click a row to see details.</p>
                    <table id="siteRequestsTable">
                        <thead>
                            <tr>
                                <th>Type</th>
                                <th>Received At</th>
                                <th>Contact Name</th>
                                <th>Email</th>
                                <th>Organisation</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="siteRequestsList"></tbody>
                    </table>
                </div>
                <div id="site-request-detail" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fas fa-info-circle" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>Site Request Details</h2>
                    </div>
                    <div class="settings-form">
                        <button data-section="site-requests"><i class="fas fa-arrow-left"></i> Back to Site Requests</button>
                        <div id="siteRequestContent"></div>
                    </div>
                </div>
                <div id="documentation" class="section" style="padding-left: 200px;">
                    <div style="display: flex; align-items: center; margin-bottom: 10px;">
                        <i class="fas fa-book" style="font-size: 32px; margin-right: 10px;"></i>
                        <h2>Documentation</h2>
                    </div>
                    <div id="documentation-content">
                        <p>This section provides documentation for integrating with clubmadeira.io. Select a specific topic from the submenu.</p>
                    </div>
                </div>
                <div id="apiKeyModal" class="modal">
                    <div class="modal-content">
                        <span class="close" data-action="closeApiKeyModal"><i class="fas fa-times"></i></span>
                        <h3><i class="fas fa-key"></i> Enter API Key</h3>
                        <label for="merchantWixClientId">Wix Client ID:</label>
                        <input type="text" id="merchantWixClientId" placeholder="Enter Wix Client ID">
                        <button data-action="saveMerchantWixClientId"><i class="fas fa-save"></i> Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked@4.0.12/marked.min.js"></script>
    <script src="/static/js/site-auth.js"></script>
    <script src="/static/js/site-navigation.js"></script>
    <script src="/static/js/site-request.js"></script>
    <script src="/static/js/page-load.js"></script>
    <script src="/static/js/user-management.js"></script>
    <script src="/static/js/partner-page.js"></script>
    <script>
        // Wait for the initialize function to become available
        function waitForInitialize(attempts = 50, delay = 100) {
            if (typeof window.initialize === 'function') {
                console.log('Initialize function found, calling initialize("partner")');
                window.initialize('partner');
            } else if (attempts > 0) {
                console.log(`Initialize function not found, retrying (${attempts} attempts left)...`);
                setTimeout(() => waitForInitialize(attempts - 1, delay), delay);
            } else {
                console.error('Initialize function not found after maximum retries');
            }
        }
        waitForInitialize();
    </script>
</body>
</html>
templates/signup.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .signup-container {
            background-color: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            width: 100%;
            text-align: center;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #333;
        }
        .options {
            display: flex;
            gap: 5px;
            justify-content: center;
            margin-bottom: 30px;
        }
        .option {
            text-align: center;
            cursor: pointer;
            padding: 10px;
            transition: border 0.3s ease;
        }
        .option.selected {
            border: 3px solid #007BFF;
            border-radius: 5px;
        }
        .option img {
            object-fit: cover;
            border-radius: 5px;
        }
        .option span {
            display: block;
            margin-top: 10px;
            font-size: 16px;
            color: #333;
        }
        .option input[type="radio"] {
            display: none;
        }
        .form-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            margin-right: 100px; /* Shifts form 100px left */
        }
        button {
            background-color: #007BFF;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
            max-width: 200px;
        }
        button:hover {
            background-color: #0056b3;
        }
        .form-group {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            width: 100%;
            max-width: 400px;
        }
        .form-group label {
            font-weight: bold;
            flex: 1;
            text-align: right;
            margin-bottom: 0;
        }
        .form-group .input-container {
            position: relative;
            width: 192px; /* 160px + 20% = 192px */
        }
        .form-group input {
            width: 100%;
            padding: 8px;
            padding-right: 30px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            box-sizing: border-box;
        }
        .form-group .toggle-password {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #666;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="signup-container">
        <h1>Sign Up - I am a...</h1>
        <form id="signupForm" autocomplete="off">
            <!-- Dummy fields to trick autofill -->
            <input type="text" class="hidden" autocomplete="off">
            <input type="text" class="hidden" autocomplete="off">
            <div class="options">
                <label class="option">
                    <input type="radio" name="signup_type" value="community">
                    <img src="{{ url_for('static', filename='img/community.jpg') }}" alt="Scout leader in uniform, neck down">
                    <span>Community Group</span>
                </label>
                <label class="option">
                    <input type="radio" name="signup_type" value="seller">
                    <img src="{{ url_for('static', filename='img/merchant.jpg') }}" alt="White man in business suit, neck down">
                    <span>Merchant</span>
                </label>
                <label class="option">
                    <input type="radio" name="signup_type" value="wixpro">
                    <img src="{{ url_for('static', filename='img/wixpro.jpg') }}" alt="Female ethnic web designer in casual dress, neck down">
                    <span>Partner</span>
                </label>
            </div>
            <div class="form-section">
                <div class="form-group">
                    <label for="contact_name">Contact Name:</label>
                    <div class="input-container">
                        <input type="text" id="contact_name" name="contact_name" required autocomplete="off">
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-phone">Phone Number:</label>
                    <div class="input-container">
                        <input type="tel" id="signup-phone" name="signup_phone" autocomplete="off" pattern="[0-9]{10}" title="Please enter a 10-digit phone number">
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-email">Email:</label>
                    <div class="input-container">
                        <input type="text" id="signup-email" name="signup_email" required autocomplete="off">
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-password">Password:</label>
                    <div class="input-container">
                        <input type="text" id="signup-password" name="signup_password" required autocomplete="new-password">
                        <i class="fas fa-eye toggle-password" data-target="signup-password"></i>
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-confirm-password">Confirm Password:</label>
                    <div class="input-container">
                        <input type="password" id="signup-confirm-password" name="signup_confirm_password" required autocomplete="new-password">
                        <i class="fas fa-eye toggle-password" data-target="signup-confirm-password"></i>
                    </div>
                </div>
                <button type="submit">Sign Me Up</button>
            </div>
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        // Set correct input types and clear fields after load
        window.onload = function() {
            const emailInput = document.getElementById('signup-email');
            const passwordInput = document.getElementById('signup-password');
            const confirmPasswordInput = document.getElementById('signup-confirm-password');
            const phoneInput = document.getElementById('signup-phone');

            // Set proper types
            emailInput.type = 'email';
            passwordInput.type = 'password';

            // Double-clear strategy
            setTimeout(function() {
                emailInput.value = '';
                passwordInput.value = '';
                confirmPasswordInput.value = '';
                phoneInput.value = '';
            }, 100);

            setTimeout(function() {
                emailInput.value = '';
                passwordInput.value = '';
                confirmPasswordInput.value = '';
                phoneInput.value = '';
            }, 500); // Extra delay for Chrome
        };

        // Clear fields on focus
        document.getElementById('signup-email').addEventListener('focus', function() {
            this.value = '';
        });
        document.getElementById('signup-password').addEventListener('focus', function() {
            this.value = '';
        });
        document.getElementById('signup-confirm-password').addEventListener('focus', function() {
            this.value = '';
        });
        document.getElementById('signup-phone').addEventListener('focus', function() {
            this.value = '';
        });

        // Highlight selected option
        document.querySelectorAll('input[name="signup_type"]').forEach(function(radio) {
            radio.addEventListener('change', function() {
                document.querySelectorAll('.option').forEach(function(option) {
                    option.classList.remove('selected');
                });
                if (this.checked) {
                    this.closest('.option').classList.add('selected');
                }
            });
        });

        // Dynamically set 'required' attribute for phone number based on signup type
        document.querySelectorAll('input[name="signup_type"]').forEach(function(radio) {
            radio.addEventListener('change', function() {
                const phoneInput = document.getElementById('signup-phone');
                if (this.value === 'wixpro') {
                    phoneInput.removeAttribute('required');
                } else {
                    phoneInput.setAttribute('required', '');
                }
            });
        });

        // Toggle password visibility
        document.querySelectorAll('.toggle-password').forEach(function(icon) {
            icon.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const input = document.getElementById(targetId);
                if (input.type === 'password') {
                    input.type = 'text';
                    this.classList.remove('fa-eye');
                    this.classList.add('fa-eye-slash');
                } else {
                    input.type = 'password';
                    this.classList.remove('fa-eye-slash');
                    this.classList.add('fa-eye');
                }
            });
        });

        // Form submission with OTP workflow
        $('#signupForm').on('submit', async function(e) {
            e.preventDefault();

            const signupType = $('input[name="signup_type"]:checked').val();
            if (!signupType) {
                toastr.error('Please select a signup type.');
                return;
            }

            const contactName = $('#contact_name').val().trim();
            const phone = $('#signup-phone').val().trim();
            const email = $('#signup-email').val().trim();
            const password = $('#signup-password').val().trim();
            const confirmPassword = $('#signup-confirm-password').val().trim();

            // Validation: Check all required fields, password match, and phone validity
            if (!contactName || !email || !password || !confirmPassword) {
                toastr.error('All fields except phone (for Partner) must be filled.');
                return;
            }

            if (password !== confirmPassword) {
                toastr.error('Passwords do not match.');
                return;
            }

            const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d).{8,}$/;
            if (!passwordRegex.test(password)) {
                toastr.error('Password must be 8+ characters with letters and numbers.');
                return;
            }

            if (signupType !== 'wixpro') {
                if (!phone) {
                    toastr.error('Phone number is required for Community Group and Merchant.');
                    return;
                }
                const phoneRegex = /^\d{10}$/;
                if (!phoneRegex.test(phone)) {
                    toastr.error('Enter a valid 10-digit phone number (e.g., 1234567890).');
                    return;
                }
            }

            const signupData = { 
                signup_type: signupType, 
                contact_name: contactName, 
                signup_phone: phone || null, 
                signup_email: email, 
                signup_password: password 
            };

            try {
                // Step 1: Create user with /signup
                const signupResponse = await fetch('/signup', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(signupData)
                });
                const signupDataResp = await signupResponse.json();
                if (!signupResponse.ok) throw new Error(signupDataResp.message || 'Signup failed');

                if (signupType === 'wixpro') {
                    // Partner: Direct to login
                    toastr.success('Signup successful! Redirecting to login...');
                    setTimeout(() => window.location.href = '/login', 2000);
                } else {
                    // Merchant/Community: Send OTP with /reset-password
                    const otpResponse = await fetch('/reset-password', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const otpData = await otpResponse.json();
                    if (!otpResponse.ok) throw new Error(otpData.message || 'Failed to send OTP');

                    toastr.success('OTP sent to your phone. Please enter it below.');
                    const otpContainer = document.createElement('div');
                    otpContainer.innerHTML = `
                        <div class="form-group">
                            <label for="signupOtp">Enter OTP:</label>
                            <input type="text" id="signupOtp" name="otp" placeholder="Enter OTP" required>
                        </div>
                        <button id="verifyOtpBtn">Verify OTP</button>
                    `;
                    this.appendChild(otpContainer);
                    this.querySelector('.form-section').style.display = 'none';

                    document.getElementById('verifyOtpBtn').addEventListener('click', async () => {
                        const otp = document.getElementById('signupOtp').value.trim();
                        if (!otp) {
                            toastr.error('Please enter the OTP.');
                            return;
                        }

                        // Step 2: Verify OTP with /verify-reset-code
                        const verifyResponse = await fetch('/verify-reset-code', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ email, code: otp, new_password: password })
                        });
                        const verifyData = await verifyResponse.json();
                        if (!verifyResponse.ok) throw new Error(verifyData.message || 'OTP verification failed');

                        // Step 3: Redirect to group page based on signup_type
                        toastr.success('Signup verified! Redirecting to your page...');
                        const redirectPath = signupType === 'seller' ? '/merchant' : '/community';
                        setTimeout(() => window.location.href = redirectPath, 2000);
                    });
                }
            } catch (error) {
                toastr.error(error.message || 'Error during signup/OTP process');
            }
        });

        // Toastr options
        toastr.options = {
            closeButton: true,
            progressBar: true,
            positionClass: 'toast-top-right',
            timeOut: 5000
        };
    </script>
</body>
</html>
utils/auth.py
import jwt
import datetime
from flask import current_app, request, jsonify, url_for
from functools import wraps
import bcrypt
from .users import load_users_settings, save_users_settings, generate_code

def login_required(required_permissions, require_all=True):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            token = request.headers.get("Authorization", "").replace("Bearer ", "")
            if not token:
                return jsonify({"status": "error", "message": "Token required"}), 401
            try:
                payload = jwt.decode(token, current_app.config['JWT_SECRET_KEY'], algorithms=["HS256"])
                if datetime.datetime.utcnow().timestamp() > payload["exp"]:
                    return jsonify({"status": "error", "message": "Token expired"}), 401
                request.user_id = payload["userId"]
                request.permissions = payload.get("permissions", [])
                effective_perms = []
                for perm in required_permissions:
                    if perm == "allauth":
                        effective_perms.extend(["admin", "merchant", "community", "wixpro"])
                    elif perm == "self":
                        user_id = next((v for v in kwargs.values() if isinstance(v, str)), None)
                        if user_id and request.user_id != user_id:
                            effective_perms.append(None)
                        else:
                            effective_perms.append("self")
                    else:
                        effective_perms.append(perm)
                if require_all:
                    if not all(p in request.permissions for p in effective_perms if p and p != "self"):
                        return jsonify({"status": "error", "message": f"Insufficient permissions: {effective_perms}"}), 403
                else:
                    if not any(p in request.permissions for p in effective_perms if p and p != "self"):
                        return jsonify({"status": "error", "message": f"Insufficient permissions: {effective_perms}"}), 403
                return f(*args, **kwargs)
            except jwt.InvalidTokenError:
                return jsonify({"status": "error", "message": "Invalid token"}), 401
            except Exception as e:
                return jsonify({"status": "error", "message": f"Token error: {str(e)}"}), 500
        return decorated_function
    return decorator

def login_user():
    data = request.get_json()
    if not data or 'email' not in data or 'password' not in data:
        return jsonify({"status": "error", "message": "Email and password required"}), 400
    email = data["email"].strip().lower()
    password = data["password"].strip()
    users_settings = load_users_settings()
    user_id = None
    for uid, settings in users_settings.items():
        if settings.get("email_address", "").lower() == email and bcrypt.checkpw(password.encode('utf-8'), settings["password"].encode('utf-8')):
            user_id = uid
            break
    if not user_id:
        return jsonify({"status": "error", "message": "Invalid credentials"}), 401
    permissions = users_settings[user_id].get("permissions", [])
    token = jwt.encode(
        {"userId": user_id, "permissions": permissions, "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=1)},
        current_app.config['JWT_SECRET_KEY'],
        algorithm="HS256"
    )
    
    # Determine redirect URL based on permissions
    redirect_url = None
    if "admin" in permissions:
        redirect_url = url_for('admin')  # Assuming an admin route exists
    elif "merchant" in permissions:
        redirect_url = url_for('merchant')  # Assuming a merchant route exists
    elif "community" in permissions:
        redirect_url = url_for('community')  # Assuming a community route exists
    elif "wixpro" in permissions:
        redirect_url = url_for('wixpro')  # Assuming a wixpro route exists
    else:
        redirect_url = url_for('home')  # Default fallback

    response_data = {
        "status": "success",
        "token": token,
        "userId": user_id,
        "redirect_url": redirect_url  # Add redirect URL to response
    }
    return jsonify(response_data), 200

def signup_user():
    data = request.get_json()
    # Base required fields
    required_fields = ['signup_type', 'contact_name', 'signup_email', 'signup_password']
    if not all(k in data for k in required_fields):
        return jsonify({"status": "error", "message": "Signup type, contact name, email, and password are required"}), 400

    # Phone number is required for community and merchant, optional for wixpro
    signup_type = data['signup_type']
    signup_phone = data.get('signup_phone')
    if signup_type in ['community', 'seller'] and (signup_phone is None or signup_phone == ''):
        return jsonify({"status": "error", "message": "Phone number is required for Community Group and Merchant signups"}), 400

    # Validate phone number format if provided
    if signup_phone:
        import re
        if not re.match(r'^\d{10}$', signup_phone):
            return jsonify({"status": "error", "message": "Phone number must be a 10-digit number with no spaces or special characters"}), 400

    users_settings = load_users_settings()
    if any(u['email_address'] == data['signup_email'] for u in users_settings.values()):
        return jsonify({"status": "error", "message": "Email exists"}), 400

    USERid = generate_code()
    hashed_password = bcrypt.hashpw(data['signup_password'].encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    users_settings[USERid] = {
        "email_address": data['signup_email'],
        "password": hashed_password,
        "contact_name": data['contact_name'],
        "phone_number": signup_phone,  # Store the phone number
        "permissions": [data['signup_type']]
    }
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": "Signup successful"}), 201

def generate_token(user_id, permissions):
    """Generate a JWT token with user_id and permissions."""
    payload = {
        "userId": user_id,  # Match login_user key
        "permissions": permissions,
        "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=24)  # 24-hour expiry
    }
    return jwt.encode(payload, current_app.config['JWT_SECRET_KEY'], algorithm='HS256')
utils/categories.py
from amazon_paapi import AmazonApi 
from .config import load_config 
from pseudo_categories import PSEUDO_CATEGORIES 
 
def get_all_categories(parent_id=None): 
    config = load_config() 
    if parent_id and all(config.get("amazon_uk", {}).values()): 
        amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"], config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"]) 
        browse_nodes = amazon.get_browse_nodes(browse_node_ids=[parent_id], resources=["BrowseNodes.Children"]) 
        return [{"id": node.browse_node_id, "name": node.display_name} for node in browse_nodes.browse_nodes[0].children] 
    return [{"id": cat["id"], "name": cat["name"]} for cat in PSEUDO_CATEGORIES] 
 
def filter_categories_with_products(category_ids, min_discount_percent): 
    # Placeholder for filtering logic 
    return [{"id": cat_id, "name": cat_id} for cat_id in category_ids] 

utils/config.py
import json 
import os 
 
CONFIG_FILE = "config.json" 
 
def load_config(): 
    default_config = {"amazon_uk": {"ACCESS_KEY": "", "SECRET_KEY": "", "ASSOCIATE_TAG": "", "COUNTRY": ""}} 
    if not os.path.exists(CONFIG_FILE): 
        return default_config 
    with open(CONFIG_FILE, 'r') as f: 
        return json.load(f) 
 
def save_config(config): 
    with open(CONFIG_FILE, 'w') as f: 
        json.dump(config, f, indent=4) 

utils/data.py
import os 
import json 
 
SITE_REQUEST_DIR = os.path.join(os.path.dirname(__file__), "siterequest") 
 
def load_site_request(user_id): 
    file_path = os.path.join(SITE_REQUEST_DIR, user_id) 
    if os.path.exists(file_path): 
        with open(file_path, 'r') as f: 
            return json.load(f) 
    return {} 
 
def save_site_request(user_id, site_request_data): 
    if not os.path.exists(SITE_REQUEST_DIR): 
        os.makedirs(SITE_REQUEST_DIR) 
    file_path = os.path.join(SITE_REQUEST_DIR, user_id) 
    with open(file_path, 'w') as f: 
        json.dump(site_request_data, f, indent=4) 

utils/products.py
from .config import load_config 
from amazon_paapi import AmazonApi 
 
def search_all_discounted(category_id): 
    config = load_config() 
    items = [] 
    if all(config.get("amazon_uk", {}).values()): 
        amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"], config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"]) 
        search_result = amazon.search_items(BrowseNodeId=category_id, ItemCount=10) 
        items.extend([{"id": item.asin, "title": item.item_info.title.display_value} for item in search_result.items]) 
    return items 

utils/users.py
import json
import os
import random
import string

USERS_SETTINGS_FILE = "users_settings.json"

def load_users_settings():
    if os.path.exists(USERS_SETTINGS_FILE):
        with open(USERS_SETTINGS_FILE, 'r') as f:
            users_settings = json.load(f)
            # Ensure all user records have a phone_number field
            for user_id, settings in users_settings.items():
                if 'phone_number' not in settings:
                    settings['phone_number'] = None  # Set to None for existing users
            return users_settings
    return {}

def save_users_settings(users_settings):
    with open(USERS_SETTINGS_FILE, 'w') as f:
        json.dump(users_settings, f, indent=4)

def get_user_settings(user_id):
    user_settings = load_users_settings().get(user_id, {})
    # Ensure the returned settings include phone_number
    if 'phone_number' not in user_settings:
        user_settings['phone_number'] = None
    return user_settings

def generate_code():
    charset = string.digits + string.ascii_uppercase
    code = ''.join(random.choice(charset) for _ in range(7))
    total = sum(charset.index(c) for c in code)
    checksum = charset[total % 36]
    return code + checksum
